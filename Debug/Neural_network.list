
Neural_network.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f118  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a0  0800f320  0800f320  0001f320  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104c0  080104c0  00030858  2**0
                  CONTENTS
  4 .ARM          00000008  080104c0  080104c0  000204c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104c8  080104c8  00030858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104c8  080104c8  000204c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080104cc  080104cc  000204cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000718  20000000  080104d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000718  08010be8  00030718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200007b8  08010c88  000307b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000714  20000858  08010d28  00030858  2**2
                  ALLOC
 12 ._user_heap_stack 00001804  20000f6c  08010d28  00030f6c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030858  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016232  00000000  00000000  00030886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033fc  00000000  00000000  00046ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001248  00000000  00000000  00049eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000010a8  00000000  00000000  0004b100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002eedb  00000000  00000000  0004c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001381f  00000000  00000000  0007b083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00117d78  00000000  00000000  0008e8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001a661a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000621c  00000000  00000000  001a666c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .stab         000000cc  00000000  00000000  001ac888  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      000001b9  00000000  00000000  001ac954  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000858 	.word	0x20000858
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f300 	.word	0x0800f300

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000085c 	.word	0x2000085c
 800023c:	0800f300 	.word	0x0800f300

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	db0b      	blt.n	8000a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 021f 	and.w	r2, r3, #31
 8000a10:	4907      	ldr	r1, [pc, #28]	; (8000a30 <__NVIC_EnableIRQ+0x38>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	2001      	movs	r0, #1
 8000a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000e100 	.word	0xe000e100

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0a      	blt.n	8000a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	490c      	ldr	r1, [pc, #48]	; (8000a80 <__NVIC_SetPriority+0x4c>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	440b      	add	r3, r1
 8000a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a5c:	e00a      	b.n	8000a74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4908      	ldr	r1, [pc, #32]	; (8000a84 <__NVIC_SetPriority+0x50>)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	0112      	lsls	r2, r2, #4
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	761a      	strb	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf28      	it	cs
 8000aa6:	2304      	movcs	r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3304      	adds	r3, #4
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d902      	bls.n	8000ab8 <NVIC_EncodePriority+0x30>
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	e000      	b.n	8000aba <NVIC_EncodePriority+0x32>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	4313      	orrs	r3, r2
         );
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	; 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000af4:	f3bf 8f4f 	dsb	sy
}
 8000af8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000afa:	f3bf 8f6f 	isb	sy
}
 8000afe:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <SCB_EnableICache+0x48>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b08:	f3bf 8f4f 	dsb	sy
}
 8000b0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b0e:	f3bf 8f6f 	isb	sy
}
 8000b12:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <SCB_EnableICache+0x48>)
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <SCB_EnableICache+0x48>)
 8000b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b20:	f3bf 8f4f 	dsb	sy
}
 8000b24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b26:	f3bf 8f6f 	isb	sy
}
 8000b2a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <SCB_EnableDCache+0x84>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b4a:	f3bf 8f4f 	dsb	sy
}
 8000b4e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <SCB_EnableDCache+0x84>)
 8000b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b56:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	0b5b      	lsrs	r3, r3, #13
 8000b5c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b60:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b6a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	015a      	lsls	r2, r3, #5
 8000b70:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b74:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b7a:	4911      	ldr	r1, [pc, #68]	; (8000bc0 <SCB_EnableDCache+0x84>)
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1e5a      	subs	r2, r3, #1
 8000b86:	60ba      	str	r2, [r7, #8]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1ef      	bne.n	8000b6c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	1e5a      	subs	r2, r3, #1
 8000b90:	60fa      	str	r2, [r7, #12]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1e5      	bne.n	8000b62 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b96:	f3bf 8f4f 	dsb	sy
}
 8000b9a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <SCB_EnableDCache+0x84>)
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <SCB_EnableDCache+0x84>)
 8000ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba8:	f3bf 8f4f 	dsb	sy
}
 8000bac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bae:	f3bf 8f6f 	isb	sy
}
 8000bb2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f043 0204 	orr.w	r2, r3, #4
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	601a      	str	r2, [r3, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f043 0201 	orr.w	r2, r3, #1
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f023 0201 	bic.w	r2, r3, #1
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	601a      	str	r2, [r3, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	601a      	str	r2, [r3, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(const TIM_TypeDef *TIMx)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <LL_TIM_GetAutoReload>:
  *       whether or not a timer instance supports a 32 bits counter.
  * @param  TIMx Timer instance
  * @retval Auto-reload value
  */
__STATIC_INLINE uint32_t LL_TIM_GetAutoReload(const TIM_TypeDef *TIMx)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f06f 0201 	mvn.w	r2, #1
 8000c9e:	611a      	str	r2, [r3, #16]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	f043 0201 	orr.w	r2, r3, #1
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	60da      	str	r2, [r3, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f043 0201 	orr.w	r2, r3, #1
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69db      	ldr	r3, [r3, #28]
 8000d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d28:	2b40      	cmp	r3, #64	; 0x40
 8000d2a:	d101      	bne.n	8000d30 <LL_USART_IsActiveFlag_TC+0x18>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e000      	b.n	8000d32 <LL_USART_IsActiveFlag_TC+0x1a>
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2240      	movs	r2, #64	; 0x40
 8000d4a:	621a      	str	r2, [r3, #32]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000d64:	78fa      	ldrb	r2, [r7, #3]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4013      	ands	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40023800 	.word	0x40023800

08000da8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000db4:	4907      	ldr	r1, [pc, #28]	; (8000dd4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	634b      	str	r3, [r1, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000de4:	4907      	ldr	r1, [pc, #28]	; (8000e04 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4013      	ands	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	40023800 	.word	0x40023800

08000e08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e0c:	b091      	sub	sp, #68	; 0x44
 8000e0e:	af00      	add	r7, sp, #0
//	ai_float std[3] = { 0.06754268, 0.07502506, 0.03128953 };
// if we don't use PCA
	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000e10:	f7ff fe6e 	bl	8000af0 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000e14:	f7ff fe92 	bl	8000b3c <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e18:	f001 f929 	bl	800206e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e1c:	f000 f900 	bl	8001020 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e20:	f000 fb28 	bl	8001474 <MX_GPIO_Init>
	MX_ETH_Init();
 8000e24:	f000 f98e 	bl	8001144 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000e28:	f000 fa68 	bl	80012fc <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000e2c:	f000 faf4 	bl	8001418 <MX_USB_OTG_FS_PCD_Init>
	MX_CRC_Init();
 8000e30:	f000 f966 	bl	8001100 <MX_CRC_Init>
	MX_TIM14_Init();
 8000e34:	f000 fa2c 	bl	8001290 <MX_TIM14_Init>
	MX_TIM13_Init();
 8000e38:	f000 f9f6 	bl	8001228 <MX_TIM13_Init>
	MX_RNG_Init();
 8000e3c:	f000 f9d0 	bl	80011e0 <MX_RNG_Init>
	/* USER CODE BEGIN 2 */
	outparam.mean = 0.0338695f;
 8000e40:	4a6f      	ldr	r2, [pc, #444]	; (8001000 <main+0x1f8>)
 8000e42:	4b70      	ldr	r3, [pc, #448]	; (8001004 <main+0x1fc>)
 8000e44:	6013      	str	r3, [r2, #0]
	outparam.var = 0.00167553f;
 8000e46:	4a6e      	ldr	r2, [pc, #440]	; (8001000 <main+0x1f8>)
 8000e48:	4b6f      	ldr	r3, [pc, #444]	; (8001008 <main+0x200>)
 8000e4a:	6053      	str	r3, [r2, #4]
	float w = outparam.var;
 8000e4c:	4b6c      	ldr	r3, [pc, #432]	; (8001000 <main+0x1f8>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	63fb      	str	r3, [r7, #60]	; 0x3c
	static int in_shape = 3;
	static int timestep = 4;
	static int pca_dimension = 4;
//	float t1 = PCATransformTest(in_shape, pca_dimension, 100); // This function can be used with only 3 param, no need of input array.

	float in[in_shape][timestep];
 8000e52:	4b6e      	ldr	r3, [pc, #440]	; (800100c <main+0x204>)
 8000e54:	681e      	ldr	r6, [r3, #0]
 8000e56:	4b6e      	ldr	r3, [pc, #440]	; (8001010 <main+0x208>)
 8000e58:	6819      	ldr	r1, [r3, #0]
 8000e5a:	1e73      	subs	r3, r6, #1
 8000e5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e5e:	4632      	mov	r2, r6
 8000e60:	2300      	movs	r3, #0
 8000e62:	4692      	mov	sl, r2
 8000e64:	469b      	mov	fp, r3
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000e72:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000e76:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000e7a:	1e4b      	subs	r3, r1, #1
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e7e:	4632      	mov	r2, r6
 8000e80:	2300      	movs	r3, #0
 8000e82:	613a      	str	r2, [r7, #16]
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	460a      	mov	r2, r1
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61ba      	str	r2, [r7, #24]
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8000e92:	465b      	mov	r3, fp
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	fb02 f203 	mul.w	r2, r2, r3
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	4650      	mov	r0, sl
 8000e9e:	fb00 f303 	mul.w	r3, r0, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4652      	mov	r2, sl
 8000ea6:	69b8      	ldr	r0, [r7, #24]
 8000ea8:	fba2 8900 	umull	r8, r9, r2, r0
 8000eac:	444b      	add	r3, r9
 8000eae:	4699      	mov	r9, r3
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000ebc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000ec0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000ec4:	4632      	mov	r2, r6
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60ba      	str	r2, [r7, #8]
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	460a      	mov	r2, r1
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603a      	str	r2, [r7, #0]
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000ed8:	464b      	mov	r3, r9
 8000eda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8000ede:	4652      	mov	r2, sl
 8000ee0:	fb02 f203 	mul.w	r2, r2, r3
 8000ee4:	465b      	mov	r3, fp
 8000ee6:	4640      	mov	r0, r8
 8000ee8:	fb00 f303 	mul.w	r3, r0, r3
 8000eec:	4413      	add	r3, r2
 8000eee:	4642      	mov	r2, r8
 8000ef0:	4650      	mov	r0, sl
 8000ef2:	fba2 4500 	umull	r4, r5, r2, r0
 8000ef6:	442b      	add	r3, r5
 8000ef8:	461d      	mov	r5, r3
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	016b      	lsls	r3, r5, #5
 8000f04:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000f08:	0162      	lsls	r2, r4, #5
 8000f0a:	4633      	mov	r3, r6
 8000f0c:	460c      	mov	r4, r1
 8000f0e:	4622      	mov	r2, r4
 8000f10:	fb02 f303 	mul.w	r3, r2, r3
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	3307      	adds	r3, #7
 8000f18:	08db      	lsrs	r3, r3, #3
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	ebad 0d03 	sub.w	sp, sp, r3
 8000f20:	466b      	mov	r3, sp
 8000f22:	3303      	adds	r3, #3
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30
	randomInput(in, in_shape * timestep);
 8000f2a:	4b39      	ldr	r3, [pc, #228]	; (8001010 <main+0x208>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a37      	ldr	r2, [pc, #220]	; (800100c <main+0x204>)
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	fb02 f303 	mul.w	r3, r2, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f3a:	f000 fbd3 	bl	80016e4 <randomInput>

//	float pca_matrix[pca_dimension][in_shape];
//	randomMatrix(pca_matrix, pca_dimension, in_shape);

//	float out[pca_dimension];
	float pred = 0.f;
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
//	calcPCA(out, in, pca_matrix, pca_dimension, in_shape);
//	for (int i = 0; i < 100; i++) {
//		timeX += modelRun(in, SIZEOF(in), &pred);
//	}
//	timeX = timeX / 100;
	timeX = modelRun(in, SIZEOF(in), &pred);
 8000f44:	4633      	mov	r3, r6
 8000f46:	4622      	mov	r2, r4
 8000f48:	fb02 f303 	mul.w	r3, r2, r3
 8000f4c:	009a      	lsls	r2, r3, #2
 8000f4e:	4633      	mov	r3, r6
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4619      	mov	r1, r3
 8000f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f60:	f000 fbe6 	bl	8001730 <modelRun>
 8000f64:	eef0 7a40 	vmov.f32	s15, s0
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <main+0x20c>)
 8000f6a:	edc3 7a00 	vstr	s15, [r3]
	normalizationPred(&pred, outparam);
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <main+0x1f8>)
 8000f70:	ed93 7a00 	vldr	s14, [r3]
 8000f74:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	eeb0 0a47 	vmov.f32	s0, s14
 8000f80:	eef0 0a67 	vmov.f32	s1, s15
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 fd4f 	bl	8001a28 <normalizationPred>
	_startCounter(TIM13);
 8000f8a:	4823      	ldr	r0, [pc, #140]	; (8001018 <main+0x210>)
 8000f8c:	f000 fb4a 	bl	8001624 <configCounter>
	float cp = calcCP(&pred, outparam, w);
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <main+0x1f8>)
 8000f92:	ed93 7a00 	vldr	s14, [r3]
 8000f96:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	ed97 1a0f 	vldr	s2, [r7, #60]	; 0x3c
 8000fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa6:	eef0 0a67 	vmov.f32	s1, s15
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fd5c 	bl	8001a68 <calcCP>
 8000fb0:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float cm = calcCM(&pred, outparam, w);
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <main+0x1f8>)
 8000fb6:	ed93 7a00 	vldr	s14, [r3]
 8000fba:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	ed97 1a0f 	vldr	s2, [r7, #60]	; 0x3c
 8000fc6:	eeb0 0a47 	vmov.f32	s0, s14
 8000fca:	eef0 0a67 	vmov.f32	s1, s15
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fd8a 	bl	8001ae8 <calcCM>
 8000fd4:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	_stopCounter(TIM13);
 8000fd8:	480f      	ldr	r0, [pc, #60]	; (8001018 <main+0x210>)
 8000fda:	f7ff fe13 	bl	8000c04 <LL_TIM_DisableCounter>
	timeX = getTimeus(TIM13, overflow_2);
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <main+0x214>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <main+0x210>)
 8000fe6:	f000 fb2f 	bl	8001648 <getTimeus>
 8000fea:	eef0 7a40 	vmov.f32	s15, s0
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <main+0x20c>)
 8000ff0:	edc3 7a00 	vstr	s15, [r3]
	resetCounter(TIM13, &overflow_2);
 8000ff4:	4909      	ldr	r1, [pc, #36]	; (800101c <main+0x214>)
 8000ff6:	4808      	ldr	r0, [pc, #32]	; (8001018 <main+0x210>)
 8000ff8:	f000 fb64 	bl	80016c4 <resetCounter>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000ffc:	e7fe      	b.n	8000ffc <main+0x1f4>
 8000ffe:	bf00      	nop
 8001000:	20000ec8 	.word	0x20000ec8
 8001004:	3d0ababf 	.word	0x3d0ababf
 8001008:	3adb9d75 	.word	0x3adb9d75
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008
 8001014:	20000e90 	.word	0x20000e90
 8001018:	40001c00 	.word	0x40001c00
 800101c:	20000e8c 	.word	0x20000e8c

08001020 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b094      	sub	sp, #80	; 0x50
 8001024:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2234      	movs	r2, #52	; 0x34
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f009 fc66 	bl	800a900 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001044:	f002 f898 	bl	8003178 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001048:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <SystemClock_Config+0xd8>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	4a2a      	ldr	r2, [pc, #168]	; (80010f8 <SystemClock_Config+0xd8>)
 800104e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001052:	6413      	str	r3, [r2, #64]	; 0x40
 8001054:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <SystemClock_Config+0xd8>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001060:	4b26      	ldr	r3, [pc, #152]	; (80010fc <SystemClock_Config+0xdc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a25      	ldr	r2, [pc, #148]	; (80010fc <SystemClock_Config+0xdc>)
 8001066:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b23      	ldr	r3, [pc, #140]	; (80010fc <SystemClock_Config+0xdc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001078:	2301      	movs	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800107c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001080:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001082:	2302      	movs	r3, #2
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001086:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800108a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 800108c:	2304      	movs	r3, #4
 800108e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001090:	23d8      	movs	r3, #216	; 0xd8
 8001092:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001094:	2302      	movs	r3, #2
 8001096:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001098:	2309      	movs	r3, #9
 800109a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800109c:	2302      	movs	r3, #2
 800109e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 f8c7 	bl	8003238 <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x94>
		Error_Handler();
 80010b0:	f000 fd5a 	bl	8001b68 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80010b4:	f002 f870 	bl	8003198 <HAL_PWREx_EnableOverDrive>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xa2>
		Error_Handler();
 80010be:	f000 fd53 	bl	8001b68 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010c2:	230f      	movs	r3, #15
 80010c4:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c6:	2302      	movs	r3, #2
 80010c8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010d2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d8:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	2107      	movs	r1, #7
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fb57 	bl	8003794 <HAL_RCC_ClockConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0xd0>
		Error_Handler();
 80010ec:	f000 fd3c 	bl	8001b68 <Error_Handler>
	}
}
 80010f0:	bf00      	nop
 80010f2:	3750      	adds	r7, #80	; 0x50
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <MX_CRC_Init+0x3c>)
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <MX_CRC_Init+0x40>)
 8001108:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_CRC_Init+0x3c>)
 800110c:	2200      	movs	r2, #0
 800110e:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_CRC_Init+0x3c>)
 8001112:	2200      	movs	r2, #0
 8001114:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_CRC_Init+0x3c>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_CRC_Init+0x3c>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_CRC_Init+0x3c>)
 8001124:	2201      	movs	r2, #1
 8001126:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_CRC_Init+0x3c>)
 800112a:	f001 f907 	bl	800233c <HAL_CRC_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_CRC_Init+0x38>
		Error_Handler();
 8001134:	f000 fd18 	bl	8001b68 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200008ac 	.word	0x200008ac
 8001140:	40023000 	.word	0x40023000

08001144 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_ETH_Init+0x84>)
 800114a:	4a20      	ldr	r2, [pc, #128]	; (80011cc <MX_ETH_Init+0x88>)
 800114c:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_ETH_Init+0x8c>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_ETH_Init+0x8c>)
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_ETH_Init+0x8c>)
 800115c:	22e1      	movs	r2, #225	; 0xe1
 800115e:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_ETH_Init+0x8c>)
 8001162:	2200      	movs	r2, #0
 8001164:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_ETH_Init+0x8c>)
 8001168:	2200      	movs	r2, #0
 800116a:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MX_ETH_Init+0x8c>)
 800116e:	2200      	movs	r2, #0
 8001170:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_ETH_Init+0x84>)
 8001174:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <MX_ETH_Init+0x8c>)
 8001176:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_ETH_Init+0x84>)
 800117a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800117e:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_ETH_Init+0x84>)
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <MX_ETH_Init+0x90>)
 8001184:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_ETH_Init+0x84>)
 8001188:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <MX_ETH_Init+0x94>)
 800118a:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_ETH_Init+0x84>)
 800118e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001192:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <MX_ETH_Init+0x84>)
 8001196:	f001 f9bb 	bl	8002510 <HAL_ETH_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ETH_Init+0x60>
		Error_Handler();
 80011a0:	f000 fce2 	bl	8001b68 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 80011a4:	2238      	movs	r2, #56	; 0x38
 80011a6:	2100      	movs	r1, #0
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <MX_ETH_Init+0x98>)
 80011aa:	f009 fba9 	bl	800a900 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_ETH_Init+0x98>)
 80011b0:	2221      	movs	r2, #33	; 0x21
 80011b2:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_ETH_Init+0x98>)
 80011b6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80011ba:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_ETH_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200008d0 	.word	0x200008d0
 80011cc:	40028000 	.word	0x40028000
 80011d0:	20000ed8 	.word	0x20000ed8
 80011d4:	200007b8 	.word	0x200007b8
 80011d8:	20000718 	.word	0x20000718
 80011dc:	20000874 	.word	0x20000874

080011e0 <MX_RNG_Init>:
/**
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b0a4      	sub	sp, #144	; 0x90
 80011e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RNG_Init 0 */

	/* USER CODE END RNG_Init 0 */

	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80011e6:	463b      	mov	r3, r7
 80011e8:	2290      	movs	r2, #144	; 0x90
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f009 fb87 	bl	800a900 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011f6:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80011fc:	463b      	mov	r3, r7
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 fcba 	bl	8003b78 <HAL_RCCEx_PeriphCLKConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_RNG_Init+0x2e>
		Error_Handler();
 800120a:	f000 fcad 	bl	8001b68 <Error_Handler>
	}

	/* Peripheral clock enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 800120e:	2040      	movs	r0, #64	; 0x40
 8001210:	f7ff fdca 	bl	8000da8 <LL_AHB2_GRP1_EnableClock>

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	LL_RNG_Enable(RNG);
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <MX_RNG_Init+0x44>)
 8001216:	f7ff fcd5 	bl	8000bc4 <LL_RNG_Enable>
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3790      	adds	r7, #144	; 0x90
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	50060800 	.word	0x50060800

08001228 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM13_Init 0 */

	/* USER CODE END TIM13_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM13);
 800123c:	2080      	movs	r0, #128	; 0x80
 800123e:	f7ff fdcb 	bl	8000dd8 <LL_APB1_GRP1_EnableClock>

	/* TIM13 interrupt Init */
	NVIC_SetPriority(TIM8_UP_TIM13_IRQn,
 8001242:	f7ff fbcb 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8001246:	4603      	mov	r3, r0
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fc1b 	bl	8000a88 <NVIC_EncodePriority>
 8001252:	4603      	mov	r3, r0
 8001254:	4619      	mov	r1, r3
 8001256:	202c      	movs	r0, #44	; 0x2c
 8001258:	f7ff fbec 	bl	8000a34 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
	NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800125c:	202c      	movs	r0, #44	; 0x2c
 800125e:	f7ff fbcb 	bl	80009f8 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	TIM_InitStruct.Prescaler = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 65535;
 800126a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126e:	60fb      	str	r3, [r7, #12]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
	LL_TIM_Init(TIM13, &TIM_InitStruct);
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4619      	mov	r1, r3
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_TIM13_Init+0x64>)
 800127a:	f003 fdc3 	bl	8004e04 <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM13);
 800127e:	4803      	ldr	r0, [pc, #12]	; (800128c <MX_TIM13_Init+0x64>)
 8001280:	f7ff fcd0 	bl	8000c24 <LL_TIM_DisableARRPreload>
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40001c00 	.word	0x40001c00

08001290 <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM14_Init 0 */

	/* USER CODE END TIM14_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM14);
 80012a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012a8:	f7ff fd96 	bl	8000dd8 <LL_APB1_GRP1_EnableClock>

	/* TIM14 interrupt Init */
	NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn,
 80012ac:	f7ff fb96 	bl	80009dc <__NVIC_GetPriorityGrouping>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fbe6 	bl	8000a88 <NVIC_EncodePriority>
 80012bc:	4603      	mov	r3, r0
 80012be:	4619      	mov	r1, r3
 80012c0:	202d      	movs	r0, #45	; 0x2d
 80012c2:	f7ff fbb7 	bl	8000a34 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
	NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80012c6:	202d      	movs	r0, #45	; 0x2d
 80012c8:	f7ff fb96 	bl	80009f8 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	TIM_InitStruct.Prescaler = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 65535;
 80012d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d8:	60fb      	str	r3, [r7, #12]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
	LL_TIM_Init(TIM14, &TIM_InitStruct);
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_TIM14_Init+0x68>)
 80012e4:	f003 fd8e 	bl	8004e04 <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM14);
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <MX_TIM14_Init+0x68>)
 80012ea:	f7ff fc9b 	bl	8000c24 <LL_TIM_DisableARRPreload>
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40002000 	.word	0x40002000

080012fc <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0b2      	sub	sp, #200	; 0xc8
 8001300:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART3_Init 0 */

	/* USER CODE END USART3_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = { 0 };
 8001302:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001316:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
 8001326:	615a      	str	r2, [r3, #20]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2290      	movs	r2, #144	; 0x90
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f009 fae6 	bl	800a900 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001338:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800133a:	2300      	movs	r3, #0
 800133c:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4618      	mov	r0, r3
 8001342:	f002 fc19 	bl	8003b78 <HAL_RCCEx_PeriphCLKConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_USART3_UART_Init+0x54>
		Error_Handler();
 800134c:	f000 fc0c 	bl	8001b68 <Error_Handler>
	}

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001350:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001354:	f7ff fd40 	bl	8000dd8 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001358:	2008      	movs	r0, #8
 800135a:	f7ff fd0d 	bl	8000d78 <LL_AHB1_GRP1_EnableClock>
	/**USART3 GPIO Configuration
	 PD8   ------> USART3_TX
	 PD9   ------> USART3_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800135e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800137e:	2307      	movs	r3, #7
 8001380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001384:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001388:	4619      	mov	r1, r3
 800138a:	4821      	ldr	r0, [pc, #132]	; (8001410 <MX_USART3_UART_Init+0x114>)
 800138c:	f003 f921 	bl	80045d2 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001394:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80013b0:	2307      	movs	r3, #7
 80013b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013ba:	4619      	mov	r1, r3
 80013bc:	4814      	ldr	r0, [pc, #80]	; (8001410 <MX_USART3_UART_Init+0x114>)
 80013be:	f003 f908 	bl	80045d2 <LL_GPIO_Init>

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	USART_InitStruct.BaudRate = 115200;
 80013c2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80013c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80013dc:	230c      	movs	r3, #12
 80013de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	LL_USART_Init(USART3, &USART_InitStruct);
 80013ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013f2:	4619      	mov	r1, r3
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_USART3_UART_Init+0x118>)
 80013f6:	f003 fe0f 	bl	8005018 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART3);
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <MX_USART3_UART_Init+0x118>)
 80013fc:	f7ff fc76 	bl	8000cec <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART3);
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_USART3_UART_Init+0x118>)
 8001402:	f7ff fc63 	bl	8000ccc <LL_USART_Enable>
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	37c8      	adds	r7, #200	; 0xc8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40004800 	.word	0x40004800

08001418 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800141e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001422:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001426:	2206      	movs	r2, #6
 8001428:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142c:	2202      	movs	r2, #2
 800142e:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001438:	2202      	movs	r2, #2
 800143a:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143e:	2201      	movs	r2, #1
 8001440:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001450:	2201      	movs	r2, #1
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145c:	f001 fd43 	bl	8002ee6 <HAL_PCD_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8001466:	f000 fb7f 	bl	8001b68 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000980 	.word	0x20000980

08001474 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	; 0x30
 8001478:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <MX_GPIO_Init+0x134>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a46      	ldr	r2, [pc, #280]	; (80015a8 <MX_GPIO_Init+0x134>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <MX_GPIO_Init+0x134>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <MX_GPIO_Init+0x134>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a40      	ldr	r2, [pc, #256]	; (80015a8 <MX_GPIO_Init+0x134>)
 80014a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <MX_GPIO_Init+0x134>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <MX_GPIO_Init+0x134>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a3a      	ldr	r2, [pc, #232]	; (80015a8 <MX_GPIO_Init+0x134>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <MX_GPIO_Init+0x134>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <MX_GPIO_Init+0x134>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a34      	ldr	r2, [pc, #208]	; (80015a8 <MX_GPIO_Init+0x134>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <MX_GPIO_Init+0x134>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <MX_GPIO_Init+0x134>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a2e      	ldr	r2, [pc, #184]	; (80015a8 <MX_GPIO_Init+0x134>)
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <MX_GPIO_Init+0x134>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <MX_GPIO_Init+0x134>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <MX_GPIO_Init+0x134>)
 8001508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <MX_GPIO_Init+0x134>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001520:	4822      	ldr	r0, [pc, #136]	; (80015ac <MX_GPIO_Init+0x138>)
 8001522:	f001 fcc7 	bl	8002eb4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8001526:	2200      	movs	r2, #0
 8001528:	2140      	movs	r1, #64	; 0x40
 800152a:	4821      	ldr	r0, [pc, #132]	; (80015b0 <MX_GPIO_Init+0x13c>)
 800152c:	f001 fcc2 	bl	8002eb4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001534:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001536:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800153a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	481b      	ldr	r0, [pc, #108]	; (80015b4 <MX_GPIO_Init+0x140>)
 8001548:	f001 fb08 	bl	8002b5c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 800154c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001550:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4619      	mov	r1, r3
 8001564:	4811      	ldr	r0, [pc, #68]	; (80015ac <MX_GPIO_Init+0x138>)
 8001566:	f001 faf9 	bl	8002b5c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800156a:	2340      	movs	r3, #64	; 0x40
 800156c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156e:	2301      	movs	r3, #1
 8001570:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	480b      	ldr	r0, [pc, #44]	; (80015b0 <MX_GPIO_Init+0x13c>)
 8001582:	f001 faeb 	bl	8002b5c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_GPIO_Init+0x13c>)
 800159a:	f001 fadf 	bl	8002b5c <HAL_GPIO_Init>

}
 800159e:	bf00      	nop
 80015a0:	3730      	adds	r7, #48	; 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40021800 	.word	0x40021800
 80015b4:	40020800 	.word	0x40020800

080015b8 <sendDebugMsg>:

/* USER CODE BEGIN 4 */
uint8_t sendDebugMsg(char *msg) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	uint8_t state = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73bb      	strb	r3, [r7, #14]
	LL_USART_ClearFlag_TC(USART3);
 80015c4:	4816      	ldr	r0, [pc, #88]	; (8001620 <sendDebugMsg+0x68>)
 80015c6:	f7ff fbba 	bl	8000d3e <LL_USART_ClearFlag_TC>
	uint8_t i = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	73fb      	strb	r3, [r7, #15]
	do {
//		while(!LL_USART_IsActiveFlag_TXE(USART_PC));
		LL_USART_TransmitData8(USART3, *(msg + i));
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4619      	mov	r1, r3
 80015d8:	4811      	ldr	r0, [pc, #68]	; (8001620 <sendDebugMsg+0x68>)
 80015da:	f7ff fbbd 	bl	8000d58 <LL_USART_TransmitData8>
		i++;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	3301      	adds	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
		while (!LL_USART_IsActiveFlag_TC(USART3))
 80015e4:	bf00      	nop
 80015e6:	480e      	ldr	r0, [pc, #56]	; (8001620 <sendDebugMsg+0x68>)
 80015e8:	f7ff fb96 	bl	8000d18 <LL_USART_IsActiveFlag_TC>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f9      	beq.n	80015e6 <sendDebugMsg+0x2e>
			;
		LL_USART_ClearFlag_TC(USART3);
 80015f2:	480b      	ldr	r0, [pc, #44]	; (8001620 <sendDebugMsg+0x68>)
 80015f4:	f7ff fba3 	bl	8000d3e <LL_USART_ClearFlag_TC>
	} while (*(msg + i) != '\0');
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1e4      	bne.n	80015ce <sendDebugMsg+0x16>
	state = 1;
 8001604:	2301      	movs	r3, #1
 8001606:	73bb      	strb	r3, [r7, #14]
	memset(msg, 0, i);
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	461a      	mov	r2, r3
 800160c:	2100      	movs	r1, #0
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f009 f976 	bl	800a900 <memset>
	return state;
 8001614:	7bbb      	ldrb	r3, [r7, #14]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40004800 	.word	0x40004800

08001624 <configCounter>:

void configCounter(TIM_TypeDef *TIMx) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	LL_TIM_EnableIT_UPDATE(TIMx);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fb3d 	bl	8000cac <LL_TIM_EnableIT_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIMx);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fb2c 	bl	8000c90 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_EnableCounter(TIMx);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fad3 	bl	8000be4 <LL_TIM_EnableCounter>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <getTimeus>:

float getTimeus(TIM_TypeDef *TIMx, int overflow) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
	uint32_t counter = _getCounter(TIMx);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fb04 	bl	8000c60 <LL_TIM_GetCounter>
 8001658:	6178      	str	r0, [r7, #20]
	float dt = 1e6 / f_apb1clk;
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <getTimeus+0x78>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001666:	ed9f 5b14 	vldr	d5, [pc, #80]	; 80016b8 <getTimeus+0x70>
 800166a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800166e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001672:	edc7 7a04 	vstr	s15, [r7, #16]
	float overflowCounter = overflow * (LL_TIM_GetAutoReload(TIMx) + 1);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fafe 	bl	8000c78 <LL_TIM_GetAutoReload>
 800167c:	4603      	mov	r3, r0
 800167e:	3301      	adds	r3, #1
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800168e:	edc7 7a03 	vstr	s15, [r7, #12]
	return (counter + overflowCounter) * dt;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	ee07 3a90 	vmov	s15, r3
 8001698:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800169c:	edd7 7a03 	vldr	s15, [r7, #12]
 80016a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80016ac:	eeb0 0a67 	vmov.f32	s0, s15
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	00000000 	.word	0x00000000
 80016bc:	412e8480 	.word	0x412e8480
 80016c0:	20000000 	.word	0x20000000

080016c4 <resetCounter>:

void resetCounter(TIM_TypeDef *TIMx, int *overflow) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
	LL_TIM_SetCounter(TIMx, 0x0);
 80016ce:	2100      	movs	r1, #0
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fab7 	bl	8000c44 <LL_TIM_SetCounter>
	*overflow = 0;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <randomInput>:
	}

	return T_tot / cycles;
}

void randomInput(float *inBuffer, int count) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < count; i++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e012      	b.n	800171a <randomInput+0x36>
		inBuffer[i] = (float) rand() / RAND_MAX;
 80016f4:	f00a f8c2 	bl	800b87c <rand>
 80016f8:	ee07 0a90 	vmov	s15, r0
 80016fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	eddf 6a08 	vldr	s13, [pc, #32]	; 800172c <randomInput+0x48>
 800170c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001710:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < count; i++) {
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3301      	adds	r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	dbe8      	blt.n	80016f4 <randomInput+0x10>
//		inBuffer[i] = 100*i; // For test usage
	}
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	4f000000 	.word	0x4f000000

08001730 <modelRun>:
			output[i] += matrix[i * column + j] * input[j];
		}
	}
}

float modelRun(float *input, int length, float *prediction) {
 8001730:	b580      	push	{r7, lr}
 8001732:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
 8001736:	af02      	add	r7, sp, #8
 8001738:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800173c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001740:	6018      	str	r0, [r3, #0]
 8001742:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001746:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800174a:	6019      	str	r1, [r3, #0]
 800174c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001750:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001754:	601a      	str	r2, [r3, #0]
	ai_u8 activations[AI_LSTM_DATA_ACTIVATIONS_SIZE];
	ai_i8 in_data[AI_LSTM_IN_1_SIZE_BYTES];
	ai_i8 out_data[AI_LSTM_OUT_1_SIZE_BYTES];

	ai_handle network = AI_HANDLE_NULL;
 8001756:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800175a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
	ai_buffer *ai_input;
	ai_buffer *ai_output;
	ai_error err;
	ai_network_report report;
	float time = 0.f;
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0

	const ai_handle acts[] = { activations };
 800176a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800176e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001772:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8001776:	601a      	str	r2, [r3, #0]
	err = ai_lstm_create_and_init(&network, acts, NULL);
 8001778:	f107 0114 	add.w	r1, r7, #20
 800177c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001780:	2200      	movs	r2, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f004 f93e 	bl	8005a04 <ai_lstm_create_and_init>
 8001788:	4602      	mov	r2, r0
 800178a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800178e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8001792:	601a      	str	r2, [r3, #0]
	if (err.type != AI_ERROR_NONE) {
 8001794:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001798:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <modelRun+0x84>
		sprintf(buf, "\r\n\r\nai init_and_create error\n\r\n");
 80017a2:	4993      	ldr	r1, [pc, #588]	; (80019f0 <modelRun+0x2c0>)
 80017a4:	4893      	ldr	r0, [pc, #588]	; (80019f4 <modelRun+0x2c4>)
 80017a6:	f00a f8bd 	bl	800b924 <siprintf>
		sendDebugMsg(buf);
 80017aa:	4892      	ldr	r0, [pc, #584]	; (80019f4 <modelRun+0x2c4>)
 80017ac:	f7ff ff04 	bl	80015b8 <sendDebugMsg>
		return -1;
 80017b0:	4b91      	ldr	r3, [pc, #580]	; (80019f8 <modelRun+0x2c8>)
 80017b2:	e114      	b.n	80019de <modelRun+0x2ae>
	} else {
		sprintf(buf, "\r\n\r\nai init_and_create finished\n\r\n");
 80017b4:	4991      	ldr	r1, [pc, #580]	; (80019fc <modelRun+0x2cc>)
 80017b6:	488f      	ldr	r0, [pc, #572]	; (80019f4 <modelRun+0x2c4>)
 80017b8:	f00a f8b4 	bl	800b924 <siprintf>
		sendDebugMsg(buf);
 80017bc:	488d      	ldr	r0, [pc, #564]	; (80019f4 <modelRun+0x2c4>)
 80017be:	f7ff fefb 	bl	80015b8 <sendDebugMsg>
	}
	if (ai_lstm_get_report(network, &report) != true) {
 80017c2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80017c6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f107 0218 	add.w	r2, r7, #24
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 f88e 	bl	80058f4 <ai_lstm_get_report>
 80017d8:	4603      	mov	r3, r0
 80017da:	f083 0301 	eor.w	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <modelRun+0xc6>
		sprintf(buf, "ai get report error\n");
 80017e4:	4986      	ldr	r1, [pc, #536]	; (8001a00 <modelRun+0x2d0>)
 80017e6:	4883      	ldr	r0, [pc, #524]	; (80019f4 <modelRun+0x2c4>)
 80017e8:	f00a f89c 	bl	800b924 <siprintf>
		sendDebugMsg(buf);
 80017ec:	4881      	ldr	r0, [pc, #516]	; (80019f4 <modelRun+0x2c4>)
 80017ee:	f7ff fee3 	bl	80015b8 <sendDebugMsg>
		return -1;
 80017f2:	4b81      	ldr	r3, [pc, #516]	; (80019f8 <modelRun+0x2c8>)
 80017f4:	e0f3      	b.n	80019de <modelRun+0x2ae>
	} else {
		sprintf(buf, "get report finished\r\n");
 80017f6:	4983      	ldr	r1, [pc, #524]	; (8001a04 <modelRun+0x2d4>)
 80017f8:	487e      	ldr	r0, [pc, #504]	; (80019f4 <modelRun+0x2c4>)
 80017fa:	f00a f893 	bl	800b924 <siprintf>
		sendDebugMsg(buf);
 80017fe:	487d      	ldr	r0, [pc, #500]	; (80019f4 <modelRun+0x2c4>)
 8001800:	f7ff feda 	bl	80015b8 <sendDebugMsg>
	}

	sprintf(buf, "Model name: %s\r\n", report.model_name);
 8001804:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001808:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	497d      	ldr	r1, [pc, #500]	; (8001a08 <modelRun+0x2d8>)
 8001812:	4878      	ldr	r0, [pc, #480]	; (80019f4 <modelRun+0x2c4>)
 8001814:	f00a f886 	bl	800b924 <siprintf>
	sendDebugMsg(buf);
 8001818:	4876      	ldr	r0, [pc, #472]	; (80019f4 <modelRun+0x2c4>)
 800181a:	f7ff fecd 	bl	80015b8 <sendDebugMsg>
	sprintf(buf, "Model signature: %s\r\n", report.model_signature);
 800181e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001822:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	461a      	mov	r2, r3
 800182a:	4978      	ldr	r1, [pc, #480]	; (8001a0c <modelRun+0x2dc>)
 800182c:	4871      	ldr	r0, [pc, #452]	; (80019f4 <modelRun+0x2c4>)
 800182e:	f00a f879 	bl	800b924 <siprintf>
	sendDebugMsg(buf);
 8001832:	4870      	ldr	r0, [pc, #448]	; (80019f4 <modelRun+0x2c4>)
 8001834:	f7ff fec0 	bl	80015b8 <sendDebugMsg>
	ai_input = &report.inputs[0];
 8001838:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800183c:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001842:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
	ai_output = &report.outputs[0];
 8001846:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800184a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800184e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001850:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
	sprintf(buf, "input[0] : (%d, %d, %d)\r\n",
			AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_HEIGHT),
 8001854:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	330c      	adds	r3, #12
	sprintf(buf, "input[0] : (%d, %d, %d)\r\n",
 800185c:	681a      	ldr	r2, [r3, #0]
			AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_WIDTH),
 800185e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	3308      	adds	r3, #8
	sprintf(buf, "input[0] : (%d, %d, %d)\r\n",
 8001866:	6819      	ldr	r1, [r3, #0]
			AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_CHANNEL));
 8001868:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	3304      	adds	r3, #4
	sprintf(buf, "input[0] : (%d, %d, %d)\r\n",
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	460b      	mov	r3, r1
 8001876:	4966      	ldr	r1, [pc, #408]	; (8001a10 <modelRun+0x2e0>)
 8001878:	485e      	ldr	r0, [pc, #376]	; (80019f4 <modelRun+0x2c4>)
 800187a:	f00a f853 	bl	800b924 <siprintf>
	sendDebugMsg(buf);
 800187e:	485d      	ldr	r0, [pc, #372]	; (80019f4 <modelRun+0x2c4>)
 8001880:	f7ff fe9a 	bl	80015b8 <sendDebugMsg>
	sprintf(buf, "output[0] : (%d, %d, %d)\r\n",
			AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_HEIGHT),
 8001884:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	330c      	adds	r3, #12
	sprintf(buf, "output[0] : (%d, %d, %d)\r\n",
 800188c:	681a      	ldr	r2, [r3, #0]
			AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_WIDTH),
 800188e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	3308      	adds	r3, #8
	sprintf(buf, "output[0] : (%d, %d, %d)\r\n",
 8001896:	6819      	ldr	r1, [r3, #0]
			AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_CHANNEL));
 8001898:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	3304      	adds	r3, #4
	sprintf(buf, "output[0] : (%d, %d, %d)\r\n",
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	460b      	mov	r3, r1
 80018a6:	495b      	ldr	r1, [pc, #364]	; (8001a14 <modelRun+0x2e4>)
 80018a8:	4852      	ldr	r0, [pc, #328]	; (80019f4 <modelRun+0x2c4>)
 80018aa:	f00a f83b 	bl	800b924 <siprintf>
	sendDebugMsg(buf);
 80018ae:	4851      	ldr	r0, [pc, #324]	; (80019f4 <modelRun+0x2c4>)
 80018b0:	f7ff fe82 	bl	80015b8 <sendDebugMsg>

	for (int i = 0; i < length; i++) {
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 80018ba:	e015      	b.n	80018e8 <modelRun+0x1b8>
		((ai_float*) in_data)[i] = (ai_float) input[i];
 80018bc:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80018c6:	f5a2 7233 	sub.w	r2, r2, #716	; 0x2cc
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	441a      	add	r2, r3
 80018ce:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80018d8:	440b      	add	r3, r1
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 80018de:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80018e2:	3301      	adds	r3, #1
 80018e4:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 80018e8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80018ec:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80018f0:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbe0      	blt.n	80018bc <modelRun+0x18c>
	}

//	((ai_float*) in_data)[1] = (ai_float) input[1];

	ai_i32 n_batch;
	ai_input = ai_lstm_inputs_get(network, NULL);
 80018fa:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80018fe:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f004 f8f0 	bl	8005aec <ai_lstm_inputs_get>
 800190c:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	ai_output = ai_lstm_outputs_get(network, NULL);
 8001910:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001914:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f004 f8ff 	bl	8005b20 <ai_lstm_outputs_get>
 8001922:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8
	/** @brief Set input/output buffer addresses */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001926:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800192a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800192e:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001930:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001934:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001938:	605a      	str	r2, [r3, #4]

	_startCounter(TIM14);
 800193a:	4837      	ldr	r0, [pc, #220]	; (8001a18 <modelRun+0x2e8>)
 800193c:	f7ff fe72 	bl	8001624 <configCounter>
	n_batch = ai_lstm_run(network, &ai_input[0], &ai_output[0]);
 8001940:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001944:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 800194e:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8001952:	4618      	mov	r0, r3
 8001954:	f004 f93a 	bl	8005bcc <ai_lstm_run>
 8001958:	f8c7 02c4 	str.w	r0, [r7, #708]	; 0x2c4
	_stopCounter(TIM14);
 800195c:	482e      	ldr	r0, [pc, #184]	; (8001a18 <modelRun+0x2e8>)
 800195e:	f7ff f951 	bl	8000c04 <LL_TIM_DisableCounter>
	time = getTimeus(TIM14, overflow_1);
 8001962:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <modelRun+0x2ec>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4619      	mov	r1, r3
 8001968:	482b      	ldr	r0, [pc, #172]	; (8001a18 <modelRun+0x2e8>)
 800196a:	f7ff fe6d 	bl	8001648 <getTimeus>
 800196e:	ed87 0ab4 	vstr	s0, [r7, #720]	; 0x2d0
	resetCounter(TIM14, &overflow_1);
 8001972:	492a      	ldr	r1, [pc, #168]	; (8001a1c <modelRun+0x2ec>)
 8001974:	4828      	ldr	r0, [pc, #160]	; (8001a18 <modelRun+0x2e8>)
 8001976:	f7ff fea5 	bl	80016c4 <resetCounter>
	if (n_batch != 1) {
 800197a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 800197e:	2b01      	cmp	r3, #1
 8001980:	d020      	beq.n	80019c4 <modelRun+0x294>
		err = ai_lstm_get_error(network);
 8001982:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001986:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f004 f817 	bl	80059c0 <ai_lstm_get_error>
 8001992:	4602      	mov	r2, r0
 8001994:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001998:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800199c:	601a      	str	r2, [r3, #0]
		printf("ai run error %d, %d\n", err.type, err.code);
 800199e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80019a2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80019ae:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80019b8:	461a      	mov	r2, r3
 80019ba:	4819      	ldr	r0, [pc, #100]	; (8001a20 <modelRun+0x2f0>)
 80019bc:	f009 fed0 	bl	800b760 <iprintf>
		return -1;
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <modelRun+0x2c8>)
 80019c2:	e00c      	b.n	80019de <modelRun+0x2ae>
	}
	prediction = ai_output[0].data;
 80019c4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80019c8:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80019cc:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 80019d0:	6852      	ldr	r2, [r2, #4]
 80019d2:	601a      	str	r2, [r3, #0]

	/** @brief Post-process the output results/predictions */
	printf("Inference output..\n");
 80019d4:	4813      	ldr	r0, [pc, #76]	; (8001a24 <modelRun+0x2f4>)
 80019d6:	f009 ff49 	bl	800b86c <puts>

//	sprintf(buf, "Avg Execution time: %f\r\n", T / 10);
//	sendDebugMsg(buf);
	return time;
 80019da:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
}
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eeb0 0a67 	vmov.f32	s0, s15
 80019e6:	f507 7736 	add.w	r7, r7, #728	; 0x2d8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	0800f320 	.word	0x0800f320
 80019f4:	20000e94 	.word	0x20000e94
 80019f8:	bf800000 	.word	0xbf800000
 80019fc:	0800f340 	.word	0x0800f340
 8001a00:	0800f364 	.word	0x0800f364
 8001a04:	0800f37c 	.word	0x0800f37c
 8001a08:	0800f394 	.word	0x0800f394
 8001a0c:	0800f3a8 	.word	0x0800f3a8
 8001a10:	0800f3c0 	.word	0x0800f3c0
 8001a14:	0800f3dc 	.word	0x0800f3dc
 8001a18:	40002000 	.word	0x40002000
 8001a1c:	20000e88 	.word	0x20000e88
 8001a20:	0800f3f8 	.word	0x0800f3f8
 8001a24:	0800f410 	.word	0x0800f410

08001a28 <normalizationPred>:

void normalizationPred(float *pred, struct Out_param outparam) {
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	eeb0 7a40 	vmov.f32	s14, s0
 8001a34:	eef0 7a60 	vmov.f32	s15, s1
 8001a38:	ed87 7a01 	vstr	s14, [r7, #4]
 8001a3c:	edc7 7a02 	vstr	s15, [r7, #8]
	*pred = (*pred - outparam.mean) / outparam.var;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	ed93 7a00 	vldr	s14, [r3]
 8001a46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a4a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	edc3 7a00 	vstr	s15, [r3]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <calcCP>:

float calcCP(float *pred, struct Out_param outparam, float w) {
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	eeb0 7a40 	vmov.f32	s14, s0
 8001a74:	eef0 7a60 	vmov.f32	s15, s1
 8001a78:	ed87 1a00 	vstr	s2, [r7]
 8001a7c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001a80:	edc7 7a02 	vstr	s15, [r7, #8]
	cp = Max(0, cp + *pred - w);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	ed93 7a00 	vldr	s14, [r3]
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <calcCP+0x78>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a94:	edd7 7a00 	vldr	s15, [r7]
 8001a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa4:	d502      	bpl.n	8001aac <calcCP+0x44>
 8001aa6:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001ae4 <calcCP+0x7c>
 8001aaa:	e00b      	b.n	8001ac4 <calcCP+0x5c>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <calcCP+0x78>)
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001abc:	edd7 7a00 	vldr	s15, [r7]
 8001ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <calcCP+0x78>)
 8001ac6:	edc3 7a00 	vstr	s15, [r3]
	return (cp);
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <calcCP+0x78>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	ee07 3a90 	vmov	s15, r3
}
 8001ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	20000ed0 	.word	0x20000ed0
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <calcCM>:

float calcCM(float *pred, struct Out_param outparam, float w) {
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	eeb0 7a40 	vmov.f32	s14, s0
 8001af4:	eef0 7a60 	vmov.f32	s15, s1
 8001af8:	ed87 1a00 	vstr	s2, [r7]
 8001afc:	ed87 7a01 	vstr	s14, [r7, #4]
 8001b00:	edc7 7a02 	vstr	s15, [r7, #8]
	cm = Max(0, cm - *pred - w);
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <calcCM+0x78>)
 8001b06:	ed93 7a00 	vldr	s14, [r3]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	edd3 7a00 	vldr	s15, [r3]
 8001b10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b14:	edd7 7a00 	vldr	s15, [r7]
 8001b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	d502      	bpl.n	8001b2c <calcCM+0x44>
 8001b26:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001b64 <calcCM+0x7c>
 8001b2a:	e00b      	b.n	8001b44 <calcCM+0x5c>
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <calcCM+0x78>)
 8001b2e:	ed93 7a00 	vldr	s14, [r3]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b3c:	edd7 7a00 	vldr	s15, [r7]
 8001b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <calcCM+0x78>)
 8001b46:	edc3 7a00 	vstr	s15, [r3]
	return (cm);
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <calcCM+0x78>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	ee07 3a90 	vmov	s15, r3
}
 8001b52:	eeb0 0a67 	vmov.f32	s0, s15
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	20000ed4 	.word	0x20000ed4
 8001b64:	00000000 	.word	0x00000000

08001b68 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b70:	e7fe      	b.n	8001b70 <Error_Handler+0x8>
	...

08001b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_MspInit+0x44>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800

08001bbc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <HAL_CRC_MspInit+0x38>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d10b      	bne.n	8001be6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_CRC_MspInit+0x3c>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a09      	ldr	r2, [pc, #36]	; (8001bf8 <HAL_CRC_MspInit+0x3c>)
 8001bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <HAL_CRC_MspInit+0x3c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023000 	.word	0x40023000
 8001bf8:	40023800 	.word	0x40023800

08001bfc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08e      	sub	sp, #56	; 0x38
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a4e      	ldr	r2, [pc, #312]	; (8001d54 <HAL_ETH_MspInit+0x158>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	f040 8096 	bne.w	8001d4c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001c20:	4b4d      	ldr	r3, [pc, #308]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	4a4c      	ldr	r2, [pc, #304]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2c:	4b4a      	ldr	r3, [pc, #296]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	623b      	str	r3, [r7, #32]
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	4a46      	ldr	r2, [pc, #280]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c42:	6313      	str	r3, [r2, #48]	; 0x30
 8001c44:	4b44      	ldr	r3, [pc, #272]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	4a40      	ldr	r2, [pc, #256]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5c:	4b3e      	ldr	r3, [pc, #248]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c68:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4a3a      	ldr	r2, [pc, #232]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6313      	str	r3, [r2, #48]	; 0x30
 8001c74:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	4a34      	ldr	r2, [pc, #208]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8c:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c98:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	4a2e      	ldr	r2, [pc, #184]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001c9e:	f043 0302 	orr.w	r3, r3, #2
 8001ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca4:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cb0:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	4a28      	ldr	r2, [pc, #160]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cba:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <HAL_ETH_MspInit+0x15c>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001cc8:	2332      	movs	r3, #50	; 0x32
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cd8:	230b      	movs	r3, #11
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	481e      	ldr	r0, [pc, #120]	; (8001d5c <HAL_ETH_MspInit+0x160>)
 8001ce4:	f000 ff3a 	bl	8002b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ce8:	2386      	movs	r3, #134	; 0x86
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cf8:	230b      	movs	r3, #11
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d00:	4619      	mov	r1, r3
 8001d02:	4817      	ldr	r0, [pc, #92]	; (8001d60 <HAL_ETH_MspInit+0x164>)
 8001d04:	f000 ff2a 	bl	8002b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d1a:	230b      	movs	r3, #11
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d22:	4619      	mov	r1, r3
 8001d24:	480f      	ldr	r0, [pc, #60]	; (8001d64 <HAL_ETH_MspInit+0x168>)
 8001d26:	f000 ff19 	bl	8002b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001d2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d3c:	230b      	movs	r3, #11
 8001d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d44:	4619      	mov	r1, r3
 8001d46:	4808      	ldr	r0, [pc, #32]	; (8001d68 <HAL_ETH_MspInit+0x16c>)
 8001d48:	f000 ff08 	bl	8002b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001d4c:	bf00      	nop
 8001d4e:	3738      	adds	r7, #56	; 0x38
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40028000 	.word	0x40028000
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40021800 	.word	0x40021800

08001d6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b0ae      	sub	sp, #184	; 0xb8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2290      	movs	r2, #144	; 0x90
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f008 fdb7 	bl	800a900 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d9a:	d159      	bne.n	8001e50 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001da0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4618      	mov	r0, r3
 8001dae:	f001 fee3 	bl	8003b78 <HAL_RCCEx_PeriphCLKConfig>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001db8:	f7ff fed6 	bl	8001b68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbc:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <HAL_PCD_MspInit+0xec>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	4a25      	ldr	r2, [pc, #148]	; (8001e58 <HAL_PCD_MspInit+0xec>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_PCD_MspInit+0xec>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001dd4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001dee:	230a      	movs	r3, #10
 8001df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4818      	ldr	r0, [pc, #96]	; (8001e5c <HAL_PCD_MspInit+0xf0>)
 8001dfc:	f000 feae 	bl	8002b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4810      	ldr	r0, [pc, #64]	; (8001e5c <HAL_PCD_MspInit+0xf0>)
 8001e1c:	f000 fe9e 	bl	8002b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_PCD_MspInit+0xec>)
 8001e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e24:	4a0c      	ldr	r2, [pc, #48]	; (8001e58 <HAL_PCD_MspInit+0xec>)
 8001e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2a:	6353      	str	r3, [r2, #52]	; 0x34
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_PCD_MspInit+0xec>)
 8001e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <HAL_PCD_MspInit+0xec>)
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	4a06      	ldr	r2, [pc, #24]	; (8001e58 <HAL_PCD_MspInit+0xec>)
 8001e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e42:	6453      	str	r3, [r2, #68]	; 0x44
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <HAL_PCD_MspInit+0xec>)
 8001e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	37b8      	adds	r7, #184	; 0xb8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020000 	.word	0x40020000

08001e60 <LL_TIM_IsEnabledCounter>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <LL_TIM_IsEnabledCounter+0x18>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <LL_TIM_IsEnabledCounter+0x1a>
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_TIM_ClearFlag_UPDATE>:
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f06f 0201 	mvn.w	r2, #1
 8001e94:	611a      	str	r2, [r3, #16]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001ecc:	e7fe      	b.n	8001ecc <NMI_Handler+0x4>

08001ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <HardFault_Handler+0x4>

08001ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <MemManage_Handler+0x4>

08001eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <BusFault_Handler+0x4>

08001ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <UsageFault_Handler+0x4>

08001ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f14:	f000 f8e8 	bl	80020e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM13)) {
 8001f20:	480a      	ldr	r0, [pc, #40]	; (8001f4c <TIM8_UP_TIM13_IRQHandler+0x30>)
 8001f22:	f7ff ffbe 	bl	8001ea2 <LL_TIM_IsActiveFlag_UPDATE>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00d      	beq.n	8001f48 <TIM8_UP_TIM13_IRQHandler+0x2c>
		LL_TIM_ClearFlag_UPDATE(TIM13);
 8001f2c:	4807      	ldr	r0, [pc, #28]	; (8001f4c <TIM8_UP_TIM13_IRQHandler+0x30>)
 8001f2e:	f7ff ffaa 	bl	8001e86 <LL_TIM_ClearFlag_UPDATE>
		if (LL_TIM_IsEnabledCounter(TIM13)) {
 8001f32:	4806      	ldr	r0, [pc, #24]	; (8001f4c <TIM8_UP_TIM13_IRQHandler+0x30>)
 8001f34:	f7ff ff94 	bl	8001e60 <LL_TIM_IsEnabledCounter>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <TIM8_UP_TIM13_IRQHandler+0x2c>
			overflow_2++;
 8001f3e:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <TIM8_UP_TIM13_IRQHandler+0x34>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	4a02      	ldr	r2, [pc, #8]	; (8001f50 <TIM8_UP_TIM13_IRQHandler+0x34>)
 8001f46:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40001c00 	.word	0x40001c00
 8001f50:	20000e8c 	.word	0x20000e8c

08001f54 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM14)) {
 8001f58:	480a      	ldr	r0, [pc, #40]	; (8001f84 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 8001f5a:	f7ff ffa2 	bl	8001ea2 <LL_TIM_IsActiveFlag_UPDATE>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00d      	beq.n	8001f80 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>
		LL_TIM_ClearFlag_UPDATE(TIM14);
 8001f64:	4807      	ldr	r0, [pc, #28]	; (8001f84 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 8001f66:	f7ff ff8e 	bl	8001e86 <LL_TIM_ClearFlag_UPDATE>
		if (LL_TIM_IsEnabledCounter(TIM14)) {
 8001f6a:	4806      	ldr	r0, [pc, #24]	; (8001f84 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 8001f6c:	f7ff ff78 	bl	8001e60 <LL_TIM_IsEnabledCounter>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d004      	beq.n	8001f80 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>
			overflow_1++;
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <TIM8_TRG_COM_TIM14_IRQHandler+0x34>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	4a02      	ldr	r2, [pc, #8]	; (8001f88 <TIM8_TRG_COM_TIM14_IRQHandler+0x34>)
 8001f7e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40002000 	.word	0x40002000
 8001f88:	20000e88 	.word	0x20000e88

08001f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f94:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <_sbrk+0x5c>)
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <_sbrk+0x60>)
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <_sbrk+0x64>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <_sbrk+0x68>)
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d207      	bcs.n	8001fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fbc:	f008 fc60 	bl	800a880 <__errno>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	e009      	b.n	8001fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <_sbrk+0x64>)
 8001fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fde:	68fb      	ldr	r3, [r7, #12]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20080000 	.word	0x20080000
 8001fec:	00001000 	.word	0x00001000
 8001ff0:	20000ee0 	.word	0x20000ee0
 8001ff4:	20000f70 	.word	0x20000f70

08001ff8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <SystemInit+0x20>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	4a05      	ldr	r2, [pc, #20]	; (8002018 <SystemInit+0x20>)
 8002004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800201c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002022:	490e      	ldr	r1, [pc, #56]	; (800205c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002024:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002028:	e002      	b.n	8002030 <LoopCopyDataInit>

0800202a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800202c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202e:	3304      	adds	r3, #4

08002030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002034:	d3f9      	bcc.n	800202a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002036:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002038:	4c0b      	ldr	r4, [pc, #44]	; (8002068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800203c:	e001      	b.n	8002042 <LoopFillZerobss>

0800203e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002040:	3204      	adds	r2, #4

08002042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002044:	d3fb      	bcc.n	800203e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002046:	f7ff ffd7 	bl	8001ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204a:	f008 fc1f 	bl	800a88c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800204e:	f7fe fedb 	bl	8000e08 <main>
  bx  lr    
 8002052:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002054:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800205c:	20000718 	.word	0x20000718
  ldr r2, =_sidata
 8002060:	080104d0 	.word	0x080104d0
  ldr r2, =_sbss
 8002064:	20000858 	.word	0x20000858
  ldr r4, =_ebss
 8002068:	20000f6c 	.word	0x20000f6c

0800206c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC_IRQHandler>

0800206e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002072:	2003      	movs	r0, #3
 8002074:	f000 f92e 	bl	80022d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002078:	2000      	movs	r0, #0
 800207a:	f000 f805 	bl	8002088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800207e:	f7ff fd79 	bl	8001b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_InitTick+0x54>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_InitTick+0x58>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209e:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f93b 	bl	8002322 <HAL_SYSTICK_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00e      	b.n	80020d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d80a      	bhi.n	80020d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020bc:	2200      	movs	r2, #0
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f000 f911 	bl	80022ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c8:	4a06      	ldr	r2, [pc, #24]	; (80020e4 <HAL_InitTick+0x5c>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000000c 	.word	0x2000000c
 80020e0:	20000014 	.word	0x20000014
 80020e4:	20000010 	.word	0x20000010

080020e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x20>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_IncTick+0x24>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_IncTick+0x24>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000014 	.word	0x20000014
 800210c:	20000ee4 	.word	0x20000ee4

08002110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTick;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_GetTick+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000ee4 	.word	0x20000ee4

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff ffee 	bl	8002110 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800214e:	bf00      	nop
 8002150:	f7ff ffde 	bl	8002110 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000014 	.word	0x20000014

08002170 <__NVIC_SetPriorityGrouping>:
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <__NVIC_SetPriorityGrouping+0x40>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 800219a:	4313      	orrs	r3, r2
 800219c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219e:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <__NVIC_SetPriorityGrouping+0x40>)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	60d3      	str	r3, [r2, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00
 80021b4:	05fa0000 	.word	0x05fa0000

080021b8 <__NVIC_GetPriorityGrouping>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_SetPriority>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	; (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	; (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <NVIC_EncodePriority>:
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f1c3 0307 	rsb	r3, r3, #7
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf28      	it	cs
 8002246:	2304      	movcs	r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3304      	adds	r3, #4
 800224e:	2b06      	cmp	r3, #6
 8002250:	d902      	bls.n	8002258 <NVIC_EncodePriority+0x30>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3b03      	subs	r3, #3
 8002256:	e000      	b.n	800225a <NVIC_EncodePriority+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	f04f 32ff 	mov.w	r2, #4294967295
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43d9      	mvns	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	4313      	orrs	r3, r2
}
 8002282:	4618      	mov	r0, r3
 8002284:	3724      	adds	r7, #36	; 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a0:	d301      	bcc.n	80022a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00f      	b.n	80022c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <SysTick_Config+0x40>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ae:	210f      	movs	r1, #15
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f7ff ff8e 	bl	80021d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <SysTick_Config+0x40>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <SysTick_Config+0x40>)
 80022c0:	2207      	movs	r2, #7
 80022c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	e000e010 	.word	0xe000e010

080022d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff47 	bl	8002170 <__NVIC_SetPriorityGrouping>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022fc:	f7ff ff5c 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 8002300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	6978      	ldr	r0, [r7, #20]
 8002308:	f7ff ff8e 	bl	8002228 <NVIC_EncodePriority>
 800230c:	4602      	mov	r2, r0
 800230e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff5d 	bl	80021d4 <__NVIC_SetPriority>
}
 800231a:	bf00      	nop
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffb0 	bl	8002290 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e054      	b.n	80023f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7f5b      	ldrb	r3, [r3, #29]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d105      	bne.n	8002364 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff fc2c 	bl	8001bbc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	791b      	ldrb	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10c      	bne.n	800238c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a22      	ldr	r2, [pc, #136]	; (8002400 <HAL_CRC_Init+0xc4>)
 8002378:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0218 	bic.w	r2, r2, #24
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	e00c      	b.n	80023a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6899      	ldr	r1, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	461a      	mov	r2, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f834 	bl	8002404 <HAL_CRCEx_Polynomial_Set>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e028      	b.n	80023f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	795b      	ldrb	r3, [r3, #5]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f04f 32ff 	mov.w	r2, #4294967295
 80023b6:	611a      	str	r2, [r3, #16]
 80023b8:	e004      	b.n	80023c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6912      	ldr	r2, [r2, #16]
 80023c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	04c11db7 	.word	0x04c11db7

08002404 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002414:	231f      	movs	r3, #31
 8002416:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002418:	bf00      	nop
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	613a      	str	r2, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d009      	beq.n	8002438 <HAL_CRCEx_Polynomial_Set+0x34>
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b18      	cmp	r3, #24
 800243c:	d846      	bhi.n	80024cc <HAL_CRCEx_Polynomial_Set+0xc8>
 800243e:	a201      	add	r2, pc, #4	; (adr r2, 8002444 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002444:	080024d3 	.word	0x080024d3
 8002448:	080024cd 	.word	0x080024cd
 800244c:	080024cd 	.word	0x080024cd
 8002450:	080024cd 	.word	0x080024cd
 8002454:	080024cd 	.word	0x080024cd
 8002458:	080024cd 	.word	0x080024cd
 800245c:	080024cd 	.word	0x080024cd
 8002460:	080024cd 	.word	0x080024cd
 8002464:	080024c1 	.word	0x080024c1
 8002468:	080024cd 	.word	0x080024cd
 800246c:	080024cd 	.word	0x080024cd
 8002470:	080024cd 	.word	0x080024cd
 8002474:	080024cd 	.word	0x080024cd
 8002478:	080024cd 	.word	0x080024cd
 800247c:	080024cd 	.word	0x080024cd
 8002480:	080024cd 	.word	0x080024cd
 8002484:	080024b5 	.word	0x080024b5
 8002488:	080024cd 	.word	0x080024cd
 800248c:	080024cd 	.word	0x080024cd
 8002490:	080024cd 	.word	0x080024cd
 8002494:	080024cd 	.word	0x080024cd
 8002498:	080024cd 	.word	0x080024cd
 800249c:	080024cd 	.word	0x080024cd
 80024a0:	080024cd 	.word	0x080024cd
 80024a4:	080024a9 	.word	0x080024a9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d913      	bls.n	80024d6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80024b2:	e010      	b.n	80024d6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b07      	cmp	r3, #7
 80024b8:	d90f      	bls.n	80024da <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80024be:	e00c      	b.n	80024da <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2b0f      	cmp	r3, #15
 80024c4:	d90b      	bls.n	80024de <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80024ca:	e008      	b.n	80024de <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	75fb      	strb	r3, [r7, #23]
      break;
 80024d0:	e006      	b.n	80024e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024d2:	bf00      	nop
 80024d4:	e004      	b.n	80024e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024d6:	bf00      	nop
 80024d8:	e002      	b.n	80024e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024de:	bf00      	nop
  }
  if (status == HAL_OK)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10d      	bne.n	8002502 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f023 0118 	bic.w	r1, r3, #24
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	430a      	orrs	r2, r1
 8002500:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002502:	7dfb      	ldrb	r3, [r7, #23]
}
 8002504:	4618      	mov	r0, r3
 8002506:	371c      	adds	r7, #28
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e06a      	b.n	80025f8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002528:	2b00      	cmp	r3, #0
 800252a:	d106      	bne.n	800253a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2223      	movs	r2, #35	; 0x23
 8002530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fb61 	bl	8001bfc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_ETH_Init+0xf0>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	4a30      	ldr	r2, [pc, #192]	; (8002600 <HAL_ETH_Init+0xf0>)
 8002540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002544:	6453      	str	r3, [r2, #68]	; 0x44
 8002546:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <HAL_ETH_Init+0xf0>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002552:	4b2c      	ldr	r3, [pc, #176]	; (8002604 <HAL_ETH_Init+0xf4>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4a2b      	ldr	r2, [pc, #172]	; (8002604 <HAL_ETH_Init+0xf4>)
 8002558:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800255c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800255e:	4b29      	ldr	r3, [pc, #164]	; (8002604 <HAL_ETH_Init+0xf4>)
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4927      	ldr	r1, [pc, #156]	; (8002604 <HAL_ETH_Init+0xf4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800256c:	4b25      	ldr	r3, [pc, #148]	; (8002604 <HAL_ETH_Init+0xf4>)
 800256e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002586:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002588:	f7ff fdc2 	bl	8002110 <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800258e:	e011      	b.n	80025b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002590:	f7ff fdbe 	bl	8002110 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800259e:	d909      	bls.n	80025b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2204      	movs	r2, #4
 80025a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	22e0      	movs	r2, #224	; 0xe0
 80025ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e021      	b.n	80025f8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1e4      	bne.n	8002590 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f958 	bl	800287c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f9ff 	bl	80029d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fa55 	bl	8002a82 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	461a      	mov	r2, r3
 80025de:	2100      	movs	r1, #0
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f9bd 	bl	8002960 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2210      	movs	r2, #16
 80025f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800
 8002604:	40013800 	.word	0x40013800

08002608 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4b51      	ldr	r3, [pc, #324]	; (8002764 <ETH_SetMACConfig+0x15c>)
 800261e:	4013      	ands	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	7c1b      	ldrb	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <ETH_SetMACConfig+0x28>
 800262a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800262e:	e000      	b.n	8002632 <ETH_SetMACConfig+0x2a>
 8002630:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	7c5b      	ldrb	r3, [r3, #17]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d102      	bne.n	8002640 <ETH_SetMACConfig+0x38>
 800263a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800263e:	e000      	b.n	8002642 <ETH_SetMACConfig+0x3a>
 8002640:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002642:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002648:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	7fdb      	ldrb	r3, [r3, #31]
 800264e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002650:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002656:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	7f92      	ldrb	r2, [r2, #30]
 800265c:	2a00      	cmp	r2, #0
 800265e:	d102      	bne.n	8002666 <ETH_SetMACConfig+0x5e>
 8002660:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002664:	e000      	b.n	8002668 <ETH_SetMACConfig+0x60>
 8002666:	2200      	movs	r2, #0
                        macconf->Speed |
 8002668:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	7f1b      	ldrb	r3, [r3, #28]
 800266e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002670:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002676:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	791b      	ldrb	r3, [r3, #4]
 800267c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800267e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002686:	2a00      	cmp	r2, #0
 8002688:	d102      	bne.n	8002690 <ETH_SetMACConfig+0x88>
 800268a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268e:	e000      	b.n	8002692 <ETH_SetMACConfig+0x8a>
 8002690:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002692:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	7bdb      	ldrb	r3, [r3, #15]
 8002698:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800269a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026a8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026aa:	4313      	orrs	r3, r2
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c2:	2001      	movs	r0, #1
 80026c4:	f7ff fd30 	bl	8002128 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	f64f 7341 	movw	r3, #65345	; 0xff41
 80026de:	4013      	ands	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80026ee:	2a00      	cmp	r2, #0
 80026f0:	d101      	bne.n	80026f6 <ETH_SetMACConfig+0xee>
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	e000      	b.n	80026f8 <ETH_SetMACConfig+0xf0>
 80026f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026f8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002706:	2a01      	cmp	r2, #1
 8002708:	d101      	bne.n	800270e <ETH_SetMACConfig+0x106>
 800270a:	2208      	movs	r2, #8
 800270c:	e000      	b.n	8002710 <ETH_SetMACConfig+0x108>
 800270e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002710:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002718:	2a01      	cmp	r2, #1
 800271a:	d101      	bne.n	8002720 <ETH_SetMACConfig+0x118>
 800271c:	2204      	movs	r2, #4
 800271e:	e000      	b.n	8002722 <ETH_SetMACConfig+0x11a>
 8002720:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002722:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800272a:	2a01      	cmp	r2, #1
 800272c:	d101      	bne.n	8002732 <ETH_SetMACConfig+0x12a>
 800272e:	2202      	movs	r2, #2
 8002730:	e000      	b.n	8002734 <ETH_SetMACConfig+0x12c>
 8002732:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002734:	4313      	orrs	r3, r2
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800274c:	2001      	movs	r0, #1
 800274e:	f7ff fceb 	bl	8002128 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	619a      	str	r2, [r3, #24]
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	ff20810f 	.word	0xff20810f

08002768 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <ETH_SetDMAConfig+0x110>)
 8002782:	4013      	ands	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	7b1b      	ldrb	r3, [r3, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d102      	bne.n	8002794 <ETH_SetDMAConfig+0x2c>
 800278e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002792:	e000      	b.n	8002796 <ETH_SetDMAConfig+0x2e>
 8002794:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	7b5b      	ldrb	r3, [r3, #13]
 800279a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800279c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	7f52      	ldrb	r2, [r2, #29]
 80027a2:	2a00      	cmp	r2, #0
 80027a4:	d102      	bne.n	80027ac <ETH_SetDMAConfig+0x44>
 80027a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027aa:	e000      	b.n	80027ae <ETH_SetDMAConfig+0x46>
 80027ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	7b9b      	ldrb	r3, [r3, #14]
 80027b4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027b6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	7f1b      	ldrb	r3, [r3, #28]
 80027c2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80027c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	7f9b      	ldrb	r3, [r3, #30]
 80027ca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027cc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027da:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027dc:	4313      	orrs	r3, r2
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ec:	461a      	mov	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027fe:	2001      	movs	r0, #1
 8002800:	f7ff fc92 	bl	8002128 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800280c:	461a      	mov	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	791b      	ldrb	r3, [r3, #4]
 8002816:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800281c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002822:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002828:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002830:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002832:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800283a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002840:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800284a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800284e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800285c:	2001      	movs	r0, #1
 800285e:	f7ff fc63 	bl	8002128 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800286a:	461a      	mov	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	f8de3f23 	.word	0xf8de3f23

0800287c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b0a6      	sub	sp, #152	; 0x98
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002884:	2301      	movs	r3, #1
 8002886:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800288a:	2301      	movs	r3, #1
 800288c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002890:	2300      	movs	r3, #0
 8002892:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800289a:	2301      	movs	r3, #1
 800289c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028b8:	2300      	movs	r3, #0
 80028ba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028e2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028f4:	4619      	mov	r1, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fe86 	bl	8002608 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80028fc:	2301      	movs	r3, #1
 80028fe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002900:	2301      	movs	r3, #1
 8002902:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800290a:	2301      	movs	r3, #1
 800290c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800291e:	2300      	movs	r3, #0
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002928:	2301      	movs	r3, #1
 800292a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800292c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002930:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002936:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800293c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800293e:	2301      	movs	r3, #1
 8002940:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002944:	2300      	movs	r3, #0
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002948:	2300      	movs	r3, #0
 800294a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800294c:	f107 0308 	add.w	r3, r7, #8
 8002950:	4619      	mov	r1, r3
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ff08 	bl	8002768 <ETH_SetDMAConfig>
}
 8002958:	bf00      	nop
 800295a:	3798      	adds	r7, #152	; 0x98
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3305      	adds	r3, #5
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	3204      	adds	r2, #4
 8002978:	7812      	ldrb	r2, [r2, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <ETH_MACAddressConfig+0x68>)
 8002982:	4413      	add	r3, r2
 8002984:	461a      	mov	r2, r3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3303      	adds	r3, #3
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	061a      	lsls	r2, r3, #24
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3302      	adds	r3, #2
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3301      	adds	r3, #1
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	4313      	orrs	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	7812      	ldrb	r2, [r2, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <ETH_MACAddressConfig+0x6c>)
 80029b2:	4413      	add	r3, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	6013      	str	r3, [r2, #0]
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40028040 	.word	0x40028040
 80029cc:	40028044 	.word	0x40028044

080029d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e03e      	b.n	8002a5c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68d9      	ldr	r1, [r3, #12]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2200      	movs	r2, #0
 80029fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2200      	movs	r2, #0
 8002a06:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	3206      	adds	r2, #6
 8002a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d80c      	bhi.n	8002a40 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68d9      	ldr	r1, [r3, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	e004      	b.n	8002a4a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d9bd      	bls.n	80029de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a74:	611a      	str	r2, [r3, #16]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	e046      	b.n	8002b1e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6919      	ldr	r1, [r3, #16]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	440b      	add	r3, r1
 8002aa0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002acc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002ad4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	3212      	adds	r2, #18
 8002aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d80c      	bhi.n	8002b0e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6919      	ldr	r1, [r3, #16]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	461a      	mov	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	60da      	str	r2, [r3, #12]
 8002b0c:	e004      	b.n	8002b18 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d9b5      	bls.n	8002a90 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4e:	60da      	str	r2, [r3, #12]
}
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	; 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	e175      	b.n	8002e68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	f040 8164 	bne.w	8002e62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d005      	beq.n	8002bb2 <HAL_GPIO_Init+0x56>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d130      	bne.n	8002c14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be8:	2201      	movs	r2, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 0201 	and.w	r2, r3, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d017      	beq.n	8002c50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d123      	bne.n	8002ca4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	08da      	lsrs	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3208      	adds	r2, #8
 8002c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	220f      	movs	r2, #15
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	08da      	lsrs	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3208      	adds	r2, #8
 8002c9e:	69b9      	ldr	r1, [r7, #24]
 8002ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2203      	movs	r2, #3
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0203 	and.w	r2, r3, #3
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80be 	beq.w	8002e62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	4b66      	ldr	r3, [pc, #408]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	4a65      	ldr	r2, [pc, #404]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf2:	4b63      	ldr	r3, [pc, #396]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cfe:	4a61      	ldr	r2, [pc, #388]	; (8002e84 <HAL_GPIO_Init+0x328>)
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	3302      	adds	r3, #2
 8002d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	220f      	movs	r2, #15
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_GPIO_Init+0x32c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d037      	beq.n	8002d9a <HAL_GPIO_Init+0x23e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a57      	ldr	r2, [pc, #348]	; (8002e8c <HAL_GPIO_Init+0x330>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d031      	beq.n	8002d96 <HAL_GPIO_Init+0x23a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a56      	ldr	r2, [pc, #344]	; (8002e90 <HAL_GPIO_Init+0x334>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02b      	beq.n	8002d92 <HAL_GPIO_Init+0x236>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a55      	ldr	r2, [pc, #340]	; (8002e94 <HAL_GPIO_Init+0x338>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d025      	beq.n	8002d8e <HAL_GPIO_Init+0x232>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a54      	ldr	r2, [pc, #336]	; (8002e98 <HAL_GPIO_Init+0x33c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d01f      	beq.n	8002d8a <HAL_GPIO_Init+0x22e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a53      	ldr	r2, [pc, #332]	; (8002e9c <HAL_GPIO_Init+0x340>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d019      	beq.n	8002d86 <HAL_GPIO_Init+0x22a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a52      	ldr	r2, [pc, #328]	; (8002ea0 <HAL_GPIO_Init+0x344>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <HAL_GPIO_Init+0x226>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a51      	ldr	r2, [pc, #324]	; (8002ea4 <HAL_GPIO_Init+0x348>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00d      	beq.n	8002d7e <HAL_GPIO_Init+0x222>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a50      	ldr	r2, [pc, #320]	; (8002ea8 <HAL_GPIO_Init+0x34c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <HAL_GPIO_Init+0x21e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a4f      	ldr	r2, [pc, #316]	; (8002eac <HAL_GPIO_Init+0x350>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d101      	bne.n	8002d76 <HAL_GPIO_Init+0x21a>
 8002d72:	2309      	movs	r3, #9
 8002d74:	e012      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d76:	230a      	movs	r3, #10
 8002d78:	e010      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	e00e      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d7e:	2307      	movs	r3, #7
 8002d80:	e00c      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d82:	2306      	movs	r3, #6
 8002d84:	e00a      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d86:	2305      	movs	r3, #5
 8002d88:	e008      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	e006      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e004      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e002      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_GPIO_Init+0x240>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	f002 0203 	and.w	r2, r2, #3
 8002da2:	0092      	lsls	r2, r2, #2
 8002da4:	4093      	lsls	r3, r2
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002dac:	4935      	ldr	r1, [pc, #212]	; (8002e84 <HAL_GPIO_Init+0x328>)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	3302      	adds	r3, #2
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dba:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dde:	4a34      	ldr	r2, [pc, #208]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002de4:	4b32      	ldr	r3, [pc, #200]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e08:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e0e:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e32:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e5c:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <HAL_GPIO_Init+0x354>)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3301      	adds	r3, #1
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	f67f ae86 	bls.w	8002b7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3724      	adds	r7, #36	; 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40013800 	.word	0x40013800
 8002e88:	40020000 	.word	0x40020000
 8002e8c:	40020400 	.word	0x40020400
 8002e90:	40020800 	.word	0x40020800
 8002e94:	40020c00 	.word	0x40020c00
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40021400 	.word	0x40021400
 8002ea0:	40021800 	.word	0x40021800
 8002ea4:	40021c00 	.word	0x40021c00
 8002ea8:	40022000 	.word	0x40022000
 8002eac:	40022400 	.word	0x40022400
 8002eb0:	40013c00 	.word	0x40013c00

08002eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec4:	787b      	ldrb	r3, [r7, #1]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eca:	887a      	ldrh	r2, [r7, #2]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ed0:	e003      	b.n	8002eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ed2:	887b      	ldrh	r3, [r7, #2]
 8002ed4:	041a      	lsls	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	619a      	str	r2, [r3, #24]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee8:	b08f      	sub	sp, #60	; 0x3c
 8002eea:	af0a      	add	r7, sp, #40	; 0x28
 8002eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e116      	b.n	8003126 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe ff2a 	bl	8001d6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f002 f966 	bl	8005208 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	687e      	ldr	r6, [r7, #4]
 8002f44:	466d      	mov	r5, sp
 8002f46:	f106 0410 	add.w	r4, r6, #16
 8002f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f5a:	1d33      	adds	r3, r6, #4
 8002f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f5e:	6838      	ldr	r0, [r7, #0]
 8002f60:	f002 f8fa 	bl	8005158 <USB_CoreInit>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0d7      	b.n	8003126 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f002 f954 	bl	800522a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	e04a      	b.n	800301e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	333d      	adds	r3, #61	; 0x3d
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	333c      	adds	r3, #60	; 0x3c
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	b298      	uxth	r0, r3
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3344      	adds	r3, #68	; 0x44
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3340      	adds	r3, #64	; 0x40
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fdc:	7bfa      	ldrb	r2, [r7, #15]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3348      	adds	r3, #72	; 0x48
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	334c      	adds	r3, #76	; 0x4c
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	3354      	adds	r3, #84	; 0x54
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	3301      	adds	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
 800301e:	7bfa      	ldrb	r2, [r7, #15]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	429a      	cmp	r2, r3
 8003026:	d3af      	bcc.n	8002f88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
 800302c:	e044      	b.n	80030b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	3301      	adds	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d3b5      	bcc.n	800302e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	687e      	ldr	r6, [r7, #4]
 80030ca:	466d      	mov	r5, sp
 80030cc:	f106 0410 	add.w	r4, r6, #16
 80030d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80030e0:	1d33      	adds	r3, r6, #4
 80030e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e4:	6838      	ldr	r0, [r7, #0]
 80030e6:	f002 f8ed 	bl	80052c4 <USB_DevInit>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e014      	b.n	8003126 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	2b01      	cmp	r3, #1
 8003112:	d102      	bne.n	800311a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f80b 	bl	8003130 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f002 faab 	bl	800567a <USB_DevDisconnect>

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003130 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_PCDEx_ActivateLPM+0x44>)
 8003160:	4313      	orrs	r3, r2
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	10000003 	.word	0x10000003

08003178 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a04      	ldr	r2, [pc, #16]	; (8003194 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	6013      	str	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40007000 	.word	0x40007000

08003198 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b23      	ldr	r3, [pc, #140]	; (8003230 <HAL_PWREx_EnableOverDrive+0x98>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a22      	ldr	r2, [pc, #136]	; (8003230 <HAL_PWREx_EnableOverDrive+0x98>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <HAL_PWREx_EnableOverDrive+0x98>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031ba:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031c6:	f7fe ffa3 	bl	8002110 <HAL_GetTick>
 80031ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031cc:	e009      	b.n	80031e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031ce:	f7fe ff9f 	bl	8002110 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031dc:	d901      	bls.n	80031e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e022      	b.n	8003228 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d1ee      	bne.n	80031ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031f0:	4b10      	ldr	r3, [pc, #64]	; (8003234 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0f      	ldr	r2, [pc, #60]	; (8003234 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031fc:	f7fe ff88 	bl	8002110 <HAL_GetTick>
 8003200:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003202:	e009      	b.n	8003218 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003204:	f7fe ff84 	bl	8002110 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003212:	d901      	bls.n	8003218 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e007      	b.n	8003228 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003218:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_PWREx_EnableOverDrive+0x9c>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003224:	d1ee      	bne.n	8003204 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40023800 	.word	0x40023800
 8003234:	40007000 	.word	0x40007000

08003238 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003240:	2300      	movs	r3, #0
 8003242:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e29b      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 8087 	beq.w	800336a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800325c:	4b96      	ldr	r3, [pc, #600]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b04      	cmp	r3, #4
 8003266:	d00c      	beq.n	8003282 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003268:	4b93      	ldr	r3, [pc, #588]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b08      	cmp	r3, #8
 8003272:	d112      	bne.n	800329a <HAL_RCC_OscConfig+0x62>
 8003274:	4b90      	ldr	r3, [pc, #576]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003280:	d10b      	bne.n	800329a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003282:	4b8d      	ldr	r3, [pc, #564]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d06c      	beq.n	8003368 <HAL_RCC_OscConfig+0x130>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d168      	bne.n	8003368 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e275      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x7a>
 80032a4:	4b84      	ldr	r3, [pc, #528]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a83      	ldr	r2, [pc, #524]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80032aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	e02e      	b.n	8003310 <HAL_RCC_OscConfig+0xd8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x9c>
 80032ba:	4b7f      	ldr	r3, [pc, #508]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a7e      	ldr	r2, [pc, #504]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80032c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	4b7c      	ldr	r3, [pc, #496]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a7b      	ldr	r2, [pc, #492]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80032cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e01d      	b.n	8003310 <HAL_RCC_OscConfig+0xd8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0xc0>
 80032de:	4b76      	ldr	r3, [pc, #472]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a75      	ldr	r2, [pc, #468]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80032e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	4b73      	ldr	r3, [pc, #460]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a72      	ldr	r2, [pc, #456]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e00b      	b.n	8003310 <HAL_RCC_OscConfig+0xd8>
 80032f8:	4b6f      	ldr	r3, [pc, #444]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a6e      	ldr	r2, [pc, #440]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80032fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	4b6c      	ldr	r3, [pc, #432]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a6b      	ldr	r2, [pc, #428]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 800330a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d013      	beq.n	8003340 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe fefa 	bl	8002110 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003320:	f7fe fef6 	bl	8002110 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	; 0x64
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e229      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003332:	4b61      	ldr	r3, [pc, #388]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0xe8>
 800333e:	e014      	b.n	800336a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe fee6 	bl	8002110 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003348:	f7fe fee2 	bl	8002110 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e215      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335a:	4b57      	ldr	r3, [pc, #348]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x110>
 8003366:	e000      	b.n	800336a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d069      	beq.n	800344a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003376:	4b50      	ldr	r3, [pc, #320]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00b      	beq.n	800339a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003382:	4b4d      	ldr	r3, [pc, #308]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b08      	cmp	r3, #8
 800338c:	d11c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x190>
 800338e:	4b4a      	ldr	r3, [pc, #296]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d116      	bne.n	80033c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <HAL_RCC_OscConfig+0x17a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d001      	beq.n	80033b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e1e9      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b2:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	493d      	ldr	r1, [pc, #244]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c6:	e040      	b.n	800344a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d023      	beq.n	8003418 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d0:	4b39      	ldr	r3, [pc, #228]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a38      	ldr	r2, [pc, #224]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe fe98 	bl	8002110 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e4:	f7fe fe94 	bl	8002110 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e1c7      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f6:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003402:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4929      	ldr	r1, [pc, #164]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]
 8003416:	e018      	b.n	800344a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a26      	ldr	r2, [pc, #152]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 800341e:	f023 0301 	bic.w	r3, r3, #1
 8003422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe fe74 	bl	8002110 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342c:	f7fe fe70 	bl	8002110 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e1a3      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d038      	beq.n	80034c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d019      	beq.n	8003492 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345e:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003462:	4a15      	ldr	r2, [pc, #84]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346a:	f7fe fe51 	bl	8002110 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003472:	f7fe fe4d 	bl	8002110 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e180      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x23a>
 8003490:	e01a      	b.n	80034c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003496:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <HAL_RCC_OscConfig+0x280>)
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349e:	f7fe fe37 	bl	8002110 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a4:	e00a      	b.n	80034bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a6:	f7fe fe33 	bl	8002110 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d903      	bls.n	80034bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e166      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
 80034b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034bc:	4b92      	ldr	r3, [pc, #584]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 80034be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1ee      	bne.n	80034a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80a4 	beq.w	800361e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d6:	4b8c      	ldr	r3, [pc, #560]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10d      	bne.n	80034fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e2:	4b89      	ldr	r3, [pc, #548]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	4a88      	ldr	r2, [pc, #544]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 80034e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6413      	str	r3, [r2, #64]	; 0x40
 80034ee:	4b86      	ldr	r3, [pc, #536]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034fe:	4b83      	ldr	r3, [pc, #524]	; (800370c <HAL_RCC_OscConfig+0x4d4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d118      	bne.n	800353c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800350a:	4b80      	ldr	r3, [pc, #512]	; (800370c <HAL_RCC_OscConfig+0x4d4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a7f      	ldr	r2, [pc, #508]	; (800370c <HAL_RCC_OscConfig+0x4d4>)
 8003510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003516:	f7fe fdfb 	bl	8002110 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351e:	f7fe fdf7 	bl	8002110 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b64      	cmp	r3, #100	; 0x64
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e12a      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003530:	4b76      	ldr	r3, [pc, #472]	; (800370c <HAL_RCC_OscConfig+0x4d4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d106      	bne.n	8003552 <HAL_RCC_OscConfig+0x31a>
 8003544:	4b70      	ldr	r3, [pc, #448]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	4a6f      	ldr	r2, [pc, #444]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	6713      	str	r3, [r2, #112]	; 0x70
 8003550:	e02d      	b.n	80035ae <HAL_RCC_OscConfig+0x376>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0x33c>
 800355a:	4b6b      	ldr	r3, [pc, #428]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a6a      	ldr	r2, [pc, #424]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
 8003566:	4b68      	ldr	r3, [pc, #416]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	4a67      	ldr	r2, [pc, #412]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 800356c:	f023 0304 	bic.w	r3, r3, #4
 8003570:	6713      	str	r3, [r2, #112]	; 0x70
 8003572:	e01c      	b.n	80035ae <HAL_RCC_OscConfig+0x376>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b05      	cmp	r3, #5
 800357a:	d10c      	bne.n	8003596 <HAL_RCC_OscConfig+0x35e>
 800357c:	4b62      	ldr	r3, [pc, #392]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a61      	ldr	r2, [pc, #388]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 8003582:	f043 0304 	orr.w	r3, r3, #4
 8003586:	6713      	str	r3, [r2, #112]	; 0x70
 8003588:	4b5f      	ldr	r3, [pc, #380]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	4a5e      	ldr	r2, [pc, #376]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6713      	str	r3, [r2, #112]	; 0x70
 8003594:	e00b      	b.n	80035ae <HAL_RCC_OscConfig+0x376>
 8003596:	4b5c      	ldr	r3, [pc, #368]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	4a5b      	ldr	r2, [pc, #364]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	6713      	str	r3, [r2, #112]	; 0x70
 80035a2:	4b59      	ldr	r3, [pc, #356]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	4a58      	ldr	r2, [pc, #352]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	f023 0304 	bic.w	r3, r3, #4
 80035ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d015      	beq.n	80035e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b6:	f7fe fdab 	bl	8002110 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035bc:	e00a      	b.n	80035d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035be:	f7fe fda7 	bl	8002110 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e0d8      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d4:	4b4c      	ldr	r3, [pc, #304]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ee      	beq.n	80035be <HAL_RCC_OscConfig+0x386>
 80035e0:	e014      	b.n	800360c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e2:	f7fe fd95 	bl	8002110 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e8:	e00a      	b.n	8003600 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ea:	f7fe fd91 	bl	8002110 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e0c2      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003600:	4b41      	ldr	r3, [pc, #260]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1ee      	bne.n	80035ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d105      	bne.n	800361e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003612:	4b3d      	ldr	r3, [pc, #244]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	4a3c      	ldr	r2, [pc, #240]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 8003618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800361c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 80ae 	beq.w	8003784 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003628:	4b37      	ldr	r3, [pc, #220]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 030c 	and.w	r3, r3, #12
 8003630:	2b08      	cmp	r3, #8
 8003632:	d06d      	beq.n	8003710 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d14b      	bne.n	80036d4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363c:	4b32      	ldr	r3, [pc, #200]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a31      	ldr	r2, [pc, #196]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 8003642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe fd62 	bl	8002110 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003650:	f7fe fd5e 	bl	8002110 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e091      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	4b29      	ldr	r3, [pc, #164]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69da      	ldr	r2, [r3, #28]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	019b      	lsls	r3, r3, #6
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	085b      	lsrs	r3, r3, #1
 8003686:	3b01      	subs	r3, #1
 8003688:	041b      	lsls	r3, r3, #16
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	071b      	lsls	r3, r3, #28
 800369a:	491b      	ldr	r1, [pc, #108]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a18      	ldr	r2, [pc, #96]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 80036a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fe fd30 	bl	8002110 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b4:	f7fe fd2c 	bl	8002110 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e05f      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0x47c>
 80036d2:	e057      	b.n	8003784 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0b      	ldr	r2, [pc, #44]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 80036da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fe fd16 	bl	8002110 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e8:	f7fe fd12 	bl	8002110 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e045      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fa:	4b03      	ldr	r3, [pc, #12]	; (8003708 <HAL_RCC_OscConfig+0x4d0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x4b0>
 8003706:	e03d      	b.n	8003784 <HAL_RCC_OscConfig+0x54c>
 8003708:	40023800 	.word	0x40023800
 800370c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003710:	4b1f      	ldr	r3, [pc, #124]	; (8003790 <HAL_RCC_OscConfig+0x558>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d030      	beq.n	8003780 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d129      	bne.n	8003780 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	429a      	cmp	r2, r3
 8003738:	d122      	bne.n	8003780 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003740:	4013      	ands	r3, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003746:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003748:	4293      	cmp	r3, r2
 800374a:	d119      	bne.n	8003780 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	085b      	lsrs	r3, r3, #1
 8003758:	3b01      	subs	r3, #1
 800375a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800375c:	429a      	cmp	r2, r3
 800375e:	d10f      	bne.n	8003780 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d107      	bne.n	8003780 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800

08003794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0d0      	b.n	800394e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ac:	4b6a      	ldr	r3, [pc, #424]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d910      	bls.n	80037dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b67      	ldr	r3, [pc, #412]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 020f 	bic.w	r2, r3, #15
 80037c2:	4965      	ldr	r1, [pc, #404]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ca:	4b63      	ldr	r3, [pc, #396]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0b8      	b.n	800394e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d020      	beq.n	800382a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f4:	4b59      	ldr	r3, [pc, #356]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4a58      	ldr	r2, [pc, #352]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 80037fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800380c:	4b53      	ldr	r3, [pc, #332]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4a52      	ldr	r2, [pc, #328]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003812:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003816:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003818:	4b50      	ldr	r3, [pc, #320]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	494d      	ldr	r1, [pc, #308]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d040      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d107      	bne.n	800384e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	4b47      	ldr	r3, [pc, #284]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d115      	bne.n	8003876 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e07f      	b.n	800394e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d107      	bne.n	8003866 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003856:	4b41      	ldr	r3, [pc, #260]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e073      	b.n	800394e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003866:	4b3d      	ldr	r3, [pc, #244]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e06b      	b.n	800394e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003876:	4b39      	ldr	r3, [pc, #228]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 0203 	bic.w	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4936      	ldr	r1, [pc, #216]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003884:	4313      	orrs	r3, r2
 8003886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003888:	f7fe fc42 	bl	8002110 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003890:	f7fe fc3e 	bl	8002110 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e053      	b.n	800394e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	4b2d      	ldr	r3, [pc, #180]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 020c 	and.w	r2, r3, #12
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d1eb      	bne.n	8003890 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038b8:	4b27      	ldr	r3, [pc, #156]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d210      	bcs.n	80038e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b24      	ldr	r3, [pc, #144]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 020f 	bic.w	r2, r3, #15
 80038ce:	4922      	ldr	r1, [pc, #136]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	4b20      	ldr	r3, [pc, #128]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e032      	b.n	800394e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f4:	4b19      	ldr	r3, [pc, #100]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	4916      	ldr	r1, [pc, #88]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003912:	4b12      	ldr	r3, [pc, #72]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	490e      	ldr	r1, [pc, #56]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003926:	f000 f821 	bl	800396c <HAL_RCC_GetSysClockFreq>
 800392a:	4602      	mov	r2, r0
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	091b      	lsrs	r3, r3, #4
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	490a      	ldr	r1, [pc, #40]	; (8003960 <HAL_RCC_ClockConfig+0x1cc>)
 8003938:	5ccb      	ldrb	r3, [r1, r3]
 800393a:	fa22 f303 	lsr.w	r3, r2, r3
 800393e:	4a09      	ldr	r2, [pc, #36]	; (8003964 <HAL_RCC_ClockConfig+0x1d0>)
 8003940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003942:	4b09      	ldr	r3, [pc, #36]	; (8003968 <HAL_RCC_ClockConfig+0x1d4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe fb9e 	bl	8002088 <HAL_InitTick>

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40023c00 	.word	0x40023c00
 800395c:	40023800 	.word	0x40023800
 8003960:	0800f4c8 	.word	0x0800f4c8
 8003964:	2000000c 	.word	0x2000000c
 8003968:	20000010 	.word	0x20000010

0800396c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800396c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003970:	b094      	sub	sp, #80	; 0x50
 8003972:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	647b      	str	r3, [r7, #68]	; 0x44
 8003978:	2300      	movs	r3, #0
 800397a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800397c:	2300      	movs	r3, #0
 800397e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003984:	4b79      	ldr	r3, [pc, #484]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b08      	cmp	r3, #8
 800398e:	d00d      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0x40>
 8003990:	2b08      	cmp	r3, #8
 8003992:	f200 80e1 	bhi.w	8003b58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x34>
 800399a:	2b04      	cmp	r3, #4
 800399c:	d003      	beq.n	80039a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800399e:	e0db      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039a0:	4b73      	ldr	r3, [pc, #460]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x204>)
 80039a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039a4:	e0db      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039a6:	4b73      	ldr	r3, [pc, #460]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x208>)
 80039a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039aa:	e0d8      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039ac:	4b6f      	ldr	r3, [pc, #444]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039b4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039b6:	4b6d      	ldr	r3, [pc, #436]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d063      	beq.n	8003a8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c2:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	2200      	movs	r2, #0
 80039ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80039cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d4:	633b      	str	r3, [r7, #48]	; 0x30
 80039d6:	2300      	movs	r3, #0
 80039d8:	637b      	str	r3, [r7, #52]	; 0x34
 80039da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039de:	4622      	mov	r2, r4
 80039e0:	462b      	mov	r3, r5
 80039e2:	f04f 0000 	mov.w	r0, #0
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	0159      	lsls	r1, r3, #5
 80039ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039f0:	0150      	lsls	r0, r2, #5
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4621      	mov	r1, r4
 80039f8:	1a51      	subs	r1, r2, r1
 80039fa:	6139      	str	r1, [r7, #16]
 80039fc:	4629      	mov	r1, r5
 80039fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a10:	4659      	mov	r1, fp
 8003a12:	018b      	lsls	r3, r1, #6
 8003a14:	4651      	mov	r1, sl
 8003a16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a1a:	4651      	mov	r1, sl
 8003a1c:	018a      	lsls	r2, r1, #6
 8003a1e:	4651      	mov	r1, sl
 8003a20:	ebb2 0801 	subs.w	r8, r2, r1
 8003a24:	4659      	mov	r1, fp
 8003a26:	eb63 0901 	sbc.w	r9, r3, r1
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a3e:	4690      	mov	r8, r2
 8003a40:	4699      	mov	r9, r3
 8003a42:	4623      	mov	r3, r4
 8003a44:	eb18 0303 	adds.w	r3, r8, r3
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	462b      	mov	r3, r5
 8003a4c:	eb49 0303 	adc.w	r3, r9, r3
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a5e:	4629      	mov	r1, r5
 8003a60:	024b      	lsls	r3, r1, #9
 8003a62:	4621      	mov	r1, r4
 8003a64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a68:	4621      	mov	r1, r4
 8003a6a:	024a      	lsls	r2, r1, #9
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a72:	2200      	movs	r2, #0
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a7c:	f7fc fdf4 	bl	8000668 <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4613      	mov	r3, r2
 8003a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a88:	e058      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8a:	4b38      	ldr	r3, [pc, #224]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	2200      	movs	r2, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	4611      	mov	r1, r2
 8003a96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a9a:	623b      	str	r3, [r7, #32]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003aa4:	4642      	mov	r2, r8
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	f04f 0000 	mov.w	r0, #0
 8003aac:	f04f 0100 	mov.w	r1, #0
 8003ab0:	0159      	lsls	r1, r3, #5
 8003ab2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab6:	0150      	lsls	r0, r2, #5
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4641      	mov	r1, r8
 8003abe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ad4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ad8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003adc:	ebb2 040a 	subs.w	r4, r2, sl
 8003ae0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	00eb      	lsls	r3, r5, #3
 8003aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003af2:	00e2      	lsls	r2, r4, #3
 8003af4:	4614      	mov	r4, r2
 8003af6:	461d      	mov	r5, r3
 8003af8:	4643      	mov	r3, r8
 8003afa:	18e3      	adds	r3, r4, r3
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	464b      	mov	r3, r9
 8003b00:	eb45 0303 	adc.w	r3, r5, r3
 8003b04:	607b      	str	r3, [r7, #4]
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b12:	4629      	mov	r1, r5
 8003b14:	028b      	lsls	r3, r1, #10
 8003b16:	4621      	mov	r1, r4
 8003b18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	028a      	lsls	r2, r1, #10
 8003b20:	4610      	mov	r0, r2
 8003b22:	4619      	mov	r1, r3
 8003b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b26:	2200      	movs	r2, #0
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	61fa      	str	r2, [r7, #28]
 8003b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b30:	f7fc fd9a 	bl	8000668 <__aeabi_uldivmod>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4613      	mov	r3, r2
 8003b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	0c1b      	lsrs	r3, r3, #16
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	3301      	adds	r3, #1
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003b4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b56:	e002      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3750      	adds	r7, #80	; 0x50
 8003b64:	46bd      	mov	sp, r7
 8003b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	00f42400 	.word	0x00f42400
 8003b74:	007a1200 	.word	0x007a1200

08003b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b84:	2300      	movs	r3, #0
 8003b86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d012      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ba0:	4b69      	ldr	r3, [pc, #420]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a68      	ldr	r2, [pc, #416]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003baa:	6093      	str	r3, [r2, #8]
 8003bac:	4b66      	ldr	r3, [pc, #408]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb4:	4964      	ldr	r1, [pc, #400]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d017      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bd2:	4b5d      	ldr	r3, [pc, #372]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	4959      	ldr	r1, [pc, #356]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d017      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c0e:	4b4e      	ldr	r3, [pc, #312]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	494a      	ldr	r1, [pc, #296]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 808b 	beq.w	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c5c:	4b3a      	ldr	r3, [pc, #232]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	4a39      	ldr	r2, [pc, #228]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c66:	6413      	str	r3, [r2, #64]	; 0x40
 8003c68:	4b37      	ldr	r3, [pc, #220]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c74:	4b35      	ldr	r3, [pc, #212]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a34      	ldr	r2, [pc, #208]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c80:	f7fe fa46 	bl	8002110 <HAL_GetTick>
 8003c84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c88:	f7fe fa42 	bl	8002110 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	; 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e38f      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c9a:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ca6:	4b28      	ldr	r3, [pc, #160]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d035      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d02e      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cc4:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ccc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cce:	4b1e      	ldr	r3, [pc, #120]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cda:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	4a1a      	ldr	r2, [pc, #104]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ce6:	4a18      	ldr	r2, [pc, #96]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cec:	4b16      	ldr	r3, [pc, #88]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d114      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fa0a 	bl	8002110 <HAL_GetTick>
 8003cfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fe fa06 	bl	8002110 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e351      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d16:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0ee      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d2e:	d111      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d3e:	400b      	ands	r3, r1
 8003d40:	4901      	ldr	r1, [pc, #4]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	608b      	str	r3, [r1, #8]
 8003d46:	e00b      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	40007000 	.word	0x40007000
 8003d50:	0ffffcff 	.word	0x0ffffcff
 8003d54:	4bac      	ldr	r3, [pc, #688]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4aab      	ldr	r2, [pc, #684]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d5e:	6093      	str	r3, [r2, #8]
 8003d60:	4ba9      	ldr	r3, [pc, #676]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6c:	49a6      	ldr	r1, [pc, #664]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d010      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d7e:	4ba2      	ldr	r3, [pc, #648]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d84:	4aa0      	ldr	r2, [pc, #640]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d8e:	4b9e      	ldr	r3, [pc, #632]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	499b      	ldr	r1, [pc, #620]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dac:	4b96      	ldr	r3, [pc, #600]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dba:	4993      	ldr	r1, [pc, #588]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dce:	4b8e      	ldr	r3, [pc, #568]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ddc:	498a      	ldr	r1, [pc, #552]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003df0:	4b85      	ldr	r3, [pc, #532]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dfe:	4982      	ldr	r1, [pc, #520]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e12:	4b7d      	ldr	r3, [pc, #500]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	4979      	ldr	r1, [pc, #484]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e34:	4b74      	ldr	r3, [pc, #464]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	f023 0203 	bic.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	4971      	ldr	r1, [pc, #452]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e56:	4b6c      	ldr	r3, [pc, #432]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5c:	f023 020c 	bic.w	r2, r3, #12
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e64:	4968      	ldr	r1, [pc, #416]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e78:	4b63      	ldr	r3, [pc, #396]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e86:	4960      	ldr	r1, [pc, #384]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e9a:	4b5b      	ldr	r3, [pc, #364]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea8:	4957      	ldr	r1, [pc, #348]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ebc:	4b52      	ldr	r3, [pc, #328]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	494f      	ldr	r1, [pc, #316]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ede:	4b4a      	ldr	r3, [pc, #296]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eec:	4946      	ldr	r1, [pc, #280]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f00:	4b41      	ldr	r3, [pc, #260]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	493e      	ldr	r1, [pc, #248]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f22:	4b39      	ldr	r3, [pc, #228]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f30:	4935      	ldr	r1, [pc, #212]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f44:	4b30      	ldr	r3, [pc, #192]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f52:	492d      	ldr	r1, [pc, #180]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d011      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f66:	4b28      	ldr	r3, [pc, #160]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f74:	4924      	ldr	r1, [pc, #144]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f84:	d101      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f86:	2301      	movs	r3, #1
 8003f88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f96:	2301      	movs	r3, #1
 8003f98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fa6:	4b18      	ldr	r3, [pc, #96]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb4:	4914      	ldr	r1, [pc, #80]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00b      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fc8:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fd8:	490b      	ldr	r1, [pc, #44]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00f      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003fec:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffc:	4902      	ldr	r1, [pc, #8]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004004:	e002      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00b      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004018:	4b8a      	ldr	r3, [pc, #552]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800401a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800401e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	4986      	ldr	r1, [pc, #536]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00b      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800403c:	4b81      	ldr	r3, [pc, #516]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800403e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004042:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800404c:	497d      	ldr	r1, [pc, #500]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d006      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80d6 	beq.w	8004214 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004068:	4b76      	ldr	r3, [pc, #472]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a75      	ldr	r2, [pc, #468]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800406e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004074:	f7fe f84c 	bl	8002110 <HAL_GetTick>
 8004078:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800407c:	f7fe f848 	bl	8002110 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e195      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800408e:	4b6d      	ldr	r3, [pc, #436]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d021      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x572>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d11d      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040ae:	4b65      	ldr	r3, [pc, #404]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b4:	0c1b      	lsrs	r3, r3, #16
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040bc:	4b61      	ldr	r3, [pc, #388]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c2:	0e1b      	lsrs	r3, r3, #24
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	019a      	lsls	r2, r3, #6
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	431a      	orrs	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	061b      	lsls	r3, r3, #24
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	071b      	lsls	r3, r3, #28
 80040e2:	4958      	ldr	r1, [pc, #352]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d004      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040fe:	d00a      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004108:	2b00      	cmp	r3, #0
 800410a:	d02e      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004114:	d129      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004116:	4b4b      	ldr	r3, [pc, #300]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004124:	4b47      	ldr	r3, [pc, #284]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800412a:	0f1b      	lsrs	r3, r3, #28
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	019a      	lsls	r2, r3, #6
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	061b      	lsls	r3, r3, #24
 8004144:	431a      	orrs	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	071b      	lsls	r3, r3, #28
 800414a:	493e      	ldr	r1, [pc, #248]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004152:	4b3c      	ldr	r3, [pc, #240]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004158:	f023 021f 	bic.w	r2, r3, #31
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	3b01      	subs	r3, #1
 8004162:	4938      	ldr	r1, [pc, #224]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01d      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004176:	4b33      	ldr	r3, [pc, #204]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800417c:	0e1b      	lsrs	r3, r3, #24
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004184:	4b2f      	ldr	r3, [pc, #188]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800418a:	0f1b      	lsrs	r3, r3, #28
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	019a      	lsls	r2, r3, #6
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	041b      	lsls	r3, r3, #16
 800419e:	431a      	orrs	r2, r3
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	061b      	lsls	r3, r3, #24
 80041a4:	431a      	orrs	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	071b      	lsls	r3, r3, #28
 80041aa:	4926      	ldr	r1, [pc, #152]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d011      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	019a      	lsls	r2, r3, #6
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	041b      	lsls	r3, r3, #16
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	061b      	lsls	r3, r3, #24
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	071b      	lsls	r3, r3, #28
 80041da:	491a      	ldr	r1, [pc, #104]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a17      	ldr	r2, [pc, #92]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ee:	f7fd ff8f 	bl	8002110 <HAL_GetTick>
 80041f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041f4:	e008      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041f6:	f7fd ff8b 	bl	8002110 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b64      	cmp	r3, #100	; 0x64
 8004202:	d901      	bls.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e0d8      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004208:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b01      	cmp	r3, #1
 8004218:	f040 80ce 	bne.w	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800421c:	4b09      	ldr	r3, [pc, #36]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a08      	ldr	r2, [pc, #32]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004228:	f7fd ff72 	bl	8002110 <HAL_GetTick>
 800422c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800422e:	e00b      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004230:	f7fd ff6e 	bl	8002110 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d904      	bls.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e0bb      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004242:	bf00      	nop
 8004244:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004248:	4b5e      	ldr	r3, [pc, #376]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004254:	d0ec      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004272:	2b00      	cmp	r3, #0
 8004274:	d02e      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d12a      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800427e:	4b51      	ldr	r3, [pc, #324]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004284:	0c1b      	lsrs	r3, r3, #16
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800428c:	4b4d      	ldr	r3, [pc, #308]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	0f1b      	lsrs	r3, r3, #28
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	019a      	lsls	r2, r3, #6
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	041b      	lsls	r3, r3, #16
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	061b      	lsls	r3, r3, #24
 80042ac:	431a      	orrs	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	071b      	lsls	r3, r3, #28
 80042b2:	4944      	ldr	r1, [pc, #272]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042ba:	4b42      	ldr	r3, [pc, #264]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	3b01      	subs	r3, #1
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	493d      	ldr	r1, [pc, #244]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d022      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e8:	d11d      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042ea:	4b36      	ldr	r3, [pc, #216]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	0e1b      	lsrs	r3, r3, #24
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042f8:	4b32      	ldr	r3, [pc, #200]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fe:	0f1b      	lsrs	r3, r3, #28
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	019a      	lsls	r2, r3, #6
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	041b      	lsls	r3, r3, #16
 8004312:	431a      	orrs	r2, r3
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	061b      	lsls	r3, r3, #24
 8004318:	431a      	orrs	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	071b      	lsls	r3, r3, #28
 800431e:	4929      	ldr	r1, [pc, #164]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d028      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004332:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	0e1b      	lsrs	r3, r3, #24
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004340:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	0c1b      	lsrs	r3, r3, #16
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	019a      	lsls	r2, r3, #6
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	041b      	lsls	r3, r3, #16
 8004358:	431a      	orrs	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	061b      	lsls	r3, r3, #24
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	071b      	lsls	r3, r3, #28
 8004366:	4917      	ldr	r1, [pc, #92]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800436e:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004374:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	4911      	ldr	r1, [pc, #68]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004384:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a0e      	ldr	r2, [pc, #56]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800438a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004390:	f7fd febe 	bl	8002110 <HAL_GetTick>
 8004394:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004398:	f7fd feba 	bl	8002110 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e007      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b6:	d1ef      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3720      	adds	r7, #32
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800

080043c8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	; 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	fab3 f383 	clz	r3, r3
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	2103      	movs	r1, #3
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	401a      	ands	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	fa93 f3a3 	rbit	r3, r3
 8004402:	61bb      	str	r3, [r7, #24]
  return result;
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	fa01 f303 	lsl.w	r3, r1, r3
 8004414:	431a      	orrs	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	601a      	str	r2, [r3, #0]
}
 800441a:	bf00      	nop
 800441c:	3724      	adds	r7, #36	; 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	43db      	mvns	r3, r3
 800443a:	401a      	ands	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	431a      	orrs	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	605a      	str	r2, [r3, #4]
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004456:	b480      	push	{r7}
 8004458:	b089      	sub	sp, #36	; 0x24
 800445a:	af00      	add	r7, sp, #0
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	fa93 f3a3 	rbit	r3, r3
 8004470:	613b      	str	r3, [r7, #16]
  return result;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	fab3 f383 	clz	r3, r3
 8004478:	b2db      	uxtb	r3, r3
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	2103      	movs	r1, #3
 800447e:	fa01 f303 	lsl.w	r3, r1, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	401a      	ands	r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	fa93 f3a3 	rbit	r3, r3
 8004490:	61bb      	str	r3, [r7, #24]
  return result;
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	fab3 f383 	clz	r3, r3
 8004498:	b2db      	uxtb	r3, r3
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	431a      	orrs	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80044a8:	bf00      	nop
 80044aa:	3724      	adds	r7, #36	; 0x24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b089      	sub	sp, #36	; 0x24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	fa93 f3a3 	rbit	r3, r3
 80044ce:	613b      	str	r3, [r7, #16]
  return result;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	fab3 f383 	clz	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	2103      	movs	r1, #3
 80044dc:	fa01 f303 	lsl.w	r3, r1, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	401a      	ands	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	fa93 f3a3 	rbit	r3, r3
 80044ee:	61bb      	str	r3, [r7, #24]
  return result;
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	fab3 f383 	clz	r3, r3
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004500:	431a      	orrs	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	60da      	str	r2, [r3, #12]
}
 8004506:	bf00      	nop
 8004508:	3724      	adds	r7, #36	; 0x24
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004512:	b480      	push	{r7}
 8004514:	b089      	sub	sp, #36	; 0x24
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1a      	ldr	r2, [r3, #32]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	fa93 f3a3 	rbit	r3, r3
 800452c:	613b      	str	r3, [r7, #16]
  return result;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	fab3 f383 	clz	r3, r3
 8004534:	b2db      	uxtb	r3, r3
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	210f      	movs	r1, #15
 800453a:	fa01 f303 	lsl.w	r3, r1, r3
 800453e:	43db      	mvns	r3, r3
 8004540:	401a      	ands	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	fa93 f3a3 	rbit	r3, r3
 800454c:	61bb      	str	r3, [r7, #24]
  return result;
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	fab3 f383 	clz	r3, r3
 8004554:	b2db      	uxtb	r3, r3
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	fa01 f303 	lsl.w	r3, r1, r3
 800455e:	431a      	orrs	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004564:	bf00      	nop
 8004566:	3724      	adds	r7, #36	; 0x24
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004570:	b480      	push	{r7}
 8004572:	b089      	sub	sp, #36	; 0x24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	0a1b      	lsrs	r3, r3, #8
 8004584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	613b      	str	r3, [r7, #16]
  return result;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	fab3 f383 	clz	r3, r3
 8004594:	b2db      	uxtb	r3, r3
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	210f      	movs	r1, #15
 800459a:	fa01 f303 	lsl.w	r3, r1, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	401a      	ands	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	0a1b      	lsrs	r3, r3, #8
 80045a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	fa93 f3a3 	rbit	r3, r3
 80045ae:	61bb      	str	r3, [r7, #24]
  return result;
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	fa01 f303 	lsl.w	r3, r1, r3
 80045c0:	431a      	orrs	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80045c6:	bf00      	nop
 80045c8:	3724      	adds	r7, #36	; 0x24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b088      	sub	sp, #32
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	fa93 f3a3 	rbit	r3, r3
 80045f0:	613b      	str	r3, [r7, #16]
  return result;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	fab3 f383 	clz	r3, r3
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80045fc:	e051      	b.n	80046a2 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	2101      	movs	r1, #1
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	fa01 f303 	lsl.w	r3, r1, r3
 800460a:	4013      	ands	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d043      	beq.n	800469c <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d003      	beq.n	8004624 <LL_GPIO_Init+0x52>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d10e      	bne.n	8004642 <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	461a      	mov	r2, r3
 800462a:	69b9      	ldr	r1, [r7, #24]
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ff12 	bl	8004456 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6819      	ldr	r1, [r3, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	461a      	mov	r2, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff fef2 	bl	8004426 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	461a      	mov	r2, r3
 8004648:	69b9      	ldr	r1, [r7, #24]
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff ff32 	bl	80044b4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d11a      	bne.n	800468e <LL_GPIO_Init+0xbc>
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	60bb      	str	r3, [r7, #8]
  return result;
 8004664:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b07      	cmp	r3, #7
 800466e:	d807      	bhi.n	8004680 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	461a      	mov	r2, r3
 8004676:	69b9      	ldr	r1, [r7, #24]
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff ff4a 	bl	8004512 <LL_GPIO_SetAFPin_0_7>
 800467e:	e006      	b.n	800468e <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	461a      	mov	r2, r3
 8004686:	69b9      	ldr	r1, [r7, #24]
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff ff71 	bl	8004570 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	461a      	mov	r2, r3
 8004694:	69b9      	ldr	r1, [r7, #24]
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff fe96 	bl	80043c8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	3301      	adds	r3, #1
 80046a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1a6      	bne.n	80045fe <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <LL_RCC_HSI_IsReady+0x20>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	40023800 	.word	0x40023800

080046e0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80046e4:	4b06      	ldr	r3, [pc, #24]	; (8004700 <LL_RCC_LSE_IsReady+0x20>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	40023800 	.word	0x40023800

08004704 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004708:	4b04      	ldr	r3, [pc, #16]	; (800471c <LL_RCC_GetSysClkSource+0x18>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 030c 	and.w	r3, r3, #12
}
 8004710:	4618      	mov	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800

08004720 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <LL_RCC_GetAHBPrescaler+0x18>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800472c:	4618      	mov	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800

0800473c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004740:	4b04      	ldr	r3, [pc, #16]	; (8004754 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004748:	4618      	mov	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800

08004758 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <LL_RCC_GetAPB2Prescaler+0x18>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004764:	4618      	mov	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800

08004774 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 800477c:	4b06      	ldr	r3, [pc, #24]	; (8004798 <LL_RCC_GetUSARTClockSource+0x24>)
 800477e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	401a      	ands	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	041b      	lsls	r3, r3, #16
 800478a:	4313      	orrs	r3, r2
}
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	40023800 	.word	0x40023800

0800479c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <LL_RCC_GetUARTClockSource+0x24>)
 80047a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	401a      	ands	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	041b      	lsls	r3, r3, #16
 80047b2:	4313      	orrs	r3, r2
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	40023800 	.word	0x40023800

080047c4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <LL_RCC_PLL_GetMainSource+0x18>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40023800 	.word	0x40023800

080047e0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 50 and 432
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80047e4:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <LL_RCC_PLL_GetN+0x18>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	099b      	lsrs	r3, r3, #6
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	40023800 	.word	0x40023800

080047fc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <LL_RCC_PLL_GetP+0x18>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800

08004818 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800481c:	4b04      	ldr	r3, [pc, #16]	; (8004830 <LL_RCC_PLL_GetDivider+0x18>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004824:	4618      	mov	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40023800 	.word	0x40023800

08004834 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d133      	bne.n	80048ae <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff ff94 	bl	8004774 <LL_RCC_GetUSARTClockSource>
 800484c:	4603      	mov	r3, r0
 800484e:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8004852:	d016      	beq.n	8004882 <LL_RCC_GetUSARTClockFreq+0x4e>
 8004854:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8004858:	d81d      	bhi.n	8004896 <LL_RCC_GetUSARTClockFreq+0x62>
 800485a:	4a71      	ldr	r2, [pc, #452]	; (8004a20 <LL_RCC_GetUSARTClockFreq+0x1ec>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d003      	beq.n	8004868 <LL_RCC_GetUSARTClockFreq+0x34>
 8004860:	4a70      	ldr	r2, [pc, #448]	; (8004a24 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <LL_RCC_GetUSARTClockFreq+0x3c>
 8004866:	e016      	b.n	8004896 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004868:	f000 f9f6 	bl	8004c58 <RCC_GetSystemClockFreq>
 800486c:	60f8      	str	r0, [r7, #12]
        break;
 800486e:	e0d1      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004870:	f7ff ff24 	bl	80046bc <LL_RCC_HSI_IsReady>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 80bb 	beq.w	80049f2 <LL_RCC_GetUSARTClockFreq+0x1be>
        {
          usart_frequency = HSI_VALUE;
 800487c:	4b6a      	ldr	r3, [pc, #424]	; (8004a28 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 800487e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004880:	e0b7      	b.n	80049f2 <LL_RCC_GetUSARTClockFreq+0x1be>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004882:	f7ff ff2d 	bl	80046e0 <LL_RCC_LSE_IsReady>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80b4 	beq.w	80049f6 <LL_RCC_GetUSARTClockFreq+0x1c2>
        {
          usart_frequency = LSE_VALUE;
 800488e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004892:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004894:	e0af      	b.n	80049f6 <LL_RCC_GetUSARTClockFreq+0x1c2>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004896:	f000 f9df 	bl	8004c58 <RCC_GetSystemClockFreq>
 800489a:	4603      	mov	r3, r0
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fa03 	bl	8004ca8 <RCC_GetHCLKClockFreq>
 80048a2:	4603      	mov	r3, r0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fa29 	bl	8004cfc <RCC_GetPCLK2ClockFreq>
 80048aa:	60f8      	str	r0, [r7, #12]
        break;
 80048ac:	e0b2      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d133      	bne.n	800491c <LL_RCC_GetUSARTClockFreq+0xe8>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff ff5d 	bl	8004774 <LL_RCC_GetUSARTClockSource>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80048c0:	d016      	beq.n	80048f0 <LL_RCC_GetUSARTClockFreq+0xbc>
 80048c2:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80048c6:	d81d      	bhi.n	8004904 <LL_RCC_GetUSARTClockFreq+0xd0>
 80048c8:	4a58      	ldr	r2, [pc, #352]	; (8004a2c <LL_RCC_GetUSARTClockFreq+0x1f8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <LL_RCC_GetUSARTClockFreq+0xa2>
 80048ce:	4a58      	ldr	r2, [pc, #352]	; (8004a30 <LL_RCC_GetUSARTClockFreq+0x1fc>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <LL_RCC_GetUSARTClockFreq+0xaa>
 80048d4:	e016      	b.n	8004904 <LL_RCC_GetUSARTClockFreq+0xd0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80048d6:	f000 f9bf 	bl	8004c58 <RCC_GetSystemClockFreq>
 80048da:	60f8      	str	r0, [r7, #12]
        break;
 80048dc:	e09a      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80048de:	f7ff feed 	bl	80046bc <LL_RCC_HSI_IsReady>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8088 	beq.w	80049fa <LL_RCC_GetUSARTClockFreq+0x1c6>
        {
          usart_frequency = HSI_VALUE;
 80048ea:	4b4f      	ldr	r3, [pc, #316]	; (8004a28 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 80048ec:	60fb      	str	r3, [r7, #12]
        }
        break;
 80048ee:	e084      	b.n	80049fa <LL_RCC_GetUSARTClockFreq+0x1c6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80048f0:	f7ff fef6 	bl	80046e0 <LL_RCC_LSE_IsReady>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 8081 	beq.w	80049fe <LL_RCC_GetUSARTClockFreq+0x1ca>
        {
          usart_frequency = LSE_VALUE;
 80048fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004900:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004902:	e07c      	b.n	80049fe <LL_RCC_GetUSARTClockFreq+0x1ca>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004904:	f000 f9a8 	bl	8004c58 <RCC_GetSystemClockFreq>
 8004908:	4603      	mov	r3, r0
 800490a:	4618      	mov	r0, r3
 800490c:	f000 f9cc 	bl	8004ca8 <RCC_GetHCLKClockFreq>
 8004910:	4603      	mov	r3, r0
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f9de 	bl	8004cd4 <RCC_GetPCLK1ClockFreq>
 8004918:	60f8      	str	r0, [r7, #12]
        break;
 800491a:	e07b      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>
    }
  }
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004922:	d131      	bne.n	8004988 <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff ff25 	bl	8004774 <LL_RCC_GetUSARTClockSource>
 800492a:	4603      	mov	r3, r0
 800492c:	f1b3 2f0c 	cmp.w	r3, #201329664	; 0xc000c00
 8004930:	d015      	beq.n	800495e <LL_RCC_GetUSARTClockFreq+0x12a>
 8004932:	f1b3 2f0c 	cmp.w	r3, #201329664	; 0xc000c00
 8004936:	d81b      	bhi.n	8004970 <LL_RCC_GetUSARTClockFreq+0x13c>
 8004938:	4a3e      	ldr	r2, [pc, #248]	; (8004a34 <LL_RCC_GetUSARTClockFreq+0x200>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <LL_RCC_GetUSARTClockFreq+0x112>
 800493e:	4a3e      	ldr	r2, [pc, #248]	; (8004a38 <LL_RCC_GetUSARTClockFreq+0x204>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d004      	beq.n	800494e <LL_RCC_GetUSARTClockFreq+0x11a>
 8004944:	e014      	b.n	8004970 <LL_RCC_GetUSARTClockFreq+0x13c>
    {
      case LL_RCC_USART6_CLKSOURCE_SYSCLK: /* USART6 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004946:	f000 f987 	bl	8004c58 <RCC_GetSystemClockFreq>
 800494a:	60f8      	str	r0, [r7, #12]
        break;
 800494c:	e062      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>

      case LL_RCC_USART6_CLKSOURCE_HSI:    /* USART6 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800494e:	f7ff feb5 	bl	80046bc <LL_RCC_HSI_IsReady>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d054      	beq.n	8004a02 <LL_RCC_GetUSARTClockFreq+0x1ce>
        {
          usart_frequency = HSI_VALUE;
 8004958:	4b33      	ldr	r3, [pc, #204]	; (8004a28 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 800495a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800495c:	e051      	b.n	8004a02 <LL_RCC_GetUSARTClockFreq+0x1ce>

      case LL_RCC_USART6_CLKSOURCE_LSE:    /* USART6 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800495e:	f7ff febf 	bl	80046e0 <LL_RCC_LSE_IsReady>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d04e      	beq.n	8004a06 <LL_RCC_GetUSARTClockFreq+0x1d2>
        {
          usart_frequency = LSE_VALUE;
 8004968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800496e:	e04a      	b.n	8004a06 <LL_RCC_GetUSARTClockFreq+0x1d2>

      case LL_RCC_USART6_CLKSOURCE_PCLK2:  /* USART6 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004970:	f000 f972 	bl	8004c58 <RCC_GetSystemClockFreq>
 8004974:	4603      	mov	r3, r0
 8004976:	4618      	mov	r0, r3
 8004978:	f000 f996 	bl	8004ca8 <RCC_GetHCLKClockFreq>
 800497c:	4603      	mov	r3, r0
 800497e:	4618      	mov	r0, r3
 8004980:	f000 f9bc 	bl	8004cfc <RCC_GetPCLK2ClockFreq>
 8004984:	60f8      	str	r0, [r7, #12]
        break;
 8004986:	e045      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b30      	cmp	r3, #48	; 0x30
 800498c:	d13d      	bne.n	8004a0a <LL_RCC_GetUSARTClockFreq+0x1d6>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff fef0 	bl	8004774 <LL_RCC_GetUSARTClockSource>
 8004994:	4603      	mov	r3, r0
 8004996:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800499a:	d015      	beq.n	80049c8 <LL_RCC_GetUSARTClockFreq+0x194>
 800499c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80049a0:	d81b      	bhi.n	80049da <LL_RCC_GetUSARTClockFreq+0x1a6>
 80049a2:	4a26      	ldr	r2, [pc, #152]	; (8004a3c <LL_RCC_GetUSARTClockFreq+0x208>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d003      	beq.n	80049b0 <LL_RCC_GetUSARTClockFreq+0x17c>
 80049a8:	4a25      	ldr	r2, [pc, #148]	; (8004a40 <LL_RCC_GetUSARTClockFreq+0x20c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <LL_RCC_GetUSARTClockFreq+0x184>
 80049ae:	e014      	b.n	80049da <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80049b0:	f000 f952 	bl	8004c58 <RCC_GetSystemClockFreq>
 80049b4:	60f8      	str	r0, [r7, #12]
          break;
 80049b6:	e02d      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 80049b8:	f7ff fe80 	bl	80046bc <LL_RCC_HSI_IsReady>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d025      	beq.n	8004a0e <LL_RCC_GetUSARTClockFreq+0x1da>
          {
            usart_frequency = HSI_VALUE;
 80049c2:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 80049c4:	60fb      	str	r3, [r7, #12]
          }
          break;
 80049c6:	e022      	b.n	8004a0e <LL_RCC_GetUSARTClockFreq+0x1da>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 80049c8:	f7ff fe8a 	bl	80046e0 <LL_RCC_LSE_IsReady>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01f      	beq.n	8004a12 <LL_RCC_GetUSARTClockFreq+0x1de>
          {
            usart_frequency = LSE_VALUE;
 80049d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d6:	60fb      	str	r3, [r7, #12]
          }
          break;
 80049d8:	e01b      	b.n	8004a12 <LL_RCC_GetUSARTClockFreq+0x1de>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80049da:	f000 f93d 	bl	8004c58 <RCC_GetSystemClockFreq>
 80049de:	4603      	mov	r3, r0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 f961 	bl	8004ca8 <RCC_GetHCLKClockFreq>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 f973 	bl	8004cd4 <RCC_GetPCLK1ClockFreq>
 80049ee:	60f8      	str	r0, [r7, #12]
          break;
 80049f0:	e010      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 80049f2:	bf00      	nop
 80049f4:	e00e      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 80049f6:	bf00      	nop
 80049f8:	e00c      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 80049fa:	bf00      	nop
 80049fc:	e00a      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 80049fe:	bf00      	nop
 8004a00:	e008      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 8004a02:	bf00      	nop
 8004a04:	e006      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 8004a06:	bf00      	nop
 8004a08:	e004      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>
      }
    }
 8004a0a:	bf00      	nop
 8004a0c:	e002      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>
          break;
 8004a0e:	bf00      	nop
 8004a10:	e000      	b.n	8004a14 <LL_RCC_GetUSARTClockFreq+0x1e0>
          break;
 8004a12:	bf00      	nop
  }
  return usart_frequency;
 8004a14:	68fb      	ldr	r3, [r7, #12]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	00030001 	.word	0x00030001
 8004a24:	00030002 	.word	0x00030002
 8004a28:	00f42400 	.word	0x00f42400
 8004a2c:	000c0004 	.word	0x000c0004
 8004a30:	000c0008 	.word	0x000c0008
 8004a34:	0c000400 	.word	0x0c000400
 8004a38:	0c000800 	.word	0x0c000800
 8004a3c:	00300010 	.word	0x00300010
 8004a40:	00300020 	.word	0x00300020

08004a44 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2bc0      	cmp	r3, #192	; 0xc0
 8004a54:	d133      	bne.n	8004abe <LL_RCC_GetUARTClockFreq+0x7a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff fea0 	bl	800479c <LL_RCC_GetUARTClockSource>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004a62:	d016      	beq.n	8004a92 <LL_RCC_GetUARTClockFreq+0x4e>
 8004a64:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004a68:	d81d      	bhi.n	8004aa6 <LL_RCC_GetUARTClockFreq+0x62>
 8004a6a:	4a72      	ldr	r2, [pc, #456]	; (8004c34 <LL_RCC_GetUARTClockFreq+0x1f0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <LL_RCC_GetUARTClockFreq+0x34>
 8004a70:	4a71      	ldr	r2, [pc, #452]	; (8004c38 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <LL_RCC_GetUARTClockFreq+0x3c>
 8004a76:	e016      	b.n	8004aa6 <LL_RCC_GetUARTClockFreq+0x62>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004a78:	f000 f8ee 	bl	8004c58 <RCC_GetSystemClockFreq>
 8004a7c:	60f8      	str	r0, [r7, #12]
        break;
 8004a7e:	e0d3      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004a80:	f7ff fe1c 	bl	80046bc <LL_RCC_HSI_IsReady>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80bd 	beq.w	8004c06 <LL_RCC_GetUARTClockFreq+0x1c2>
        {
          uart_frequency = HSI_VALUE;
 8004a8c:	4b6b      	ldr	r3, [pc, #428]	; (8004c3c <LL_RCC_GetUARTClockFreq+0x1f8>)
 8004a8e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004a90:	e0b9      	b.n	8004c06 <LL_RCC_GetUARTClockFreq+0x1c2>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004a92:	f7ff fe25 	bl	80046e0 <LL_RCC_LSE_IsReady>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80b6 	beq.w	8004c0a <LL_RCC_GetUARTClockFreq+0x1c6>
        {
          uart_frequency = LSE_VALUE;
 8004a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004aa4:	e0b1      	b.n	8004c0a <LL_RCC_GetUARTClockFreq+0x1c6>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004aa6:	f000 f8d7 	bl	8004c58 <RCC_GetSystemClockFreq>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 f8fb 	bl	8004ca8 <RCC_GetHCLKClockFreq>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 f90d 	bl	8004cd4 <RCC_GetPCLK1ClockFreq>
 8004aba:	60f8      	str	r0, [r7, #12]
        break;
 8004abc:	e0b4      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ac4:	d133      	bne.n	8004b2e <LL_RCC_GetUARTClockFreq+0xea>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fe68 	bl	800479c <LL_RCC_GetUARTClockSource>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8004ad2:	d016      	beq.n	8004b02 <LL_RCC_GetUARTClockFreq+0xbe>
 8004ad4:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8004ad8:	d81d      	bhi.n	8004b16 <LL_RCC_GetUARTClockFreq+0xd2>
 8004ada:	4a59      	ldr	r2, [pc, #356]	; (8004c40 <LL_RCC_GetUARTClockFreq+0x1fc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d003      	beq.n	8004ae8 <LL_RCC_GetUARTClockFreq+0xa4>
 8004ae0:	4a58      	ldr	r2, [pc, #352]	; (8004c44 <LL_RCC_GetUARTClockFreq+0x200>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d004      	beq.n	8004af0 <LL_RCC_GetUARTClockFreq+0xac>
 8004ae6:	e016      	b.n	8004b16 <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004ae8:	f000 f8b6 	bl	8004c58 <RCC_GetSystemClockFreq>
 8004aec:	60f8      	str	r0, [r7, #12]
        break;
 8004aee:	e09b      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004af0:	f7ff fde4 	bl	80046bc <LL_RCC_HSI_IsReady>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 8089 	beq.w	8004c0e <LL_RCC_GetUARTClockFreq+0x1ca>
        {
          uart_frequency = HSI_VALUE;
 8004afc:	4b4f      	ldr	r3, [pc, #316]	; (8004c3c <LL_RCC_GetUARTClockFreq+0x1f8>)
 8004afe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004b00:	e085      	b.n	8004c0e <LL_RCC_GetUARTClockFreq+0x1ca>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004b02:	f7ff fded 	bl	80046e0 <LL_RCC_LSE_IsReady>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8082 	beq.w	8004c12 <LL_RCC_GetUARTClockFreq+0x1ce>
        {
          uart_frequency = LSE_VALUE;
 8004b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b12:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004b14:	e07d      	b.n	8004c12 <LL_RCC_GetUARTClockFreq+0x1ce>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004b16:	f000 f89f 	bl	8004c58 <RCC_GetSystemClockFreq>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 f8c3 	bl	8004ca8 <RCC_GetHCLKClockFreq>
 8004b22:	4603      	mov	r3, r0
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 f8d5 	bl	8004cd4 <RCC_GetPCLK1ClockFreq>
 8004b2a:	60f8      	str	r0, [r7, #12]
        break;
 8004b2c:	e07c      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>
    }
  }
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b34:	d131      	bne.n	8004b9a <LL_RCC_GetUARTClockFreq+0x156>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff fe30 	bl	800479c <LL_RCC_GetUARTClockSource>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f1b3 2f30 	cmp.w	r3, #805318656	; 0x30003000
 8004b42:	d015      	beq.n	8004b70 <LL_RCC_GetUARTClockFreq+0x12c>
 8004b44:	f1b3 2f30 	cmp.w	r3, #805318656	; 0x30003000
 8004b48:	d81b      	bhi.n	8004b82 <LL_RCC_GetUARTClockFreq+0x13e>
 8004b4a:	4a3f      	ldr	r2, [pc, #252]	; (8004c48 <LL_RCC_GetUARTClockFreq+0x204>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <LL_RCC_GetUARTClockFreq+0x114>
 8004b50:	4a3e      	ldr	r2, [pc, #248]	; (8004c4c <LL_RCC_GetUARTClockFreq+0x208>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <LL_RCC_GetUARTClockFreq+0x11c>
 8004b56:	e014      	b.n	8004b82 <LL_RCC_GetUARTClockFreq+0x13e>
    {
      case LL_RCC_UART7_CLKSOURCE_SYSCLK: /* UART7 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004b58:	f000 f87e 	bl	8004c58 <RCC_GetSystemClockFreq>
 8004b5c:	60f8      	str	r0, [r7, #12]
        break;
 8004b5e:	e063      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>

      case LL_RCC_UART7_CLKSOURCE_HSI:    /* UART7 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004b60:	f7ff fdac 	bl	80046bc <LL_RCC_HSI_IsReady>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d055      	beq.n	8004c16 <LL_RCC_GetUARTClockFreq+0x1d2>
        {
          uart_frequency = HSI_VALUE;
 8004b6a:	4b34      	ldr	r3, [pc, #208]	; (8004c3c <LL_RCC_GetUARTClockFreq+0x1f8>)
 8004b6c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004b6e:	e052      	b.n	8004c16 <LL_RCC_GetUARTClockFreq+0x1d2>

      case LL_RCC_UART7_CLKSOURCE_LSE:    /* UART7 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004b70:	f7ff fdb6 	bl	80046e0 <LL_RCC_LSE_IsReady>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d04f      	beq.n	8004c1a <LL_RCC_GetUARTClockFreq+0x1d6>
        {
          uart_frequency = LSE_VALUE;
 8004b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004b80:	e04b      	b.n	8004c1a <LL_RCC_GetUARTClockFreq+0x1d6>

      case LL_RCC_UART7_CLKSOURCE_PCLK1:  /* UART7 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004b82:	f000 f869 	bl	8004c58 <RCC_GetSystemClockFreq>
 8004b86:	4603      	mov	r3, r0
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 f88d 	bl	8004ca8 <RCC_GetHCLKClockFreq>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 f89f 	bl	8004cd4 <RCC_GetPCLK1ClockFreq>
 8004b96:	60f8      	str	r0, [r7, #12]
        break;
 8004b98:	e046      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>
    }
  }
  else
  {
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ba0:	d13d      	bne.n	8004c1e <LL_RCC_GetUARTClockFreq+0x1da>
    {
      /* UART8CLK clock frequency */
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff fdfa 	bl	800479c <LL_RCC_GetUARTClockSource>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f1b3 2fc0 	cmp.w	r3, #3221274624	; 0xc000c000
 8004bae:	d015      	beq.n	8004bdc <LL_RCC_GetUARTClockFreq+0x198>
 8004bb0:	f1b3 2fc0 	cmp.w	r3, #3221274624	; 0xc000c000
 8004bb4:	d81b      	bhi.n	8004bee <LL_RCC_GetUARTClockFreq+0x1aa>
 8004bb6:	4a26      	ldr	r2, [pc, #152]	; (8004c50 <LL_RCC_GetUARTClockFreq+0x20c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <LL_RCC_GetUARTClockFreq+0x180>
 8004bbc:	4a25      	ldr	r2, [pc, #148]	; (8004c54 <LL_RCC_GetUARTClockFreq+0x210>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <LL_RCC_GetUARTClockFreq+0x188>
 8004bc2:	e014      	b.n	8004bee <LL_RCC_GetUARTClockFreq+0x1aa>
      {
        case LL_RCC_UART8_CLKSOURCE_SYSCLK: /* UART8 Clock is System Clock */
          uart_frequency = RCC_GetSystemClockFreq();
 8004bc4:	f000 f848 	bl	8004c58 <RCC_GetSystemClockFreq>
 8004bc8:	60f8      	str	r0, [r7, #12]
          break;
 8004bca:	e02d      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>

        case LL_RCC_UART8_CLKSOURCE_HSI:    /* UART8 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8004bcc:	f7ff fd76 	bl	80046bc <LL_RCC_HSI_IsReady>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d025      	beq.n	8004c22 <LL_RCC_GetUARTClockFreq+0x1de>
          {
            uart_frequency = HSI_VALUE;
 8004bd6:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <LL_RCC_GetUARTClockFreq+0x1f8>)
 8004bd8:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004bda:	e022      	b.n	8004c22 <LL_RCC_GetUARTClockFreq+0x1de>

        case LL_RCC_UART8_CLKSOURCE_LSE:    /* UART8 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8004bdc:	f7ff fd80 	bl	80046e0 <LL_RCC_LSE_IsReady>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01f      	beq.n	8004c26 <LL_RCC_GetUARTClockFreq+0x1e2>
          {
            uart_frequency = LSE_VALUE;
 8004be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bea:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004bec:	e01b      	b.n	8004c26 <LL_RCC_GetUARTClockFreq+0x1e2>

        case LL_RCC_UART8_CLKSOURCE_PCLK1:  /* UART8 Clock is PCLK1 */
        default:
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004bee:	f000 f833 	bl	8004c58 <RCC_GetSystemClockFreq>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 f857 	bl	8004ca8 <RCC_GetHCLKClockFreq>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 f869 	bl	8004cd4 <RCC_GetPCLK1ClockFreq>
 8004c02:	60f8      	str	r0, [r7, #12]
          break;
 8004c04:	e010      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 8004c06:	bf00      	nop
 8004c08:	e00e      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 8004c0a:	bf00      	nop
 8004c0c:	e00c      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 8004c0e:	bf00      	nop
 8004c10:	e00a      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 8004c12:	bf00      	nop
 8004c14:	e008      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 8004c16:	bf00      	nop
 8004c18:	e006      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 8004c1a:	bf00      	nop
 8004c1c:	e004      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>
      }
    }
 8004c1e:	bf00      	nop
 8004c20:	e002      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>
          break;
 8004c22:	bf00      	nop
 8004c24:	e000      	b.n	8004c28 <LL_RCC_GetUARTClockFreq+0x1e4>
          break;
 8004c26:	bf00      	nop
  }
  return uart_frequency;
 8004c28:	68fb      	ldr	r3, [r7, #12]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	00c00040 	.word	0x00c00040
 8004c38:	00c00080 	.word	0x00c00080
 8004c3c:	00f42400 	.word	0x00f42400
 8004c40:	03000100 	.word	0x03000100
 8004c44:	03000200 	.word	0x03000200
 8004c48:	30001000 	.word	0x30001000
 8004c4c:	30002000 	.word	0x30002000
 8004c50:	c0004000 	.word	0xc0004000
 8004c54:	c0008000 	.word	0xc0008000

08004c58 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004c62:	f7ff fd4f 	bl	8004704 <LL_RCC_GetSysClkSource>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d00c      	beq.n	8004c86 <RCC_GetSystemClockFreq+0x2e>
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d80e      	bhi.n	8004c8e <RCC_GetSystemClockFreq+0x36>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <RCC_GetSystemClockFreq+0x22>
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d003      	beq.n	8004c80 <RCC_GetSystemClockFreq+0x28>
 8004c78:	e009      	b.n	8004c8e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <RCC_GetSystemClockFreq+0x48>)
 8004c7c:	607b      	str	r3, [r7, #4]
      break;
 8004c7e:	e009      	b.n	8004c94 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004c80:	4b08      	ldr	r3, [pc, #32]	; (8004ca4 <RCC_GetSystemClockFreq+0x4c>)
 8004c82:	607b      	str	r3, [r7, #4]
      break;
 8004c84:	e006      	b.n	8004c94 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004c86:	f000 f84d 	bl	8004d24 <RCC_PLL_GetFreqDomain_SYS>
 8004c8a:	6078      	str	r0, [r7, #4]
      break;
 8004c8c:	e002      	b.n	8004c94 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8004c8e:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <RCC_GetSystemClockFreq+0x48>)
 8004c90:	607b      	str	r3, [r7, #4]
      break;
 8004c92:	bf00      	nop
  }

  return frequency;
 8004c94:	687b      	ldr	r3, [r7, #4]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	00f42400 	.word	0x00f42400
 8004ca4:	007a1200 	.word	0x007a1200

08004ca8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004cb0:	f7ff fd36 	bl	8004720 <LL_RCC_GetAHBPrescaler>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	091b      	lsrs	r3, r3, #4
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <RCC_GetHCLKClockFreq+0x28>)
 8004cbe:	5cd3      	ldrb	r3, [r2, r3]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	40d3      	lsrs	r3, r2
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	0800f4c8 	.word	0x0800f4c8

08004cd4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004cdc:	f7ff fd2e 	bl	800473c <LL_RCC_GetAPB1Prescaler>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	0a9b      	lsrs	r3, r3, #10
 8004ce4:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <RCC_GetPCLK1ClockFreq+0x24>)
 8004ce6:	5cd3      	ldrb	r3, [r2, r3]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	40d3      	lsrs	r3, r2
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	0800f4d8 	.word	0x0800f4d8

08004cfc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004d04:	f7ff fd28 	bl	8004758 <LL_RCC_GetAPB2Prescaler>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	0b5b      	lsrs	r3, r3, #13
 8004d0c:	4a04      	ldr	r2, [pc, #16]	; (8004d20 <RCC_GetPCLK2ClockFreq+0x24>)
 8004d0e:	5cd3      	ldrb	r3, [r2, r3]
 8004d10:	461a      	mov	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	40d3      	lsrs	r3, r2
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	0800f4d8 	.word	0x0800f4d8

08004d24 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004d24:	b590      	push	{r4, r7, lr}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	607b      	str	r3, [r7, #4]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004d32:	f7ff fd47 	bl	80047c4 <LL_RCC_PLL_GetMainSource>
 8004d36:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d004      	beq.n	8004d48 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d44:	d003      	beq.n	8004d4e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004d46:	e005      	b.n	8004d54 <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004d48:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8004d4a:	607b      	str	r3, [r7, #4]
      break;
 8004d4c:	e005      	b.n	8004d5a <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8004d50:	607b      	str	r3, [r7, #4]
      break;
 8004d52:	e002      	b.n	8004d5a <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
      pllinputfreq = HSI_VALUE;
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8004d56:	607b      	str	r3, [r7, #4]
      break;
 8004d58:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004d5a:	f7ff fd5d 	bl	8004818 <LL_RCC_PLL_GetDivider>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	fbb3 f4f2 	udiv	r4, r3, r2
 8004d66:	f7ff fd3b 	bl	80047e0 <LL_RCC_PLL_GetN>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	fb03 f404 	mul.w	r4, r3, r4
 8004d70:	f7ff fd44 	bl	80047fc <LL_RCC_PLL_GetP>
 8004d74:	4603      	mov	r3, r0
 8004d76:	0c1b      	lsrs	r3, r3, #16
 8004d78:	3301      	adds	r3, #1
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd90      	pop	{r4, r7, pc}
 8004d88:	00f42400 	.word	0x00f42400
 8004d8c:	007a1200 	.word	0x007a1200

08004d90 <LL_TIM_SetPrescaler>:
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <LL_TIM_SetAutoReload>:
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_TIM_SetRepetitionCounter>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f043 0201 	orr.w	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	615a      	str	r2, [r3, #20]
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a3d      	ldr	r2, [pc, #244]	; (8004f0c <LL_TIM_Init+0x108>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d013      	beq.n	8004e44 <LL_TIM_Init+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e22:	d00f      	beq.n	8004e44 <LL_TIM_Init+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3a      	ldr	r2, [pc, #232]	; (8004f10 <LL_TIM_Init+0x10c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00b      	beq.n	8004e44 <LL_TIM_Init+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a39      	ldr	r2, [pc, #228]	; (8004f14 <LL_TIM_Init+0x110>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d007      	beq.n	8004e44 <LL_TIM_Init+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a38      	ldr	r2, [pc, #224]	; (8004f18 <LL_TIM_Init+0x114>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <LL_TIM_Init+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a37      	ldr	r2, [pc, #220]	; (8004f1c <LL_TIM_Init+0x118>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d106      	bne.n	8004e52 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a2d      	ldr	r2, [pc, #180]	; (8004f0c <LL_TIM_Init+0x108>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d02b      	beq.n	8004eb2 <LL_TIM_Init+0xae>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e60:	d027      	beq.n	8004eb2 <LL_TIM_Init+0xae>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2a      	ldr	r2, [pc, #168]	; (8004f10 <LL_TIM_Init+0x10c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d023      	beq.n	8004eb2 <LL_TIM_Init+0xae>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a29      	ldr	r2, [pc, #164]	; (8004f14 <LL_TIM_Init+0x110>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01f      	beq.n	8004eb2 <LL_TIM_Init+0xae>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <LL_TIM_Init+0x114>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01b      	beq.n	8004eb2 <LL_TIM_Init+0xae>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <LL_TIM_Init+0x118>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d017      	beq.n	8004eb2 <LL_TIM_Init+0xae>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a26      	ldr	r2, [pc, #152]	; (8004f20 <LL_TIM_Init+0x11c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <LL_TIM_Init+0xae>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a25      	ldr	r2, [pc, #148]	; (8004f24 <LL_TIM_Init+0x120>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00f      	beq.n	8004eb2 <LL_TIM_Init+0xae>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a24      	ldr	r2, [pc, #144]	; (8004f28 <LL_TIM_Init+0x124>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00b      	beq.n	8004eb2 <LL_TIM_Init+0xae>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a23      	ldr	r2, [pc, #140]	; (8004f2c <LL_TIM_Init+0x128>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d007      	beq.n	8004eb2 <LL_TIM_Init+0xae>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a22      	ldr	r2, [pc, #136]	; (8004f30 <LL_TIM_Init+0x12c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d003      	beq.n	8004eb2 <LL_TIM_Init+0xae>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a21      	ldr	r2, [pc, #132]	; (8004f34 <LL_TIM_Init+0x130>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d106      	bne.n	8004ec0 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff ff6d 	bl	8004dac <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff ff59 	bl	8004d90 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <LL_TIM_Init+0x108>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <LL_TIM_Init+0xea>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a0c      	ldr	r2, [pc, #48]	; (8004f1c <LL_TIM_Init+0x118>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d105      	bne.n	8004efa <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff ff67 	bl	8004dc8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff ff72 	bl	8004de4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40010400 	.word	0x40010400
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400
 8004f28:	40014800 	.word	0x40014800
 8004f2c:	40001800 	.word	0x40001800
 8004f30:	40001c00 	.word	0x40001c00
 8004f34:	40002000 	.word	0x40002000

08004f38 <LL_USART_IsEnabled>:
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <LL_USART_IsEnabled+0x18>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <LL_USART_IsEnabled+0x1a>
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <LL_USART_SetStopBitsLength>:
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	605a      	str	r2, [r3, #4]
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <LL_USART_SetHWFlowCtrl>:
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	609a      	str	r2, [r3, #8]
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <LL_USART_SetBaudRate>:
{
 8004faa:	b480      	push	{r7}
 8004fac:	b087      	sub	sp, #28
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fbe:	d11a      	bne.n	8004ff6 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	005a      	lsls	r2, r3, #1
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	085b      	lsrs	r3, r3, #1
 8004fc8:	441a      	add	r2, r3
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8004fda:	4013      	ands	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	085b      	lsrs	r3, r3, #1
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	60da      	str	r2, [r3, #12]
}
 8004ff4:	e00a      	b.n	800500c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	085a      	lsrs	r2, r3, #1
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	441a      	add	r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	fbb2 f3f3 	udiv	r3, r2, r3
 8005004:	b29b      	uxth	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	60da      	str	r2, [r3, #12]
}
 800500c:	bf00      	nop
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005026:	2300      	movs	r3, #0
 8005028:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff ff84 	bl	8004f38 <LL_USART_IsEnabled>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d179      	bne.n	800512a <LL_USART_Init+0x112>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4b3e      	ldr	r3, [pc, #248]	; (8005134 <LL_USART_Init+0x11c>)
 800503c:	4013      	ands	r3, r2
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	6851      	ldr	r1, [r2, #4]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	68d2      	ldr	r2, [r2, #12]
 8005046:	4311      	orrs	r1, r2
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	6912      	ldr	r2, [r2, #16]
 800504c:	4311      	orrs	r1, r2
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	6992      	ldr	r2, [r2, #24]
 8005052:	430a      	orrs	r2, r1
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	4619      	mov	r1, r3
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ff7c 	bl	8004f5e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff ff89 	bl	8004f84 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a30      	ldr	r2, [pc, #192]	; (8005138 <LL_USART_Init+0x120>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d104      	bne.n	8005084 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800507a:	2003      	movs	r0, #3
 800507c:	f7ff fbda 	bl	8004834 <LL_RCC_GetUSARTClockFreq>
 8005080:	60b8      	str	r0, [r7, #8]
 8005082:	e041      	b.n	8005108 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a2d      	ldr	r2, [pc, #180]	; (800513c <LL_USART_Init+0x124>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d104      	bne.n	8005096 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800508c:	200c      	movs	r0, #12
 800508e:	f7ff fbd1 	bl	8004834 <LL_RCC_GetUSARTClockFreq>
 8005092:	60b8      	str	r0, [r7, #8]
 8005094:	e038      	b.n	8005108 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART3)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a29      	ldr	r2, [pc, #164]	; (8005140 <LL_USART_Init+0x128>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d104      	bne.n	80050a8 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800509e:	2030      	movs	r0, #48	; 0x30
 80050a0:	f7ff fbc8 	bl	8004834 <LL_RCC_GetUSARTClockFreq>
 80050a4:	60b8      	str	r0, [r7, #8]
 80050a6:	e02f      	b.n	8005108 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART4)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a26      	ldr	r2, [pc, #152]	; (8005144 <LL_USART_Init+0x12c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d104      	bne.n	80050ba <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80050b0:	20c0      	movs	r0, #192	; 0xc0
 80050b2:	f7ff fcc7 	bl	8004a44 <LL_RCC_GetUARTClockFreq>
 80050b6:	60b8      	str	r0, [r7, #8]
 80050b8:	e026      	b.n	8005108 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART5)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a22      	ldr	r2, [pc, #136]	; (8005148 <LL_USART_Init+0x130>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d105      	bne.n	80050ce <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80050c2:	f44f 7040 	mov.w	r0, #768	; 0x300
 80050c6:	f7ff fcbd 	bl	8004a44 <LL_RCC_GetUARTClockFreq>
 80050ca:	60b8      	str	r0, [r7, #8]
 80050cc:	e01c      	b.n	8005108 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART6)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1e      	ldr	r2, [pc, #120]	; (800514c <LL_USART_Init+0x134>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d105      	bne.n	80050e2 <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 80050d6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80050da:	f7ff fbab 	bl	8004834 <LL_RCC_GetUSARTClockFreq>
 80050de:	60b8      	str	r0, [r7, #8]
 80050e0:	e012      	b.n	8005108 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART7)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a1a      	ldr	r2, [pc, #104]	; (8005150 <LL_USART_Init+0x138>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d105      	bne.n	80050f6 <LL_USART_Init+0xde>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 80050ea:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80050ee:	f7ff fca9 	bl	8004a44 <LL_RCC_GetUARTClockFreq>
 80050f2:	60b8      	str	r0, [r7, #8]
 80050f4:	e008      	b.n	8005108 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART8)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a16      	ldr	r2, [pc, #88]	; (8005154 <LL_USART_Init+0x13c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d104      	bne.n	8005108 <LL_USART_Init+0xf0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 80050fe:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8005102:	f7ff fc9f 	bl	8004a44 <LL_RCC_GetUARTClockFreq>
 8005106:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00d      	beq.n	800512a <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff ff40 	bl	8004faa <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800512a:	7bfb      	ldrb	r3, [r7, #15]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	efff69f3 	.word	0xefff69f3
 8005138:	40011000 	.word	0x40011000
 800513c:	40004400 	.word	0x40004400
 8005140:	40004800 	.word	0x40004800
 8005144:	40004c00 	.word	0x40004c00
 8005148:	40005000 	.word	0x40005000
 800514c:	40011400 	.word	0x40011400
 8005150:	40007800 	.word	0x40007800
 8005154:	40007c00 	.word	0x40007c00

08005158 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005158:	b084      	sub	sp, #16
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	f107 001c 	add.w	r0, r7, #28
 8005166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	2b01      	cmp	r3, #1
 800516e:	d120      	bne.n	80051b2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	4b20      	ldr	r3, [pc, #128]	; (8005204 <USB_CoreInit+0xac>)
 8005182:	4013      	ands	r3, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005196:	2b01      	cmp	r3, #1
 8005198:	d105      	bne.n	80051a6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fa96 	bl	80056d8 <USB_CoreReset>
 80051ac:	4603      	mov	r3, r0
 80051ae:	73fb      	strb	r3, [r7, #15]
 80051b0:	e010      	b.n	80051d4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fa8a 	bl	80056d8 <USB_CoreReset>
 80051c4:	4603      	mov	r3, r0
 80051c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d10b      	bne.n	80051f2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f043 0206 	orr.w	r2, r3, #6
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f043 0220 	orr.w	r2, r3, #32
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051fe:	b004      	add	sp, #16
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	ffbdffbf 	.word	0xffbdffbf

08005208 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f023 0201 	bic.w	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d115      	bne.n	8005278 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005258:	2001      	movs	r0, #1
 800525a:	f7fc ff65 	bl	8002128 <HAL_Delay>
      ms++;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3301      	adds	r3, #1
 8005262:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fa29 	bl	80056bc <USB_GetMode>
 800526a:	4603      	mov	r3, r0
 800526c:	2b01      	cmp	r3, #1
 800526e:	d01e      	beq.n	80052ae <USB_SetCurrentMode+0x84>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b31      	cmp	r3, #49	; 0x31
 8005274:	d9f0      	bls.n	8005258 <USB_SetCurrentMode+0x2e>
 8005276:	e01a      	b.n	80052ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d115      	bne.n	80052aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800528a:	2001      	movs	r0, #1
 800528c:	f7fc ff4c 	bl	8002128 <HAL_Delay>
      ms++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3301      	adds	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fa10 	bl	80056bc <USB_GetMode>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <USB_SetCurrentMode+0x84>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b31      	cmp	r3, #49	; 0x31
 80052a6:	d9f0      	bls.n	800528a <USB_SetCurrentMode+0x60>
 80052a8:	e001      	b.n	80052ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e005      	b.n	80052ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b32      	cmp	r3, #50	; 0x32
 80052b2:	d101      	bne.n	80052b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052c4:	b084      	sub	sp, #16
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b086      	sub	sp, #24
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052de:	2300      	movs	r3, #0
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	e009      	b.n	80052f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	3340      	adds	r3, #64	; 0x40
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	2200      	movs	r2, #0
 80052f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	3301      	adds	r3, #1
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b0e      	cmp	r3, #14
 80052fc:	d9f2      	bls.n	80052e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d11c      	bne.n	800533e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005312:	f043 0302 	orr.w	r3, r3, #2
 8005316:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	e005      	b.n	800534a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005350:	461a      	mov	r2, r3
 8005352:	2300      	movs	r3, #0
 8005354:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535c:	4619      	mov	r1, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005364:	461a      	mov	r2, r3
 8005366:	680b      	ldr	r3, [r1, #0]
 8005368:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	2b01      	cmp	r3, #1
 800536e:	d10c      	bne.n	800538a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d104      	bne.n	8005380 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005376:	2100      	movs	r1, #0
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f965 	bl	8005648 <USB_SetDevSpeed>
 800537e:	e008      	b.n	8005392 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005380:	2101      	movs	r1, #1
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f960 	bl	8005648 <USB_SetDevSpeed>
 8005388:	e003      	b.n	8005392 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800538a:	2103      	movs	r1, #3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f95b 	bl	8005648 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005392:	2110      	movs	r1, #16
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f8f3 	bl	8005580 <USB_FlushTxFifo>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f91f 	bl	80055e8 <USB_FlushRxFifo>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ba:	461a      	mov	r2, r3
 80053bc:	2300      	movs	r3, #0
 80053be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c6:	461a      	mov	r2, r3
 80053c8:	2300      	movs	r3, #0
 80053ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	461a      	mov	r2, r3
 80053d4:	2300      	movs	r3, #0
 80053d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	e043      	b.n	8005466 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f4:	d118      	bne.n	8005428 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005408:	461a      	mov	r2, r3
 800540a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	e013      	b.n	800543a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	461a      	mov	r2, r3
 8005420:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	e008      	b.n	800543a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005434:	461a      	mov	r2, r3
 8005436:	2300      	movs	r3, #0
 8005438:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005446:	461a      	mov	r2, r3
 8005448:	2300      	movs	r3, #0
 800544a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005458:	461a      	mov	r2, r3
 800545a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800545e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	3301      	adds	r3, #1
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	429a      	cmp	r2, r3
 800546c:	d3b7      	bcc.n	80053de <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800546e:	2300      	movs	r3, #0
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	e043      	b.n	80054fc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800548a:	d118      	bne.n	80054be <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10a      	bne.n	80054a8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549e:	461a      	mov	r2, r3
 80054a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	e013      	b.n	80054d0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	461a      	mov	r2, r3
 80054b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	e008      	b.n	80054d0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ca:	461a      	mov	r2, r3
 80054cc:	2300      	movs	r3, #0
 80054ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054dc:	461a      	mov	r2, r3
 80054de:	2300      	movs	r3, #0
 80054e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ee:	461a      	mov	r2, r3
 80054f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	3301      	adds	r3, #1
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	429a      	cmp	r2, r3
 8005502:	d3b7      	bcc.n	8005474 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005512:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005516:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005524:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	2b00      	cmp	r3, #0
 800552a:	d105      	bne.n	8005538 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f043 0210 	orr.w	r2, r3, #16
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699a      	ldr	r2, [r3, #24]
 800553c:	4b0e      	ldr	r3, [pc, #56]	; (8005578 <USB_DevInit+0x2b4>)
 800553e:	4313      	orrs	r3, r2
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005546:	2b00      	cmp	r3, #0
 8005548:	d005      	beq.n	8005556 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f043 0208 	orr.w	r2, r3, #8
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005558:	2b01      	cmp	r3, #1
 800555a:	d105      	bne.n	8005568 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	4b06      	ldr	r3, [pc, #24]	; (800557c <USB_DevInit+0x2b8>)
 8005562:	4313      	orrs	r3, r2
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005574:	b004      	add	sp, #16
 8005576:	4770      	bx	lr
 8005578:	803c3800 	.word	0x803c3800
 800557c:	40000004 	.word	0x40000004

08005580 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3301      	adds	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <USB_FlushTxFifo+0x64>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d901      	bls.n	80055a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e01b      	b.n	80055d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	daf2      	bge.n	800558e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	019b      	lsls	r3, r3, #6
 80055b0:	f043 0220 	orr.w	r2, r3, #32
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3301      	adds	r3, #1
 80055bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <USB_FlushTxFifo+0x64>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e006      	b.n	80055d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d0f0      	beq.n	80055b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	00030d40 	.word	0x00030d40

080055e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3301      	adds	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a11      	ldr	r2, [pc, #68]	; (8005644 <USB_FlushRxFifo+0x5c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e018      	b.n	8005638 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	daf2      	bge.n	80055f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2210      	movs	r2, #16
 8005616:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4a08      	ldr	r2, [pc, #32]	; (8005644 <USB_FlushRxFifo+0x5c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e006      	b.n	8005638 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0310 	and.w	r3, r3, #16
 8005632:	2b10      	cmp	r3, #16
 8005634:	d0f0      	beq.n	8005618 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	00030d40 	.word	0x00030d40

08005648 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	68f9      	ldr	r1, [r7, #12]
 8005664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005668:	4313      	orrs	r3, r2
 800566a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800567a:	b480      	push	{r7}
 800567c:	b085      	sub	sp, #20
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005694:	f023 0303 	bic.w	r3, r3, #3
 8005698:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a8:	f043 0302 	orr.w	r3, r3, #2
 80056ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	f003 0301 	and.w	r3, r3, #1
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3301      	adds	r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4a13      	ldr	r2, [pc, #76]	; (800573c <USB_CoreReset+0x64>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e01b      	b.n	800572e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	daf2      	bge.n	80056e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f043 0201 	orr.w	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3301      	adds	r3, #1
 8005712:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4a09      	ldr	r2, [pc, #36]	; (800573c <USB_CoreReset+0x64>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d901      	bls.n	8005720 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e006      	b.n	800572e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b01      	cmp	r3, #1
 800572a:	d0f0      	beq.n	800570e <USB_CoreReset+0x36>

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	00030d40 	.word	0x00030d40

08005740 <lstm_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool lstm_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_lstm_activations_map, 1, params)) {
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	2101      	movs	r1, #1
 800574e:	481c      	ldr	r0, [pc, #112]	; (80057c0 <lstm_configure_activations+0x80>)
 8005750:	f000 fb1e 	bl	8005d90 <ai_platform_get_activations_map>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d027      	beq.n	80057aa <lstm_configure_activations+0x6a>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_lstm_activations_map[0] + 0);
 800575a:	4b19      	ldr	r3, [pc, #100]	; (80057c0 <lstm_configure_activations+0x80>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a19      	ldr	r2, [pc, #100]	; (80057c4 <lstm_configure_activations+0x84>)
 8005760:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_lstm_activations_map[0] + 0);
 8005762:	4b17      	ldr	r3, [pc, #92]	; (80057c0 <lstm_configure_activations+0x80>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a17      	ldr	r2, [pc, #92]	; (80057c4 <lstm_configure_activations+0x84>)
 8005768:	60d3      	str	r3, [r2, #12]
    
    lstm_24_scratch0_array.data = AI_PTR(g_lstm_activations_map[0] + 48);
 800576a:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <lstm_configure_activations+0x80>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3330      	adds	r3, #48	; 0x30
 8005770:	4a15      	ldr	r2, [pc, #84]	; (80057c8 <lstm_configure_activations+0x88>)
 8005772:	6093      	str	r3, [r2, #8]
    lstm_24_scratch0_array.data_start = AI_PTR(g_lstm_activations_map[0] + 48);
 8005774:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <lstm_configure_activations+0x80>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3330      	adds	r3, #48	; 0x30
 800577a:	4a13      	ldr	r2, [pc, #76]	; (80057c8 <lstm_configure_activations+0x88>)
 800577c:	60d3      	str	r3, [r2, #12]
    
    lstm_24_output0_array.data = AI_PTR(g_lstm_activations_map[0] + 328);
 800577e:	4b10      	ldr	r3, [pc, #64]	; (80057c0 <lstm_configure_activations+0x80>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8005786:	4a11      	ldr	r2, [pc, #68]	; (80057cc <lstm_configure_activations+0x8c>)
 8005788:	6093      	str	r3, [r2, #8]
    lstm_24_output0_array.data_start = AI_PTR(g_lstm_activations_map[0] + 328);
 800578a:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <lstm_configure_activations+0x80>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8005792:	4a0e      	ldr	r2, [pc, #56]	; (80057cc <lstm_configure_activations+0x8c>)
 8005794:	60d3      	str	r3, [r2, #12]
    
    dense_24_dense_output_array.data = AI_PTR(g_lstm_activations_map[0] + 0);
 8005796:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <lstm_configure_activations+0x80>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a0d      	ldr	r2, [pc, #52]	; (80057d0 <lstm_configure_activations+0x90>)
 800579c:	6093      	str	r3, [r2, #8]
    dense_24_dense_output_array.data_start = AI_PTR(g_lstm_activations_map[0] + 0);
 800579e:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <lstm_configure_activations+0x80>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a0b      	ldr	r2, [pc, #44]	; (80057d0 <lstm_configure_activations+0x90>)
 80057a4:	60d3      	str	r3, [r2, #12]
    
    return true;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e005      	b.n	80057b6 <lstm_configure_activations+0x76>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80057aa:	2213      	movs	r2, #19
 80057ac:	2130      	movs	r1, #48	; 0x30
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fef6 	bl	80065a0 <ai_platform_network_set_error>
  return false;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000ee8 	.word	0x20000ee8
 80057c4:	20000018 	.word	0x20000018
 80057c8:	200000a8 	.word	0x200000a8
 80057cc:	20000028 	.word	0x20000028
 80057d0:	20000038 	.word	0x20000038

080057d4 <lstm_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool lstm_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_lstm_weights_map, 1, params)) {
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	2101      	movs	r1, #1
 80057e2:	483d      	ldr	r0, [pc, #244]	; (80058d8 <lstm_configure_weights+0x104>)
 80057e4:	f000 fa7c 	bl	8005ce0 <ai_platform_get_weights_map>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d069      	beq.n	80058c2 <lstm_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    lstm_24_kernel_array.format |= AI_FMT_FLAG_CONST;
 80057ee:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <lstm_configure_weights+0x108>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057f6:	4a39      	ldr	r2, [pc, #228]	; (80058dc <lstm_configure_weights+0x108>)
 80057f8:	6013      	str	r3, [r2, #0]
    lstm_24_kernel_array.data = AI_PTR(g_lstm_weights_map[0] + 0);
 80057fa:	4b37      	ldr	r3, [pc, #220]	; (80058d8 <lstm_configure_weights+0x104>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a37      	ldr	r2, [pc, #220]	; (80058dc <lstm_configure_weights+0x108>)
 8005800:	6093      	str	r3, [r2, #8]
    lstm_24_kernel_array.data_start = AI_PTR(g_lstm_weights_map[0] + 0);
 8005802:	4b35      	ldr	r3, [pc, #212]	; (80058d8 <lstm_configure_weights+0x104>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a35      	ldr	r2, [pc, #212]	; (80058dc <lstm_configure_weights+0x108>)
 8005808:	60d3      	str	r3, [r2, #12]
    
    lstm_24_recurrent_array.format |= AI_FMT_FLAG_CONST;
 800580a:	4b35      	ldr	r3, [pc, #212]	; (80058e0 <lstm_configure_weights+0x10c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005812:	4a33      	ldr	r2, [pc, #204]	; (80058e0 <lstm_configure_weights+0x10c>)
 8005814:	6013      	str	r3, [r2, #0]
    lstm_24_recurrent_array.data = AI_PTR(g_lstm_weights_map[0] + 480);
 8005816:	4b30      	ldr	r3, [pc, #192]	; (80058d8 <lstm_configure_weights+0x104>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800581e:	4a30      	ldr	r2, [pc, #192]	; (80058e0 <lstm_configure_weights+0x10c>)
 8005820:	6093      	str	r3, [r2, #8]
    lstm_24_recurrent_array.data_start = AI_PTR(g_lstm_weights_map[0] + 480);
 8005822:	4b2d      	ldr	r3, [pc, #180]	; (80058d8 <lstm_configure_weights+0x104>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800582a:	4a2d      	ldr	r2, [pc, #180]	; (80058e0 <lstm_configure_weights+0x10c>)
 800582c:	60d3      	str	r3, [r2, #12]
    
    lstm_24_peephole_array.format |= AI_FMT_FLAG_CONST;
 800582e:	4b2d      	ldr	r3, [pc, #180]	; (80058e4 <lstm_configure_weights+0x110>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005836:	4a2b      	ldr	r2, [pc, #172]	; (80058e4 <lstm_configure_weights+0x110>)
 8005838:	6013      	str	r3, [r2, #0]
    lstm_24_peephole_array.data = AI_PTR(g_lstm_weights_map[0] + 2080);
 800583a:	4b27      	ldr	r3, [pc, #156]	; (80058d8 <lstm_configure_weights+0x104>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8005842:	4a28      	ldr	r2, [pc, #160]	; (80058e4 <lstm_configure_weights+0x110>)
 8005844:	6093      	str	r3, [r2, #8]
    lstm_24_peephole_array.data_start = AI_PTR(g_lstm_weights_map[0] + 2080);
 8005846:	4b24      	ldr	r3, [pc, #144]	; (80058d8 <lstm_configure_weights+0x104>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800584e:	4a25      	ldr	r2, [pc, #148]	; (80058e4 <lstm_configure_weights+0x110>)
 8005850:	60d3      	str	r3, [r2, #12]
    
    lstm_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8005852:	4b25      	ldr	r3, [pc, #148]	; (80058e8 <lstm_configure_weights+0x114>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800585a:	4a23      	ldr	r2, [pc, #140]	; (80058e8 <lstm_configure_weights+0x114>)
 800585c:	6013      	str	r3, [r2, #0]
    lstm_24_bias_array.data = AI_PTR(g_lstm_weights_map[0] + 2200);
 800585e:	4b1e      	ldr	r3, [pc, #120]	; (80058d8 <lstm_configure_weights+0x104>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005866:	4a20      	ldr	r2, [pc, #128]	; (80058e8 <lstm_configure_weights+0x114>)
 8005868:	6093      	str	r3, [r2, #8]
    lstm_24_bias_array.data_start = AI_PTR(g_lstm_weights_map[0] + 2200);
 800586a:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <lstm_configure_weights+0x104>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005872:	4a1d      	ldr	r2, [pc, #116]	; (80058e8 <lstm_configure_weights+0x114>)
 8005874:	60d3      	str	r3, [r2, #12]
    
    dense_24_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8005876:	4b1d      	ldr	r3, [pc, #116]	; (80058ec <lstm_configure_weights+0x118>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800587e:	4a1b      	ldr	r2, [pc, #108]	; (80058ec <lstm_configure_weights+0x118>)
 8005880:	6013      	str	r3, [r2, #0]
    dense_24_dense_weights_array.data = AI_PTR(g_lstm_weights_map[0] + 2360);
 8005882:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <lstm_configure_weights+0x104>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800588a:	4a18      	ldr	r2, [pc, #96]	; (80058ec <lstm_configure_weights+0x118>)
 800588c:	6093      	str	r3, [r2, #8]
    dense_24_dense_weights_array.data_start = AI_PTR(g_lstm_weights_map[0] + 2360);
 800588e:	4b12      	ldr	r3, [pc, #72]	; (80058d8 <lstm_configure_weights+0x104>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8005896:	4a15      	ldr	r2, [pc, #84]	; (80058ec <lstm_configure_weights+0x118>)
 8005898:	60d3      	str	r3, [r2, #12]
    
    dense_24_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800589a:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <lstm_configure_weights+0x11c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a2:	4a13      	ldr	r2, [pc, #76]	; (80058f0 <lstm_configure_weights+0x11c>)
 80058a4:	6013      	str	r3, [r2, #0]
    dense_24_dense_bias_array.data = AI_PTR(g_lstm_weights_map[0] + 2400);
 80058a6:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <lstm_configure_weights+0x104>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 80058ae:	4a10      	ldr	r2, [pc, #64]	; (80058f0 <lstm_configure_weights+0x11c>)
 80058b0:	6093      	str	r3, [r2, #8]
    dense_24_dense_bias_array.data_start = AI_PTR(g_lstm_weights_map[0] + 2400);
 80058b2:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <lstm_configure_weights+0x104>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 80058ba:	4a0d      	ldr	r2, [pc, #52]	; (80058f0 <lstm_configure_weights+0x11c>)
 80058bc:	60d3      	str	r3, [r2, #12]
    
    return true;
 80058be:	2301      	movs	r3, #1
 80058c0:	e005      	b.n	80058ce <lstm_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80058c2:	2212      	movs	r2, #18
 80058c4:	2130      	movs	r1, #48	; 0x30
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fe6a 	bl	80065a0 <ai_platform_network_set_error>
  return false;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000eec 	.word	0x20000eec
 80058dc:	20000048 	.word	0x20000048
 80058e0:	20000058 	.word	0x20000058
 80058e4:	20000068 	.word	0x20000068
 80058e8:	20000078 	.word	0x20000078
 80058ec:	20000088 	.word	0x20000088
 80058f0:	20000098 	.word	0x20000098

080058f4 <ai_lstm_get_report>:


AI_API_ENTRY
ai_bool ai_lstm_get_report(
  ai_handle network, ai_network_report* report)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b0a2      	sub	sp, #136	; 0x88
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fcdc 	bl	80062bc <ai_platform_context_acquire>
 8005904:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

  if (report && net_ctx)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d047      	beq.n	800599e <ai_lstm_get_report+0xaa>
 800590e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005912:	2b00      	cmp	r3, #0
 8005914:	d043      	beq.n	800599e <ai_lstm_get_report+0xaa>
  {
    ai_network_report r = {
 8005916:	f107 0308 	add.w	r3, r7, #8
 800591a:	227c      	movs	r2, #124	; 0x7c
 800591c:	2100      	movs	r1, #0
 800591e:	4618      	mov	r0, r3
 8005920:	f004 ffee 	bl	800a900 <memset>
 8005924:	4b20      	ldr	r3, [pc, #128]	; (80059a8 <ai_lstm_get_report+0xb4>)
 8005926:	60bb      	str	r3, [r7, #8]
 8005928:	4b20      	ldr	r3, [pc, #128]	; (80059ac <ai_lstm_get_report+0xb8>)
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	4b20      	ldr	r3, [pc, #128]	; (80059b0 <ai_lstm_get_report+0xbc>)
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	4b20      	ldr	r3, [pc, #128]	; (80059b4 <ai_lstm_get_report+0xc0>)
 8005932:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_LSTM_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005934:	f000 fa9e 	bl	8005e74 <ai_platform_runtime_get_revision>
 8005938:	4603      	mov	r3, r0
    ai_network_report r = {
 800593a:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 800593c:	f000 fb14 	bl	8005f68 <ai_platform_runtime_get_version>
 8005940:	4603      	mov	r3, r0
 8005942:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 8005944:	4b1c      	ldr	r3, [pc, #112]	; (80059b8 <ai_lstm_get_report+0xc4>)
 8005946:	623b      	str	r3, [r7, #32]
 8005948:	2307      	movs	r3, #7
 800594a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800594e:	2302      	movs	r3, #2
 8005950:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8005954:	f000 fb96 	bl	8006084 <ai_platform_api_get_version>
 8005958:	4603      	mov	r3, r0
 800595a:	62fb      	str	r3, [r7, #44]	; 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800595c:	f000 fc20 	bl	80061a0 <ai_platform_interface_api_get_version>
 8005960:	4603      	mov	r3, r0
 8005962:	633b      	str	r3, [r7, #48]	; 0x30
    ai_network_report r = {
 8005964:	f640 1314 	movw	r3, #2324	; 0x914
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
 800596a:	4b14      	ldr	r3, [pc, #80]	; (80059bc <ai_lstm_get_report+0xc8>)
 800596c:	647b      	str	r3, [r7, #68]	; 0x44
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800596e:	f107 0308 	add.w	r3, r7, #8
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f001 f8f3 	bl	8006b60 <ai_platform_api_get_network_report>
 800597a:	4603      	mov	r3, r0
 800597c:	f083 0301 	eor.w	r3, r3, #1
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <ai_lstm_get_report+0x96>
 8005986:	2300      	movs	r3, #0
 8005988:	e00a      	b.n	80059a0 <ai_lstm_get_report+0xac>

    *report = r;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f107 0308 	add.w	r3, r7, #8
 8005992:	227c      	movs	r2, #124	; 0x7c
 8005994:	4619      	mov	r1, r3
 8005996:	f004 ffa5 	bl	800a8e4 <memcpy>
    return true;
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <ai_lstm_get_report+0xac>
  }
  return false;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3788      	adds	r7, #136	; 0x88
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	0800f424 	.word	0x0800f424
 80059ac:	0800f42c 	.word	0x0800f42c
 80059b0:	0800f450 	.word	0x0800f450
 80059b4:	0800f46c 	.word	0x0800f46c
 80059b8:	0800f484 	.word	0x0800f484
 80059bc:	a1facade 	.word	0xa1facade

080059c0 <ai_lstm_get_error>:

AI_API_ENTRY
ai_error ai_lstm_get_error(ai_handle network)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fcf7 	bl	80063bc <ai_platform_network_get_error>
 80059ce:	4603      	mov	r3, r0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <ai_lstm_create>:

AI_API_ENTRY
ai_error ai_lstm_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af02      	add	r7, sp, #8
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80059e2:	2300      	movs	r3, #0
 80059e4:	9301      	str	r3, [sp, #4]
 80059e6:	2305      	movs	r3, #5
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	2301      	movs	r3, #1
 80059ec:	4a04      	ldr	r2, [pc, #16]	; (8005a00 <ai_lstm_create+0x28>)
 80059ee:	6839      	ldr	r1, [r7, #0]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f001 fccb 	bl	800738c <ai_platform_network_create>
 80059f6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	200004a0 	.word	0x200004a0

08005a04 <ai_lstm_create_and_init>:

AI_API_ENTRY
ai_error ai_lstm_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b096      	sub	sp, #88	; 0x58
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_lstm_create(network, AI_LSTM_DATA_CONFIG);
 8005a10:	2100      	movs	r1, #0
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f7ff ffe0 	bl	80059d8 <ai_lstm_create>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8005a1c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <ai_lstm_create_and_init+0x24>
        return err;
 8005a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a26:	e05d      	b.n	8005ae4 <ai_lstm_create_and_init+0xe0>
    if (ai_lstm_data_params_get(&params) != true) {
 8005a28:	f107 0314 	add.w	r3, r7, #20
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 f8dd 	bl	8005bec <ai_lstm_data_params_get>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f083 0301 	eor.w	r3, r3, #1
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d008      	beq.n	8005a50 <ai_lstm_create_and_init+0x4c>
        err = ai_lstm_get_error(*network);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff ffbc 	bl	80059c0 <ai_lstm_get_error>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8005a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a4e:	e049      	b.n	8005ae4 <ai_lstm_create_and_init+0xe0>
    }
#if defined(AI_LSTM_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d016      	beq.n	8005a84 <ai_lstm_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005a56:	2300      	movs	r3, #0
 8005a58:	657b      	str	r3, [r7, #84]	; 0x54
 8005a5a:	e00e      	b.n	8005a7a <ai_lstm_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005a5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	4413      	add	r3, r2
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	f107 0314 	add.w	r3, r7, #20
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 f922 	bl	8005cb8 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a76:	3301      	adds	r3, #1
 8005a78:	657b      	str	r3, [r7, #84]	; 0x54
 8005a7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a80:	4293      	cmp	r3, r2
 8005a82:	dbeb      	blt.n	8005a5c <ai_lstm_create_and_init+0x58>
    }
#endif
#if defined(AI_LSTM_DATA_WEIGHTS_COUNT)
    if (weights) {
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d016      	beq.n	8005ab8 <ai_lstm_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	653b      	str	r3, [r7, #80]	; 0x50
 8005a8e:	e00e      	b.n	8005aae <ai_lstm_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8005a90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	4413      	add	r3, r2
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	f107 0314 	add.w	r3, r7, #20
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 f908 	bl	8005cb8 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aaa:	3301      	adds	r3, #1
 8005aac:	653b      	str	r3, [r7, #80]	; 0x50
 8005aae:	8b7b      	ldrh	r3, [r7, #26]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	dbeb      	blt.n	8005a90 <ai_lstm_create_and_init+0x8c>
    }
#endif
    if (ai_lstm_init(*network, &params) != true) {
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f107 0214 	add.w	r2, r7, #20
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 f846 	bl	8005b54 <ai_lstm_init>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f083 0301 	eor.w	r3, r3, #1
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d006      	beq.n	8005ae2 <ai_lstm_create_and_init+0xde>
        err = ai_lstm_get_error(*network);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff ff71 	bl	80059c0 <ai_lstm_get_error>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8005ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3758      	adds	r7, #88	; 0x58
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <ai_lstm_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_lstm_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d104      	bne.n	8005b06 <ai_lstm_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <ai_lstm_inputs_get+0x2c>)
 8005afe:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a06      	ldr	r2, [pc, #24]	; (8005b1c <ai_lstm_inputs_get+0x30>)
 8005b04:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fd4f 	bl	80065ac <ai_platform_inputs_get>
 8005b0e:	4603      	mov	r3, r0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	200004a0 	.word	0x200004a0
 8005b1c:	a1c00100 	.word	0xa1c00100

08005b20 <ai_lstm_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_lstm_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d104      	bne.n	8005b3a <ai_lstm_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005b30:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <ai_lstm_outputs_get+0x2c>)
 8005b32:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a06      	ldr	r2, [pc, #24]	; (8005b50 <ai_lstm_outputs_get+0x30>)
 8005b38:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fea5 	bl	800688c <ai_platform_outputs_get>
 8005b42:	4603      	mov	r3, r0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	200004a0 	.word	0x200004a0
 8005b50:	a1c00100 	.word	0xa1c00100

08005b54 <ai_lstm_init>:
}

AI_API_ENTRY
ai_bool ai_lstm_init(
  ai_handle network, const ai_network_params* params)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005b5e:	6839      	ldr	r1, [r7, #0]
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f001 fdc7 	bl	80076f4 <ai_platform_network_init>
 8005b66:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <ai_lstm_init+0x1e>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e028      	b.n	8005bc4 <ai_lstm_init+0x70>

  ai_bool ok = true;
 8005b72:	2301      	movs	r3, #1
 8005b74:	72fb      	strb	r3, [r7, #11]
  ok &= lstm_configure_weights(net_ctx, params);
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff fe2b 	bl	80057d4 <lstm_configure_weights>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	461a      	mov	r2, r3
 8005b82:	7afb      	ldrb	r3, [r7, #11]
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bf14      	ite	ne
 8005b8a:	2301      	movne	r3, #1
 8005b8c:	2300      	moveq	r3, #0
 8005b8e:	72fb      	strb	r3, [r7, #11]
  ok &= lstm_configure_activations(net_ctx, params);
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7ff fdd4 	bl	8005740 <lstm_configure_activations>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	7afb      	ldrb	r3, [r7, #11]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	bf14      	ite	ne
 8005ba4:	2301      	movne	r3, #1
 8005ba6:	2300      	moveq	r3, #0
 8005ba8:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f001 ff1e 	bl	80079ec <ai_platform_network_post_init>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	7afb      	ldrb	r3, [r7, #11]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	bf14      	ite	ne
 8005bbc:	2301      	movne	r3, #1
 8005bbe:	2300      	moveq	r3, #0
 8005bc0:	72fb      	strb	r3, [r7, #11]

  return ok;
 8005bc2:	7afb      	ldrb	r3, [r7, #11]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <ai_lstm_run>:


AI_API_ENTRY
ai_i32 ai_lstm_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f002 f811 	bl	8007c04 <ai_platform_network_process>
 8005be2:	4603      	mov	r3, r0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <ai_lstm_data_params_get>:
 * @ingroup lstm_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_lstm_data_params_get(ai_network_params* params)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <ai_lstm_data_params_get+0x12>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e016      	b.n	8005c2c <ai_lstm_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8005bfe:	4a0d      	ldr	r2, [pc, #52]	; (8005c34 <ai_lstm_data_params_get+0x48>)
 8005c00:	f107 0310 	add.w	r3, r7, #16
 8005c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c08:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_LSTM_DATA_ACTIVATIONS_COUNT, g_lstm_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005c0c:	4a0a      	ldr	r2, [pc, #40]	; (8005c38 <ai_lstm_data_params_get+0x4c>)
 8005c0e:	f107 0308 	add.w	r3, r7, #8
 8005c12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c16:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_LSTM_DATA_WEIGHTS_COUNT, g_lstm_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005c1a:	f107 0210 	add.w	r2, r7, #16
 8005c1e:	f107 0308 	add.w	r3, r7, #8
 8005c22:	4619      	mov	r1, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f90b 	bl	8005e40 <ai_platform_bind_network_params>
 8005c2a:	4603      	mov	r3, r0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	0800f4a8 	.word	0x0800f4a8
 8005c38:	0800f4b0 	.word	0x0800f4b0

08005c3c <ai_buffer_get_size>:
 8005c3c:	b368      	cbz	r0, 8005c9a <ai_buffer_get_size+0x5e>
 8005c3e:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <ai_buffer_get_size+0x60>)
 8005c40:	4a17      	ldr	r2, [pc, #92]	; (8005ca0 <ai_buffer_get_size+0x64>)
 8005c42:	b410      	push	{r4}
 8005c44:	6804      	ldr	r4, [r0, #0]
 8005c46:	4023      	ands	r3, r4
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d123      	bne.n	8005c94 <ai_buffer_get_size+0x58>
 8005c4c:	b311      	cbz	r1, 8005c94 <ai_buffer_get_size+0x58>
 8005c4e:	6984      	ldr	r4, [r0, #24]
 8005c50:	6862      	ldr	r2, [r4, #4]
 8005c52:	321f      	adds	r2, #31
 8005c54:	f022 021f 	bic.w	r2, r2, #31
 8005c58:	7d03      	ldrb	r3, [r0, #20]
 8005c5a:	6941      	ldr	r1, [r0, #20]
 8005c5c:	f1a3 0301 	sub.w	r3, r3, #1
 8005c60:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8005c64:	fab3 f383 	clz	r3, r3
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005c6e:	da0c      	bge.n	8005c8a <ai_buffer_get_size+0x4e>
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d103      	bne.n	8005c7c <ai_buffer_get_size+0x40>
 8005c74:	2802      	cmp	r0, #2
 8005c76:	f04f 0302 	mov.w	r3, #2
 8005c7a:	d006      	beq.n	8005c8a <ai_buffer_get_size+0x4e>
 8005c7c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005c80:	3301      	adds	r3, #1
 8005c82:	4298      	cmp	r0, r3
 8005c84:	fb01 f202 	mul.w	r2, r1, r2
 8005c88:	d1f2      	bne.n	8005c70 <ai_buffer_get_size+0x34>
 8005c8a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	6984      	ldr	r4, [r0, #24]
 8005c96:	6862      	ldr	r2, [r4, #4]
 8005c98:	e7de      	b.n	8005c58 <ai_buffer_get_size+0x1c>
 8005c9a:	4770      	bx	lr
 8005c9c:	017fffff 	.word	0x017fffff
 8005ca0:	000400c0 	.word	0x000400c0

08005ca4 <ai_buffer_array_sane>:
 8005ca4:	b138      	cbz	r0, 8005cb6 <ai_buffer_array_sane+0x12>
 8005ca6:	6843      	ldr	r3, [r0, #4]
 8005ca8:	b123      	cbz	r3, 8005cb4 <ai_buffer_array_sane+0x10>
 8005caa:	8840      	ldrh	r0, [r0, #2]
 8005cac:	3800      	subs	r0, #0
 8005cae:	bf18      	it	ne
 8005cb0:	2001      	movne	r0, #1
 8005cb2:	4770      	bx	lr
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	4770      	bx	lr

08005cb8 <ai_buffer_array_item_set_address>:
 8005cb8:	b150      	cbz	r0, 8005cd0 <ai_buffer_array_item_set_address+0x18>
 8005cba:	6843      	ldr	r3, [r0, #4]
 8005cbc:	b14b      	cbz	r3, 8005cd2 <ai_buffer_array_item_set_address+0x1a>
 8005cbe:	8840      	ldrh	r0, [r0, #2]
 8005cc0:	b900      	cbnz	r0, 8005cc4 <ai_buffer_array_item_set_address+0xc>
 8005cc2:	4770      	bx	lr
 8005cc4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005cc8:	2001      	movs	r0, #1
 8005cca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005cce:	604a      	str	r2, [r1, #4]
 8005cd0:	4770      	bx	lr
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop

08005cd8 <_ai_platform_acquire_crc>:
 8005cd8:	2001      	movs	r0, #1
 8005cda:	4770      	bx	lr

08005cdc <_ai_platform_release_crc>:
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop

08005ce0 <ai_platform_get_weights_map>:
 8005ce0:	2900      	cmp	r1, #0
 8005ce2:	bf18      	it	ne
 8005ce4:	2800      	cmpne	r0, #0
 8005ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce8:	bf0c      	ite	eq
 8005cea:	2401      	moveq	r4, #1
 8005cec:	2400      	movne	r4, #0
 8005cee:	2a00      	cmp	r2, #0
 8005cf0:	bf08      	it	eq
 8005cf2:	f044 0401 	orreq.w	r4, r4, #1
 8005cf6:	b114      	cbz	r4, 8005cfe <ai_platform_get_weights_map+0x1e>
 8005cf8:	2400      	movs	r4, #0
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cfe:	4616      	mov	r6, r2
 8005d00:	4b22      	ldr	r3, [pc, #136]	; (8005d8c <ai_platform_get_weights_map+0xac>)
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	4605      	mov	r5, r0
 8005d06:	460f      	mov	r7, r1
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d022      	beq.n	8005d52 <ai_platform_get_weights_map+0x72>
 8005d0c:	6870      	ldr	r0, [r6, #4]
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d0f2      	beq.n	8005cf8 <ai_platform_get_weights_map+0x18>
 8005d12:	6806      	ldr	r6, [r0, #0]
 8005d14:	429e      	cmp	r6, r3
 8005d16:	d006      	beq.n	8005d26 <ai_platform_get_weights_map+0x46>
 8005d18:	f1a1 0401 	sub.w	r4, r1, #1
 8005d1c:	6028      	str	r0, [r5, #0]
 8005d1e:	fab4 f484 	clz	r4, r4
 8005d22:	0964      	lsrs	r4, r4, #5
 8005d24:	e7e9      	b.n	8005cfa <ai_platform_get_weights_map+0x1a>
 8005d26:	3d04      	subs	r5, #4
 8005d28:	4602      	mov	r2, r0
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	e000      	b.n	8005d30 <ai_platform_get_weights_map+0x50>
 8005d2e:	4619      	mov	r1, r3
 8005d30:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005d34:	42b3      	cmp	r3, r6
 8005d36:	d025      	beq.n	8005d84 <ai_platform_get_weights_map+0xa4>
 8005d38:	f845 3f04 	str.w	r3, [r5, #4]!
 8005d3c:	1c4b      	adds	r3, r1, #1
 8005d3e:	429f      	cmp	r7, r3
 8005d40:	d8f5      	bhi.n	8005d2e <ai_platform_get_weights_map+0x4e>
 8005d42:	d1da      	bne.n	8005cfa <ai_platform_get_weights_map+0x1a>
 8005d44:	3102      	adds	r1, #2
 8005d46:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8005d4a:	42b3      	cmp	r3, r6
 8005d4c:	d1d5      	bne.n	8005cfa <ai_platform_get_weights_map+0x1a>
 8005d4e:	2401      	movs	r4, #1
 8005d50:	e7d3      	b.n	8005cfa <ai_platform_get_weights_map+0x1a>
 8005d52:	1d30      	adds	r0, r6, #4
 8005d54:	f7ff ffa6 	bl	8005ca4 <ai_buffer_array_sane>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d0cd      	beq.n	8005cf8 <ai_platform_get_weights_map+0x18>
 8005d5c:	88f3      	ldrh	r3, [r6, #6]
 8005d5e:	429f      	cmp	r7, r3
 8005d60:	d1ca      	bne.n	8005cf8 <ai_platform_get_weights_map+0x18>
 8005d62:	3d04      	subs	r5, #4
 8005d64:	4622      	mov	r2, r4
 8005d66:	68b3      	ldr	r3, [r6, #8]
 8005d68:	4423      	add	r3, r4
 8005d6a:	341c      	adds	r4, #28
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	b123      	cbz	r3, 8005d7a <ai_platform_get_weights_map+0x9a>
 8005d70:	3201      	adds	r2, #1
 8005d72:	f845 3f04 	str.w	r3, [r5, #4]!
 8005d76:	4297      	cmp	r7, r2
 8005d78:	d8f5      	bhi.n	8005d66 <ai_platform_get_weights_map+0x86>
 8005d7a:	1abc      	subs	r4, r7, r2
 8005d7c:	fab4 f484 	clz	r4, r4
 8005d80:	0964      	lsrs	r4, r4, #5
 8005d82:	e7ba      	b.n	8005cfa <ai_platform_get_weights_map+0x1a>
 8005d84:	428f      	cmp	r7, r1
 8005d86:	d1b8      	bne.n	8005cfa <ai_platform_get_weights_map+0x1a>
 8005d88:	e7e1      	b.n	8005d4e <ai_platform_get_weights_map+0x6e>
 8005d8a:	bf00      	nop
 8005d8c:	a1facade 	.word	0xa1facade

08005d90 <ai_platform_get_activations_map>:
 8005d90:	2900      	cmp	r1, #0
 8005d92:	bf18      	it	ne
 8005d94:	2800      	cmpne	r0, #0
 8005d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d98:	bf0c      	ite	eq
 8005d9a:	2401      	moveq	r4, #1
 8005d9c:	2400      	movne	r4, #0
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	bf08      	it	eq
 8005da2:	f044 0401 	orreq.w	r4, r4, #1
 8005da6:	b114      	cbz	r4, 8005dae <ai_platform_get_activations_map+0x1e>
 8005da8:	2400      	movs	r4, #0
 8005daa:	4620      	mov	r0, r4
 8005dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dae:	4616      	mov	r6, r2
 8005db0:	4b22      	ldr	r3, [pc, #136]	; (8005e3c <ai_platform_get_activations_map+0xac>)
 8005db2:	6812      	ldr	r2, [r2, #0]
 8005db4:	4605      	mov	r5, r0
 8005db6:	460f      	mov	r7, r1
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d022      	beq.n	8005e02 <ai_platform_get_activations_map+0x72>
 8005dbc:	6a30      	ldr	r0, [r6, #32]
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d0f2      	beq.n	8005da8 <ai_platform_get_activations_map+0x18>
 8005dc2:	6806      	ldr	r6, [r0, #0]
 8005dc4:	429e      	cmp	r6, r3
 8005dc6:	d006      	beq.n	8005dd6 <ai_platform_get_activations_map+0x46>
 8005dc8:	f1a1 0401 	sub.w	r4, r1, #1
 8005dcc:	6028      	str	r0, [r5, #0]
 8005dce:	fab4 f484 	clz	r4, r4
 8005dd2:	0964      	lsrs	r4, r4, #5
 8005dd4:	e7e9      	b.n	8005daa <ai_platform_get_activations_map+0x1a>
 8005dd6:	3d04      	subs	r5, #4
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4621      	mov	r1, r4
 8005ddc:	e000      	b.n	8005de0 <ai_platform_get_activations_map+0x50>
 8005dde:	4619      	mov	r1, r3
 8005de0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005de4:	42b3      	cmp	r3, r6
 8005de6:	d026      	beq.n	8005e36 <ai_platform_get_activations_map+0xa6>
 8005de8:	f845 3f04 	str.w	r3, [r5, #4]!
 8005dec:	1c4b      	adds	r3, r1, #1
 8005dee:	429f      	cmp	r7, r3
 8005df0:	d8f5      	bhi.n	8005dde <ai_platform_get_activations_map+0x4e>
 8005df2:	d1da      	bne.n	8005daa <ai_platform_get_activations_map+0x1a>
 8005df4:	3102      	adds	r1, #2
 8005df6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8005dfa:	42b3      	cmp	r3, r6
 8005dfc:	d1d5      	bne.n	8005daa <ai_platform_get_activations_map+0x1a>
 8005dfe:	2401      	movs	r4, #1
 8005e00:	e7d3      	b.n	8005daa <ai_platform_get_activations_map+0x1a>
 8005e02:	f106 000c 	add.w	r0, r6, #12
 8005e06:	f7ff ff4d 	bl	8005ca4 <ai_buffer_array_sane>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d0cc      	beq.n	8005da8 <ai_platform_get_activations_map+0x18>
 8005e0e:	89f3      	ldrh	r3, [r6, #14]
 8005e10:	429f      	cmp	r7, r3
 8005e12:	d1c9      	bne.n	8005da8 <ai_platform_get_activations_map+0x18>
 8005e14:	3d04      	subs	r5, #4
 8005e16:	4622      	mov	r2, r4
 8005e18:	6933      	ldr	r3, [r6, #16]
 8005e1a:	4423      	add	r3, r4
 8005e1c:	341c      	adds	r4, #28
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	b123      	cbz	r3, 8005e2c <ai_platform_get_activations_map+0x9c>
 8005e22:	3201      	adds	r2, #1
 8005e24:	f845 3f04 	str.w	r3, [r5, #4]!
 8005e28:	4297      	cmp	r7, r2
 8005e2a:	d8f5      	bhi.n	8005e18 <ai_platform_get_activations_map+0x88>
 8005e2c:	1abc      	subs	r4, r7, r2
 8005e2e:	fab4 f484 	clz	r4, r4
 8005e32:	0964      	lsrs	r4, r4, #5
 8005e34:	e7b9      	b.n	8005daa <ai_platform_get_activations_map+0x1a>
 8005e36:	428f      	cmp	r7, r1
 8005e38:	d1b7      	bne.n	8005daa <ai_platform_get_activations_map+0x1a>
 8005e3a:	e7e0      	b.n	8005dfe <ai_platform_get_activations_map+0x6e>
 8005e3c:	a1facade 	.word	0xa1facade

08005e40 <ai_platform_bind_network_params>:
 8005e40:	2a00      	cmp	r2, #0
 8005e42:	bf18      	it	ne
 8005e44:	2900      	cmpne	r1, #0
 8005e46:	d010      	beq.n	8005e6a <ai_platform_bind_network_params+0x2a>
 8005e48:	b178      	cbz	r0, 8005e6a <ai_platform_bind_network_params+0x2a>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	4808      	ldr	r0, [pc, #32]	; (8005e70 <ai_platform_bind_network_params+0x30>)
 8005e4e:	f103 0c0c 	add.w	ip, r3, #12
 8005e52:	f843 0b04 	str.w	r0, [r3], #4
 8005e56:	c903      	ldmia	r1, {r0, r1}
 8005e58:	e883 0003 	stmia.w	r3, {r0, r1}
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e62:	e88c 0003 	stmia.w	ip, {r0, r1}
 8005e66:	4618      	mov	r0, r3
 8005e68:	4770      	bx	lr
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	4770      	bx	lr
 8005e70:	a1facade 	.word	0xa1facade

08005e74 <ai_platform_runtime_get_revision>:
 8005e74:	4a34      	ldr	r2, [pc, #208]	; (8005f48 <ai_platform_runtime_get_revision+0xd4>)
 8005e76:	b508      	push	{r3, lr}
 8005e78:	6813      	ldr	r3, [r2, #0]
 8005e7a:	f023 0301 	bic.w	r3, r3, #1
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	f7ff ff2a 	bl	8005cd8 <_ai_platform_acquire_crc>
 8005e84:	4b31      	ldr	r3, [pc, #196]	; (8005f4c <ai_platform_runtime_get_revision+0xd8>)
 8005e86:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e90:	189a      	adds	r2, r3, r2
 8005e92:	2a01      	cmp	r2, #1
 8005e94:	d91b      	bls.n	8005ece <ai_platform_runtime_get_revision+0x5a>
 8005e96:	f240 4249 	movw	r2, #1097	; 0x449
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d017      	beq.n	8005ece <ai_platform_runtime_get_revision+0x5a>
 8005e9e:	4a2c      	ldr	r2, [pc, #176]	; (8005f50 <ai_platform_runtime_get_revision+0xdc>)
 8005ea0:	6813      	ldr	r3, [r2, #0]
 8005ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ea6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005eaa:	d02a      	beq.n	8005f02 <ai_platform_runtime_get_revision+0x8e>
 8005eac:	6813      	ldr	r3, [r2, #0]
 8005eae:	f240 4183 	movw	r1, #1155	; 0x483
 8005eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eb6:	428b      	cmp	r3, r1
 8005eb8:	d034      	beq.n	8005f24 <ai_platform_runtime_get_revision+0xb0>
 8005eba:	6813      	ldr	r3, [r2, #0]
 8005ebc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ec0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005ec4:	d010      	beq.n	8005ee8 <ai_platform_runtime_get_revision+0x74>
 8005ec6:	f7ff ff09 	bl	8005cdc <_ai_platform_release_crc>
 8005eca:	4822      	ldr	r0, [pc, #136]	; (8005f54 <ai_platform_runtime_get_revision+0xe0>)
 8005ecc:	bd08      	pop	{r3, pc}
 8005ece:	4a22      	ldr	r2, [pc, #136]	; (8005f58 <ai_platform_runtime_get_revision+0xe4>)
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	6093      	str	r3, [r2, #8]
 8005ed4:	6893      	ldr	r3, [r2, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1fc      	bne.n	8005ed4 <ai_platform_runtime_get_revision+0x60>
 8005eda:	4920      	ldr	r1, [pc, #128]	; (8005f5c <ai_platform_runtime_get_revision+0xe8>)
 8005edc:	4b20      	ldr	r3, [pc, #128]	; (8005f60 <ai_platform_runtime_get_revision+0xec>)
 8005ede:	6011      	str	r1, [r2, #0]
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d0ef      	beq.n	8005ec6 <ai_platform_runtime_get_revision+0x52>
 8005ee6:	e7fe      	b.n	8005ee6 <ai_platform_runtime_get_revision+0x72>
 8005ee8:	4a1b      	ldr	r2, [pc, #108]	; (8005f58 <ai_platform_runtime_get_revision+0xe4>)
 8005eea:	2301      	movs	r3, #1
 8005eec:	6093      	str	r3, [r2, #8]
 8005eee:	6893      	ldr	r3, [r2, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1fc      	bne.n	8005eee <ai_platform_runtime_get_revision+0x7a>
 8005ef4:	4919      	ldr	r1, [pc, #100]	; (8005f5c <ai_platform_runtime_get_revision+0xe8>)
 8005ef6:	4b1a      	ldr	r3, [pc, #104]	; (8005f60 <ai_platform_runtime_get_revision+0xec>)
 8005ef8:	6011      	str	r1, [r2, #0]
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d0e2      	beq.n	8005ec6 <ai_platform_runtime_get_revision+0x52>
 8005f00:	e7fe      	b.n	8005f00 <ai_platform_runtime_get_revision+0x8c>
 8005f02:	4a18      	ldr	r2, [pc, #96]	; (8005f64 <ai_platform_runtime_get_revision+0xf0>)
 8005f04:	2301      	movs	r3, #1
 8005f06:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005f0a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1fb      	bne.n	8005f0a <ai_platform_runtime_get_revision+0x96>
 8005f12:	4912      	ldr	r1, [pc, #72]	; (8005f5c <ai_platform_runtime_get_revision+0xe8>)
 8005f14:	4b12      	ldr	r3, [pc, #72]	; (8005f60 <ai_platform_runtime_get_revision+0xec>)
 8005f16:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005f1a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d0d1      	beq.n	8005ec6 <ai_platform_runtime_get_revision+0x52>
 8005f22:	e7fe      	b.n	8005f22 <ai_platform_runtime_get_revision+0xae>
 8005f24:	4a0f      	ldr	r2, [pc, #60]	; (8005f64 <ai_platform_runtime_get_revision+0xf0>)
 8005f26:	2301      	movs	r3, #1
 8005f28:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005f2c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1fb      	bne.n	8005f2c <ai_platform_runtime_get_revision+0xb8>
 8005f34:	4909      	ldr	r1, [pc, #36]	; (8005f5c <ai_platform_runtime_get_revision+0xe8>)
 8005f36:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <ai_platform_runtime_get_revision+0xec>)
 8005f38:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005f3c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d0c0      	beq.n	8005ec6 <ai_platform_runtime_get_revision+0x52>
 8005f44:	e7fe      	b.n	8005f44 <ai_platform_runtime_get_revision+0xd0>
 8005f46:	bf00      	nop
 8005f48:	e0002000 	.word	0xe0002000
 8005f4c:	e0042000 	.word	0xe0042000
 8005f50:	5c001000 	.word	0x5c001000
 8005f54:	0800fe68 	.word	0x0800fe68
 8005f58:	40023000 	.word	0x40023000
 8005f5c:	f407a5c2 	.word	0xf407a5c2
 8005f60:	b5e8b5cd 	.word	0xb5e8b5cd
 8005f64:	58024000 	.word	0x58024000

08005f68 <ai_platform_runtime_get_version>:
 8005f68:	4a3e      	ldr	r2, [pc, #248]	; (8006064 <ai_platform_runtime_get_version+0xfc>)
 8005f6a:	b500      	push	{lr}
 8005f6c:	6813      	ldr	r3, [r2, #0]
 8005f6e:	b083      	sub	sp, #12
 8005f70:	f023 0301 	bic.w	r3, r3, #1
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	f7ff feaf 	bl	8005cd8 <_ai_platform_acquire_crc>
 8005f7a:	4b3b      	ldr	r3, [pc, #236]	; (8006068 <ai_platform_runtime_get_version+0x100>)
 8005f7c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f86:	189a      	adds	r2, r3, r2
 8005f88:	2a01      	cmp	r2, #1
 8005f8a:	d92e      	bls.n	8005fea <ai_platform_runtime_get_version+0x82>
 8005f8c:	f240 4249 	movw	r2, #1097	; 0x449
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d02a      	beq.n	8005fea <ai_platform_runtime_get_version+0x82>
 8005f94:	4a35      	ldr	r2, [pc, #212]	; (800606c <ai_platform_runtime_get_version+0x104>)
 8005f96:	6813      	ldr	r3, [r2, #0]
 8005f98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f9c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005fa0:	d03d      	beq.n	800601e <ai_platform_runtime_get_version+0xb6>
 8005fa2:	6813      	ldr	r3, [r2, #0]
 8005fa4:	f240 4183 	movw	r1, #1155	; 0x483
 8005fa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fac:	428b      	cmp	r3, r1
 8005fae:	d047      	beq.n	8006040 <ai_platform_runtime_get_version+0xd8>
 8005fb0:	6813      	ldr	r3, [r2, #0]
 8005fb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fb6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005fba:	d023      	beq.n	8006004 <ai_platform_runtime_get_version+0x9c>
 8005fbc:	f7ff fe8e 	bl	8005cdc <_ai_platform_release_crc>
 8005fc0:	4b2b      	ldr	r3, [pc, #172]	; (8006070 <ai_platform_runtime_get_version+0x108>)
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	fa5f fc83 	uxtb.w	ip, r3
 8005fca:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005fce:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005fd2:	0e1b      	lsrs	r3, r3, #24
 8005fd4:	f36c 0007 	bfi	r0, ip, #0, #8
 8005fd8:	f361 200f 	bfi	r0, r1, #8, #8
 8005fdc:	f362 4017 	bfi	r0, r2, #16, #8
 8005fe0:	f363 601f 	bfi	r0, r3, #24, #8
 8005fe4:	b003      	add	sp, #12
 8005fe6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fea:	4a22      	ldr	r2, [pc, #136]	; (8006074 <ai_platform_runtime_get_version+0x10c>)
 8005fec:	2301      	movs	r3, #1
 8005fee:	6093      	str	r3, [r2, #8]
 8005ff0:	6893      	ldr	r3, [r2, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1fc      	bne.n	8005ff0 <ai_platform_runtime_get_version+0x88>
 8005ff6:	4920      	ldr	r1, [pc, #128]	; (8006078 <ai_platform_runtime_get_version+0x110>)
 8005ff8:	4b20      	ldr	r3, [pc, #128]	; (800607c <ai_platform_runtime_get_version+0x114>)
 8005ffa:	6011      	str	r1, [r2, #0]
 8005ffc:	6812      	ldr	r2, [r2, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d0dc      	beq.n	8005fbc <ai_platform_runtime_get_version+0x54>
 8006002:	e7fe      	b.n	8006002 <ai_platform_runtime_get_version+0x9a>
 8006004:	4a1b      	ldr	r2, [pc, #108]	; (8006074 <ai_platform_runtime_get_version+0x10c>)
 8006006:	2301      	movs	r3, #1
 8006008:	6093      	str	r3, [r2, #8]
 800600a:	6893      	ldr	r3, [r2, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1fc      	bne.n	800600a <ai_platform_runtime_get_version+0xa2>
 8006010:	4919      	ldr	r1, [pc, #100]	; (8006078 <ai_platform_runtime_get_version+0x110>)
 8006012:	4b1a      	ldr	r3, [pc, #104]	; (800607c <ai_platform_runtime_get_version+0x114>)
 8006014:	6011      	str	r1, [r2, #0]
 8006016:	6812      	ldr	r2, [r2, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d0cf      	beq.n	8005fbc <ai_platform_runtime_get_version+0x54>
 800601c:	e7fe      	b.n	800601c <ai_platform_runtime_get_version+0xb4>
 800601e:	4a18      	ldr	r2, [pc, #96]	; (8006080 <ai_platform_runtime_get_version+0x118>)
 8006020:	2301      	movs	r3, #1
 8006022:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006026:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1fb      	bne.n	8006026 <ai_platform_runtime_get_version+0xbe>
 800602e:	4912      	ldr	r1, [pc, #72]	; (8006078 <ai_platform_runtime_get_version+0x110>)
 8006030:	4b12      	ldr	r3, [pc, #72]	; (800607c <ai_platform_runtime_get_version+0x114>)
 8006032:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006036:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800603a:	429a      	cmp	r2, r3
 800603c:	d0be      	beq.n	8005fbc <ai_platform_runtime_get_version+0x54>
 800603e:	e7fe      	b.n	800603e <ai_platform_runtime_get_version+0xd6>
 8006040:	4a0f      	ldr	r2, [pc, #60]	; (8006080 <ai_platform_runtime_get_version+0x118>)
 8006042:	2301      	movs	r3, #1
 8006044:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006048:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1fb      	bne.n	8006048 <ai_platform_runtime_get_version+0xe0>
 8006050:	4909      	ldr	r1, [pc, #36]	; (8006078 <ai_platform_runtime_get_version+0x110>)
 8006052:	4b0a      	ldr	r3, [pc, #40]	; (800607c <ai_platform_runtime_get_version+0x114>)
 8006054:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006058:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800605c:	429a      	cmp	r2, r3
 800605e:	d0ad      	beq.n	8005fbc <ai_platform_runtime_get_version+0x54>
 8006060:	e7fe      	b.n	8006060 <ai_platform_runtime_get_version+0xf8>
 8006062:	bf00      	nop
 8006064:	e0002000 	.word	0xe0002000
 8006068:	e0042000 	.word	0xe0042000
 800606c:	5c001000 	.word	0x5c001000
 8006070:	0800fe6c 	.word	0x0800fe6c
 8006074:	40023000 	.word	0x40023000
 8006078:	f407a5c2 	.word	0xf407a5c2
 800607c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006080:	58024000 	.word	0x58024000

08006084 <ai_platform_api_get_version>:
 8006084:	4a3e      	ldr	r2, [pc, #248]	; (8006180 <ai_platform_api_get_version+0xfc>)
 8006086:	b500      	push	{lr}
 8006088:	6813      	ldr	r3, [r2, #0]
 800608a:	b083      	sub	sp, #12
 800608c:	f023 0301 	bic.w	r3, r3, #1
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	f7ff fe21 	bl	8005cd8 <_ai_platform_acquire_crc>
 8006096:	4b3b      	ldr	r3, [pc, #236]	; (8006184 <ai_platform_api_get_version+0x100>)
 8006098:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060a2:	189a      	adds	r2, r3, r2
 80060a4:	2a01      	cmp	r2, #1
 80060a6:	d92e      	bls.n	8006106 <ai_platform_api_get_version+0x82>
 80060a8:	f240 4249 	movw	r2, #1097	; 0x449
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d02a      	beq.n	8006106 <ai_platform_api_get_version+0x82>
 80060b0:	4a35      	ldr	r2, [pc, #212]	; (8006188 <ai_platform_api_get_version+0x104>)
 80060b2:	6813      	ldr	r3, [r2, #0]
 80060b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060b8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80060bc:	d03d      	beq.n	800613a <ai_platform_api_get_version+0xb6>
 80060be:	6813      	ldr	r3, [r2, #0]
 80060c0:	f240 4183 	movw	r1, #1155	; 0x483
 80060c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060c8:	428b      	cmp	r3, r1
 80060ca:	d047      	beq.n	800615c <ai_platform_api_get_version+0xd8>
 80060cc:	6813      	ldr	r3, [r2, #0]
 80060ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060d2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80060d6:	d023      	beq.n	8006120 <ai_platform_api_get_version+0x9c>
 80060d8:	f7ff fe00 	bl	8005cdc <_ai_platform_release_crc>
 80060dc:	4b2b      	ldr	r3, [pc, #172]	; (800618c <ai_platform_api_get_version+0x108>)
 80060de:	2000      	movs	r0, #0
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	fa5f fc83 	uxtb.w	ip, r3
 80060e6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80060ea:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80060ee:	0e1b      	lsrs	r3, r3, #24
 80060f0:	f36c 0007 	bfi	r0, ip, #0, #8
 80060f4:	f361 200f 	bfi	r0, r1, #8, #8
 80060f8:	f362 4017 	bfi	r0, r2, #16, #8
 80060fc:	f363 601f 	bfi	r0, r3, #24, #8
 8006100:	b003      	add	sp, #12
 8006102:	f85d fb04 	ldr.w	pc, [sp], #4
 8006106:	4a22      	ldr	r2, [pc, #136]	; (8006190 <ai_platform_api_get_version+0x10c>)
 8006108:	2301      	movs	r3, #1
 800610a:	6093      	str	r3, [r2, #8]
 800610c:	6893      	ldr	r3, [r2, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1fc      	bne.n	800610c <ai_platform_api_get_version+0x88>
 8006112:	4920      	ldr	r1, [pc, #128]	; (8006194 <ai_platform_api_get_version+0x110>)
 8006114:	4b20      	ldr	r3, [pc, #128]	; (8006198 <ai_platform_api_get_version+0x114>)
 8006116:	6011      	str	r1, [r2, #0]
 8006118:	6812      	ldr	r2, [r2, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d0dc      	beq.n	80060d8 <ai_platform_api_get_version+0x54>
 800611e:	e7fe      	b.n	800611e <ai_platform_api_get_version+0x9a>
 8006120:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <ai_platform_api_get_version+0x10c>)
 8006122:	2301      	movs	r3, #1
 8006124:	6093      	str	r3, [r2, #8]
 8006126:	6893      	ldr	r3, [r2, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1fc      	bne.n	8006126 <ai_platform_api_get_version+0xa2>
 800612c:	4919      	ldr	r1, [pc, #100]	; (8006194 <ai_platform_api_get_version+0x110>)
 800612e:	4b1a      	ldr	r3, [pc, #104]	; (8006198 <ai_platform_api_get_version+0x114>)
 8006130:	6011      	str	r1, [r2, #0]
 8006132:	6812      	ldr	r2, [r2, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d0cf      	beq.n	80060d8 <ai_platform_api_get_version+0x54>
 8006138:	e7fe      	b.n	8006138 <ai_platform_api_get_version+0xb4>
 800613a:	4a18      	ldr	r2, [pc, #96]	; (800619c <ai_platform_api_get_version+0x118>)
 800613c:	2301      	movs	r3, #1
 800613e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006142:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1fb      	bne.n	8006142 <ai_platform_api_get_version+0xbe>
 800614a:	4912      	ldr	r1, [pc, #72]	; (8006194 <ai_platform_api_get_version+0x110>)
 800614c:	4b12      	ldr	r3, [pc, #72]	; (8006198 <ai_platform_api_get_version+0x114>)
 800614e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006152:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006156:	429a      	cmp	r2, r3
 8006158:	d0be      	beq.n	80060d8 <ai_platform_api_get_version+0x54>
 800615a:	e7fe      	b.n	800615a <ai_platform_api_get_version+0xd6>
 800615c:	4a0f      	ldr	r2, [pc, #60]	; (800619c <ai_platform_api_get_version+0x118>)
 800615e:	2301      	movs	r3, #1
 8006160:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006164:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1fb      	bne.n	8006164 <ai_platform_api_get_version+0xe0>
 800616c:	4909      	ldr	r1, [pc, #36]	; (8006194 <ai_platform_api_get_version+0x110>)
 800616e:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <ai_platform_api_get_version+0x114>)
 8006170:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006174:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006178:	429a      	cmp	r2, r3
 800617a:	d0ad      	beq.n	80060d8 <ai_platform_api_get_version+0x54>
 800617c:	e7fe      	b.n	800617c <ai_platform_api_get_version+0xf8>
 800617e:	bf00      	nop
 8006180:	e0002000 	.word	0xe0002000
 8006184:	e0042000 	.word	0xe0042000
 8006188:	5c001000 	.word	0x5c001000
 800618c:	0800fe70 	.word	0x0800fe70
 8006190:	40023000 	.word	0x40023000
 8006194:	f407a5c2 	.word	0xf407a5c2
 8006198:	b5e8b5cd 	.word	0xb5e8b5cd
 800619c:	58024000 	.word	0x58024000

080061a0 <ai_platform_interface_api_get_version>:
 80061a0:	4a3e      	ldr	r2, [pc, #248]	; (800629c <ai_platform_interface_api_get_version+0xfc>)
 80061a2:	b500      	push	{lr}
 80061a4:	6813      	ldr	r3, [r2, #0]
 80061a6:	b083      	sub	sp, #12
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	f7ff fd93 	bl	8005cd8 <_ai_platform_acquire_crc>
 80061b2:	4b3b      	ldr	r3, [pc, #236]	; (80062a0 <ai_platform_interface_api_get_version+0x100>)
 80061b4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061be:	189a      	adds	r2, r3, r2
 80061c0:	2a01      	cmp	r2, #1
 80061c2:	d92e      	bls.n	8006222 <ai_platform_interface_api_get_version+0x82>
 80061c4:	f240 4249 	movw	r2, #1097	; 0x449
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d02a      	beq.n	8006222 <ai_platform_interface_api_get_version+0x82>
 80061cc:	4a35      	ldr	r2, [pc, #212]	; (80062a4 <ai_platform_interface_api_get_version+0x104>)
 80061ce:	6813      	ldr	r3, [r2, #0]
 80061d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061d4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80061d8:	d03d      	beq.n	8006256 <ai_platform_interface_api_get_version+0xb6>
 80061da:	6813      	ldr	r3, [r2, #0]
 80061dc:	f240 4183 	movw	r1, #1155	; 0x483
 80061e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061e4:	428b      	cmp	r3, r1
 80061e6:	d047      	beq.n	8006278 <ai_platform_interface_api_get_version+0xd8>
 80061e8:	6813      	ldr	r3, [r2, #0]
 80061ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061ee:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80061f2:	d023      	beq.n	800623c <ai_platform_interface_api_get_version+0x9c>
 80061f4:	f7ff fd72 	bl	8005cdc <_ai_platform_release_crc>
 80061f8:	4b2b      	ldr	r3, [pc, #172]	; (80062a8 <ai_platform_interface_api_get_version+0x108>)
 80061fa:	2000      	movs	r0, #0
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	fa5f fc83 	uxtb.w	ip, r3
 8006202:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8006206:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800620a:	0e1b      	lsrs	r3, r3, #24
 800620c:	f36c 0007 	bfi	r0, ip, #0, #8
 8006210:	f361 200f 	bfi	r0, r1, #8, #8
 8006214:	f362 4017 	bfi	r0, r2, #16, #8
 8006218:	f363 601f 	bfi	r0, r3, #24, #8
 800621c:	b003      	add	sp, #12
 800621e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006222:	4a22      	ldr	r2, [pc, #136]	; (80062ac <ai_platform_interface_api_get_version+0x10c>)
 8006224:	2301      	movs	r3, #1
 8006226:	6093      	str	r3, [r2, #8]
 8006228:	6893      	ldr	r3, [r2, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1fc      	bne.n	8006228 <ai_platform_interface_api_get_version+0x88>
 800622e:	4920      	ldr	r1, [pc, #128]	; (80062b0 <ai_platform_interface_api_get_version+0x110>)
 8006230:	4b20      	ldr	r3, [pc, #128]	; (80062b4 <ai_platform_interface_api_get_version+0x114>)
 8006232:	6011      	str	r1, [r2, #0]
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d0dc      	beq.n	80061f4 <ai_platform_interface_api_get_version+0x54>
 800623a:	e7fe      	b.n	800623a <ai_platform_interface_api_get_version+0x9a>
 800623c:	4a1b      	ldr	r2, [pc, #108]	; (80062ac <ai_platform_interface_api_get_version+0x10c>)
 800623e:	2301      	movs	r3, #1
 8006240:	6093      	str	r3, [r2, #8]
 8006242:	6893      	ldr	r3, [r2, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1fc      	bne.n	8006242 <ai_platform_interface_api_get_version+0xa2>
 8006248:	4919      	ldr	r1, [pc, #100]	; (80062b0 <ai_platform_interface_api_get_version+0x110>)
 800624a:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <ai_platform_interface_api_get_version+0x114>)
 800624c:	6011      	str	r1, [r2, #0]
 800624e:	6812      	ldr	r2, [r2, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d0cf      	beq.n	80061f4 <ai_platform_interface_api_get_version+0x54>
 8006254:	e7fe      	b.n	8006254 <ai_platform_interface_api_get_version+0xb4>
 8006256:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <ai_platform_interface_api_get_version+0x118>)
 8006258:	2301      	movs	r3, #1
 800625a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800625e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1fb      	bne.n	800625e <ai_platform_interface_api_get_version+0xbe>
 8006266:	4912      	ldr	r1, [pc, #72]	; (80062b0 <ai_platform_interface_api_get_version+0x110>)
 8006268:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <ai_platform_interface_api_get_version+0x114>)
 800626a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800626e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006272:	429a      	cmp	r2, r3
 8006274:	d0be      	beq.n	80061f4 <ai_platform_interface_api_get_version+0x54>
 8006276:	e7fe      	b.n	8006276 <ai_platform_interface_api_get_version+0xd6>
 8006278:	4a0f      	ldr	r2, [pc, #60]	; (80062b8 <ai_platform_interface_api_get_version+0x118>)
 800627a:	2301      	movs	r3, #1
 800627c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006280:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1fb      	bne.n	8006280 <ai_platform_interface_api_get_version+0xe0>
 8006288:	4909      	ldr	r1, [pc, #36]	; (80062b0 <ai_platform_interface_api_get_version+0x110>)
 800628a:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <ai_platform_interface_api_get_version+0x114>)
 800628c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006290:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006294:	429a      	cmp	r2, r3
 8006296:	d0ad      	beq.n	80061f4 <ai_platform_interface_api_get_version+0x54>
 8006298:	e7fe      	b.n	8006298 <ai_platform_interface_api_get_version+0xf8>
 800629a:	bf00      	nop
 800629c:	e0002000 	.word	0xe0002000
 80062a0:	e0042000 	.word	0xe0042000
 80062a4:	5c001000 	.word	0x5c001000
 80062a8:	0800fe74 	.word	0x0800fe74
 80062ac:	40023000 	.word	0x40023000
 80062b0:	f407a5c2 	.word	0xf407a5c2
 80062b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80062b8:	58024000 	.word	0x58024000

080062bc <ai_platform_context_acquire>:
 80062bc:	b510      	push	{r4, lr}
 80062be:	4604      	mov	r4, r0
 80062c0:	b120      	cbz	r0, 80062cc <ai_platform_context_acquire+0x10>
 80062c2:	4b36      	ldr	r3, [pc, #216]	; (800639c <ai_platform_context_acquire+0xe0>)
 80062c4:	6802      	ldr	r2, [r0, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	bf18      	it	ne
 80062ca:	2400      	movne	r4, #0
 80062cc:	4a34      	ldr	r2, [pc, #208]	; (80063a0 <ai_platform_context_acquire+0xe4>)
 80062ce:	6813      	ldr	r3, [r2, #0]
 80062d0:	f023 0301 	bic.w	r3, r3, #1
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	f7ff fcff 	bl	8005cd8 <_ai_platform_acquire_crc>
 80062da:	4b32      	ldr	r3, [pc, #200]	; (80063a4 <ai_platform_context_acquire+0xe8>)
 80062dc:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062e6:	189a      	adds	r2, r3, r2
 80062e8:	2a01      	cmp	r2, #1
 80062ea:	d91b      	bls.n	8006324 <ai_platform_context_acquire+0x68>
 80062ec:	f240 4249 	movw	r2, #1097	; 0x449
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d017      	beq.n	8006324 <ai_platform_context_acquire+0x68>
 80062f4:	4a2c      	ldr	r2, [pc, #176]	; (80063a8 <ai_platform_context_acquire+0xec>)
 80062f6:	6813      	ldr	r3, [r2, #0]
 80062f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062fc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006300:	d01d      	beq.n	800633e <ai_platform_context_acquire+0x82>
 8006302:	6813      	ldr	r3, [r2, #0]
 8006304:	f240 4183 	movw	r1, #1155	; 0x483
 8006308:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800630c:	428b      	cmp	r3, r1
 800630e:	d034      	beq.n	800637a <ai_platform_context_acquire+0xbe>
 8006310:	6813      	ldr	r3, [r2, #0]
 8006312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006316:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800631a:	d021      	beq.n	8006360 <ai_platform_context_acquire+0xa4>
 800631c:	f7ff fcde 	bl	8005cdc <_ai_platform_release_crc>
 8006320:	4620      	mov	r0, r4
 8006322:	bd10      	pop	{r4, pc}
 8006324:	4a21      	ldr	r2, [pc, #132]	; (80063ac <ai_platform_context_acquire+0xf0>)
 8006326:	2301      	movs	r3, #1
 8006328:	6093      	str	r3, [r2, #8]
 800632a:	6893      	ldr	r3, [r2, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1fc      	bne.n	800632a <ai_platform_context_acquire+0x6e>
 8006330:	491f      	ldr	r1, [pc, #124]	; (80063b0 <ai_platform_context_acquire+0xf4>)
 8006332:	4b20      	ldr	r3, [pc, #128]	; (80063b4 <ai_platform_context_acquire+0xf8>)
 8006334:	6011      	str	r1, [r2, #0]
 8006336:	6812      	ldr	r2, [r2, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	d0ef      	beq.n	800631c <ai_platform_context_acquire+0x60>
 800633c:	e7fe      	b.n	800633c <ai_platform_context_acquire+0x80>
 800633e:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <ai_platform_context_acquire+0xfc>)
 8006340:	2301      	movs	r3, #1
 8006342:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006346:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1fb      	bne.n	8006346 <ai_platform_context_acquire+0x8a>
 800634e:	4918      	ldr	r1, [pc, #96]	; (80063b0 <ai_platform_context_acquire+0xf4>)
 8006350:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <ai_platform_context_acquire+0xf8>)
 8006352:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006356:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800635a:	429a      	cmp	r2, r3
 800635c:	d0de      	beq.n	800631c <ai_platform_context_acquire+0x60>
 800635e:	e7fe      	b.n	800635e <ai_platform_context_acquire+0xa2>
 8006360:	4a12      	ldr	r2, [pc, #72]	; (80063ac <ai_platform_context_acquire+0xf0>)
 8006362:	2301      	movs	r3, #1
 8006364:	6093      	str	r3, [r2, #8]
 8006366:	6893      	ldr	r3, [r2, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1fc      	bne.n	8006366 <ai_platform_context_acquire+0xaa>
 800636c:	4910      	ldr	r1, [pc, #64]	; (80063b0 <ai_platform_context_acquire+0xf4>)
 800636e:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <ai_platform_context_acquire+0xf8>)
 8006370:	6011      	str	r1, [r2, #0]
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d0d1      	beq.n	800631c <ai_platform_context_acquire+0x60>
 8006378:	e7fe      	b.n	8006378 <ai_platform_context_acquire+0xbc>
 800637a:	4a0f      	ldr	r2, [pc, #60]	; (80063b8 <ai_platform_context_acquire+0xfc>)
 800637c:	2301      	movs	r3, #1
 800637e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006382:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1fb      	bne.n	8006382 <ai_platform_context_acquire+0xc6>
 800638a:	4909      	ldr	r1, [pc, #36]	; (80063b0 <ai_platform_context_acquire+0xf4>)
 800638c:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <ai_platform_context_acquire+0xf8>)
 800638e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006392:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006396:	429a      	cmp	r2, r3
 8006398:	d0c0      	beq.n	800631c <ai_platform_context_acquire+0x60>
 800639a:	e7fe      	b.n	800639a <ai_platform_context_acquire+0xde>
 800639c:	a1c00100 	.word	0xa1c00100
 80063a0:	e0002000 	.word	0xe0002000
 80063a4:	e0042000 	.word	0xe0042000
 80063a8:	5c001000 	.word	0x5c001000
 80063ac:	40023000 	.word	0x40023000
 80063b0:	f407a5c2 	.word	0xf407a5c2
 80063b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80063b8:	58024000 	.word	0x58024000

080063bc <ai_platform_network_get_error>:
 80063bc:	b510      	push	{r4, lr}
 80063be:	2800      	cmp	r0, #0
 80063c0:	d036      	beq.n	8006430 <ai_platform_network_get_error+0x74>
 80063c2:	4b6f      	ldr	r3, [pc, #444]	; (8006580 <ai_platform_network_get_error+0x1c4>)
 80063c4:	4604      	mov	r4, r0
 80063c6:	6802      	ldr	r2, [r0, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d131      	bne.n	8006430 <ai_platform_network_get_error+0x74>
 80063cc:	4a6d      	ldr	r2, [pc, #436]	; (8006584 <ai_platform_network_get_error+0x1c8>)
 80063ce:	6813      	ldr	r3, [r2, #0]
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	f7ff fc7f 	bl	8005cd8 <_ai_platform_acquire_crc>
 80063da:	4b6b      	ldr	r3, [pc, #428]	; (8006588 <ai_platform_network_get_error+0x1cc>)
 80063dc:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063e6:	189a      	adds	r2, r3, r2
 80063e8:	2a01      	cmp	r2, #1
 80063ea:	d95b      	bls.n	80064a4 <ai_platform_network_get_error+0xe8>
 80063ec:	f240 4249 	movw	r2, #1097	; 0x449
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d057      	beq.n	80064a4 <ai_platform_network_get_error+0xe8>
 80063f4:	4a65      	ldr	r2, [pc, #404]	; (800658c <ai_platform_network_get_error+0x1d0>)
 80063f6:	6813      	ldr	r3, [r2, #0]
 80063f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063fc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006400:	d06e      	beq.n	80064e0 <ai_platform_network_get_error+0x124>
 8006402:	6813      	ldr	r3, [r2, #0]
 8006404:	f240 4183 	movw	r1, #1155	; 0x483
 8006408:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800640c:	428b      	cmp	r3, r1
 800640e:	f000 8089 	beq.w	8006524 <ai_platform_network_get_error+0x168>
 8006412:	6813      	ldr	r3, [r2, #0]
 8006414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006418:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800641c:	f000 80a1 	beq.w	8006562 <ai_platform_network_get_error+0x1a6>
 8006420:	f7ff fc5c 	bl	8005cdc <_ai_platform_release_crc>
 8006424:	f104 0010 	add.w	r0, r4, #16
 8006428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800642c:	f001 bec2 	b.w	80081b4 <core_get_error>
 8006430:	4a54      	ldr	r2, [pc, #336]	; (8006584 <ai_platform_network_get_error+0x1c8>)
 8006432:	6813      	ldr	r3, [r2, #0]
 8006434:	f023 0301 	bic.w	r3, r3, #1
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	f7ff fc4d 	bl	8005cd8 <_ai_platform_acquire_crc>
 800643e:	4b52      	ldr	r3, [pc, #328]	; (8006588 <ai_platform_network_get_error+0x1cc>)
 8006440:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800644a:	185a      	adds	r2, r3, r1
 800644c:	2a01      	cmp	r2, #1
 800644e:	d91c      	bls.n	800648a <ai_platform_network_get_error+0xce>
 8006450:	f240 4249 	movw	r2, #1097	; 0x449
 8006454:	4293      	cmp	r3, r2
 8006456:	d018      	beq.n	800648a <ai_platform_network_get_error+0xce>
 8006458:	4a4c      	ldr	r2, [pc, #304]	; (800658c <ai_platform_network_get_error+0x1d0>)
 800645a:	6813      	ldr	r3, [r2, #0]
 800645c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006460:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006464:	d02b      	beq.n	80064be <ai_platform_network_get_error+0x102>
 8006466:	6813      	ldr	r3, [r2, #0]
 8006468:	f240 4183 	movw	r1, #1155	; 0x483
 800646c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006470:	428b      	cmp	r3, r1
 8006472:	d046      	beq.n	8006502 <ai_platform_network_get_error+0x146>
 8006474:	6813      	ldr	r3, [r2, #0]
 8006476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800647a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800647e:	d063      	beq.n	8006548 <ai_platform_network_get_error+0x18c>
 8006480:	f7ff fc2c 	bl	8005cdc <_ai_platform_release_crc>
 8006484:	f241 0010 	movw	r0, #4112	; 0x1010
 8006488:	bd10      	pop	{r4, pc}
 800648a:	4a41      	ldr	r2, [pc, #260]	; (8006590 <ai_platform_network_get_error+0x1d4>)
 800648c:	2301      	movs	r3, #1
 800648e:	6093      	str	r3, [r2, #8]
 8006490:	6893      	ldr	r3, [r2, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1fc      	bne.n	8006490 <ai_platform_network_get_error+0xd4>
 8006496:	493f      	ldr	r1, [pc, #252]	; (8006594 <ai_platform_network_get_error+0x1d8>)
 8006498:	4b3f      	ldr	r3, [pc, #252]	; (8006598 <ai_platform_network_get_error+0x1dc>)
 800649a:	6011      	str	r1, [r2, #0]
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d0ee      	beq.n	8006480 <ai_platform_network_get_error+0xc4>
 80064a2:	e7fe      	b.n	80064a2 <ai_platform_network_get_error+0xe6>
 80064a4:	4a3a      	ldr	r2, [pc, #232]	; (8006590 <ai_platform_network_get_error+0x1d4>)
 80064a6:	2301      	movs	r3, #1
 80064a8:	6093      	str	r3, [r2, #8]
 80064aa:	6893      	ldr	r3, [r2, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1fc      	bne.n	80064aa <ai_platform_network_get_error+0xee>
 80064b0:	4938      	ldr	r1, [pc, #224]	; (8006594 <ai_platform_network_get_error+0x1d8>)
 80064b2:	4b39      	ldr	r3, [pc, #228]	; (8006598 <ai_platform_network_get_error+0x1dc>)
 80064b4:	6011      	str	r1, [r2, #0]
 80064b6:	6812      	ldr	r2, [r2, #0]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d0b1      	beq.n	8006420 <ai_platform_network_get_error+0x64>
 80064bc:	e7fe      	b.n	80064bc <ai_platform_network_get_error+0x100>
 80064be:	4a37      	ldr	r2, [pc, #220]	; (800659c <ai_platform_network_get_error+0x1e0>)
 80064c0:	2301      	movs	r3, #1
 80064c2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80064c6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1fb      	bne.n	80064c6 <ai_platform_network_get_error+0x10a>
 80064ce:	4931      	ldr	r1, [pc, #196]	; (8006594 <ai_platform_network_get_error+0x1d8>)
 80064d0:	4b31      	ldr	r3, [pc, #196]	; (8006598 <ai_platform_network_get_error+0x1dc>)
 80064d2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80064d6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80064da:	429a      	cmp	r2, r3
 80064dc:	d0d0      	beq.n	8006480 <ai_platform_network_get_error+0xc4>
 80064de:	e7fe      	b.n	80064de <ai_platform_network_get_error+0x122>
 80064e0:	4a2e      	ldr	r2, [pc, #184]	; (800659c <ai_platform_network_get_error+0x1e0>)
 80064e2:	2301      	movs	r3, #1
 80064e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80064e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1fb      	bne.n	80064e8 <ai_platform_network_get_error+0x12c>
 80064f0:	4928      	ldr	r1, [pc, #160]	; (8006594 <ai_platform_network_get_error+0x1d8>)
 80064f2:	4b29      	ldr	r3, [pc, #164]	; (8006598 <ai_platform_network_get_error+0x1dc>)
 80064f4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80064f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d08f      	beq.n	8006420 <ai_platform_network_get_error+0x64>
 8006500:	e7fe      	b.n	8006500 <ai_platform_network_get_error+0x144>
 8006502:	4a26      	ldr	r2, [pc, #152]	; (800659c <ai_platform_network_get_error+0x1e0>)
 8006504:	2301      	movs	r3, #1
 8006506:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800650a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1fb      	bne.n	800650a <ai_platform_network_get_error+0x14e>
 8006512:	4920      	ldr	r1, [pc, #128]	; (8006594 <ai_platform_network_get_error+0x1d8>)
 8006514:	4b20      	ldr	r3, [pc, #128]	; (8006598 <ai_platform_network_get_error+0x1dc>)
 8006516:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800651a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800651e:	429a      	cmp	r2, r3
 8006520:	d0ae      	beq.n	8006480 <ai_platform_network_get_error+0xc4>
 8006522:	e7fe      	b.n	8006522 <ai_platform_network_get_error+0x166>
 8006524:	4a1d      	ldr	r2, [pc, #116]	; (800659c <ai_platform_network_get_error+0x1e0>)
 8006526:	2301      	movs	r3, #1
 8006528:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800652c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1fb      	bne.n	800652c <ai_platform_network_get_error+0x170>
 8006534:	4917      	ldr	r1, [pc, #92]	; (8006594 <ai_platform_network_get_error+0x1d8>)
 8006536:	4b18      	ldr	r3, [pc, #96]	; (8006598 <ai_platform_network_get_error+0x1dc>)
 8006538:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800653c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006540:	429a      	cmp	r2, r3
 8006542:	f43f af6d 	beq.w	8006420 <ai_platform_network_get_error+0x64>
 8006546:	e7fe      	b.n	8006546 <ai_platform_network_get_error+0x18a>
 8006548:	4a11      	ldr	r2, [pc, #68]	; (8006590 <ai_platform_network_get_error+0x1d4>)
 800654a:	2301      	movs	r3, #1
 800654c:	6093      	str	r3, [r2, #8]
 800654e:	6893      	ldr	r3, [r2, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1fc      	bne.n	800654e <ai_platform_network_get_error+0x192>
 8006554:	490f      	ldr	r1, [pc, #60]	; (8006594 <ai_platform_network_get_error+0x1d8>)
 8006556:	4b10      	ldr	r3, [pc, #64]	; (8006598 <ai_platform_network_get_error+0x1dc>)
 8006558:	6011      	str	r1, [r2, #0]
 800655a:	6812      	ldr	r2, [r2, #0]
 800655c:	429a      	cmp	r2, r3
 800655e:	d08f      	beq.n	8006480 <ai_platform_network_get_error+0xc4>
 8006560:	e7fe      	b.n	8006560 <ai_platform_network_get_error+0x1a4>
 8006562:	4a0b      	ldr	r2, [pc, #44]	; (8006590 <ai_platform_network_get_error+0x1d4>)
 8006564:	2301      	movs	r3, #1
 8006566:	6093      	str	r3, [r2, #8]
 8006568:	6893      	ldr	r3, [r2, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1fc      	bne.n	8006568 <ai_platform_network_get_error+0x1ac>
 800656e:	4909      	ldr	r1, [pc, #36]	; (8006594 <ai_platform_network_get_error+0x1d8>)
 8006570:	4b09      	ldr	r3, [pc, #36]	; (8006598 <ai_platform_network_get_error+0x1dc>)
 8006572:	6011      	str	r1, [r2, #0]
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	f43f af52 	beq.w	8006420 <ai_platform_network_get_error+0x64>
 800657c:	e7fe      	b.n	800657c <ai_platform_network_get_error+0x1c0>
 800657e:	bf00      	nop
 8006580:	a1c00100 	.word	0xa1c00100
 8006584:	e0002000 	.word	0xe0002000
 8006588:	e0042000 	.word	0xe0042000
 800658c:	5c001000 	.word	0x5c001000
 8006590:	40023000 	.word	0x40023000
 8006594:	f407a5c2 	.word	0xf407a5c2
 8006598:	b5e8b5cd 	.word	0xb5e8b5cd
 800659c:	58024000 	.word	0x58024000

080065a0 <ai_platform_network_set_error>:
 80065a0:	b110      	cbz	r0, 80065a8 <ai_platform_network_set_error+0x8>
 80065a2:	3010      	adds	r0, #16
 80065a4:	f001 be0c 	b.w	80081c0 <core_set_error>
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop

080065ac <ai_platform_inputs_get>:
 80065ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b0:	b085      	sub	sp, #20
 80065b2:	9102      	str	r1, [sp, #8]
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f000 8096 	beq.w	80066e6 <ai_platform_inputs_get+0x13a>
 80065ba:	4bac      	ldr	r3, [pc, #688]	; (800686c <ai_platform_inputs_get+0x2c0>)
 80065bc:	4681      	mov	r9, r0
 80065be:	6802      	ldr	r2, [r0, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	f040 8090 	bne.w	80066e6 <ai_platform_inputs_get+0x13a>
 80065c6:	4aaa      	ldr	r2, [pc, #680]	; (8006870 <ai_platform_inputs_get+0x2c4>)
 80065c8:	6813      	ldr	r3, [r2, #0]
 80065ca:	f023 0301 	bic.w	r3, r3, #1
 80065ce:	6013      	str	r3, [r2, #0]
 80065d0:	f7ff fb82 	bl	8005cd8 <_ai_platform_acquire_crc>
 80065d4:	4ba7      	ldr	r3, [pc, #668]	; (8006874 <ai_platform_inputs_get+0x2c8>)
 80065d6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065e0:	189a      	adds	r2, r3, r2
 80065e2:	2a01      	cmp	r2, #1
 80065e4:	f240 80ba 	bls.w	800675c <ai_platform_inputs_get+0x1b0>
 80065e8:	f240 4249 	movw	r2, #1097	; 0x449
 80065ec:	4293      	cmp	r3, r2
 80065ee:	f000 80b5 	beq.w	800675c <ai_platform_inputs_get+0x1b0>
 80065f2:	4aa1      	ldr	r2, [pc, #644]	; (8006878 <ai_platform_inputs_get+0x2cc>)
 80065f4:	6813      	ldr	r3, [r2, #0]
 80065f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065fa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80065fe:	f000 80d6 	beq.w	80067ae <ai_platform_inputs_get+0x202>
 8006602:	6813      	ldr	r3, [r2, #0]
 8006604:	f240 4183 	movw	r1, #1155	; 0x483
 8006608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800660c:	428b      	cmp	r3, r1
 800660e:	f000 80ff 	beq.w	8006810 <ai_platform_inputs_get+0x264>
 8006612:	6813      	ldr	r3, [r2, #0]
 8006614:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006618:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800661c:	f000 8118 	beq.w	8006850 <ai_platform_inputs_get+0x2a4>
 8006620:	f7ff fb5c 	bl	8005cdc <_ai_platform_release_crc>
 8006624:	9a02      	ldr	r2, [sp, #8]
 8006626:	b10a      	cbz	r2, 800662c <ai_platform_inputs_get+0x80>
 8006628:	2300      	movs	r3, #0
 800662a:	8013      	strh	r3, [r2, #0]
 800662c:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 80a1 	beq.w	8006778 <ai_platform_inputs_get+0x1cc>
 8006636:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800663a:	f1ba 0f00 	cmp.w	sl, #0
 800663e:	f000 809b 	beq.w	8006778 <ai_platform_inputs_get+0x1cc>
 8006642:	2100      	movs	r1, #0
 8006644:	f8cd 900c 	str.w	r9, [sp, #12]
 8006648:	460d      	mov	r5, r1
 800664a:	4689      	mov	r9, r1
 800664c:	e016      	b.n	800667c <ai_platform_inputs_get+0xd0>
 800664e:	9a01      	ldr	r2, [sp, #4]
 8006650:	2301      	movs	r3, #1
 8006652:	f848 3002 	str.w	r3, [r8, r2]
 8006656:	69b2      	ldr	r2, [r6, #24]
 8006658:	f04f 0301 	mov.w	r3, #1
 800665c:	6856      	ldr	r6, [r2, #4]
 800665e:	3501      	adds	r5, #1
 8006660:	f109 091c 	add.w	r9, r9, #28
 8006664:	7523      	strb	r3, [r4, #20]
 8006666:	2300      	movs	r3, #0
 8006668:	60a7      	str	r7, [r4, #8]
 800666a:	61a1      	str	r1, [r4, #24]
 800666c:	e9c4 0c00 	strd	r0, ip, [r4]
 8006670:	6960      	ldr	r0, [r4, #20]
 8006672:	f36b 201f 	bfi	r0, fp, #8, #24
 8006676:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800667a:	6160      	str	r0, [r4, #20]
 800667c:	f8ba 3000 	ldrh.w	r3, [sl]
 8006680:	b2ac      	uxth	r4, r5
 8006682:	42ab      	cmp	r3, r5
 8006684:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006688:	9301      	str	r3, [sp, #4]
 800668a:	f240 80a2 	bls.w	80067d2 <ai_platform_inputs_get+0x226>
 800668e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 809d 	beq.w	80067d2 <ai_platform_inputs_get+0x226>
 8006698:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800669c:	2e00      	cmp	r6, #0
 800669e:	f000 8098 	beq.w	80067d2 <ai_platform_inputs_get+0x226>
 80066a2:	f8da 3008 	ldr.w	r3, [sl, #8]
 80066a6:	69b2      	ldr	r2, [r6, #24]
 80066a8:	68f1      	ldr	r1, [r6, #12]
 80066aa:	6810      	ldr	r0, [r2, #0]
 80066ac:	9100      	str	r1, [sp, #0]
 80066ae:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 80066b2:	68b3      	ldr	r3, [r6, #8]
 80066b4:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 80066b8:	444c      	add	r4, r9
 80066ba:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80066be:	f004 f83b 	bl	800a738 <ai_array_to_buffer_fmt>
 80066c2:	69b2      	ldr	r2, [r6, #24]
 80066c4:	9900      	ldr	r1, [sp, #0]
 80066c6:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80066ca:	2f00      	cmp	r7, #0
 80066cc:	d0c4      	beq.n	8006658 <ai_platform_inputs_get+0xac>
 80066ce:	2200      	movs	r2, #0
 80066d0:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 80066d4:	6832      	ldr	r2, [r6, #0]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	b112      	cbz	r2, 80066e0 <ai_platform_inputs_get+0x134>
 80066da:	8852      	ldrh	r2, [r2, #2]
 80066dc:	2a00      	cmp	r2, #0
 80066de:	d1b6      	bne.n	800664e <ai_platform_inputs_get+0xa2>
 80066e0:	69b2      	ldr	r2, [r6, #24]
 80066e2:	2700      	movs	r7, #0
 80066e4:	e7b8      	b.n	8006658 <ai_platform_inputs_get+0xac>
 80066e6:	4a62      	ldr	r2, [pc, #392]	; (8006870 <ai_platform_inputs_get+0x2c4>)
 80066e8:	6813      	ldr	r3, [r2, #0]
 80066ea:	f023 0301 	bic.w	r3, r3, #1
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	f7ff faf2 	bl	8005cd8 <_ai_platform_acquire_crc>
 80066f4:	4b5f      	ldr	r3, [pc, #380]	; (8006874 <ai_platform_inputs_get+0x2c8>)
 80066f6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006700:	185a      	adds	r2, r3, r1
 8006702:	2a01      	cmp	r2, #1
 8006704:	d91d      	bls.n	8006742 <ai_platform_inputs_get+0x196>
 8006706:	f240 4249 	movw	r2, #1097	; 0x449
 800670a:	4293      	cmp	r3, r2
 800670c:	d019      	beq.n	8006742 <ai_platform_inputs_get+0x196>
 800670e:	4a5a      	ldr	r2, [pc, #360]	; (8006878 <ai_platform_inputs_get+0x2cc>)
 8006710:	6813      	ldr	r3, [r2, #0]
 8006712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006716:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800671a:	d037      	beq.n	800678c <ai_platform_inputs_get+0x1e0>
 800671c:	6813      	ldr	r3, [r2, #0]
 800671e:	f240 4183 	movw	r1, #1155	; 0x483
 8006722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006726:	428b      	cmp	r3, r1
 8006728:	d061      	beq.n	80067ee <ai_platform_inputs_get+0x242>
 800672a:	6813      	ldr	r3, [r2, #0]
 800672c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006730:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006734:	d07e      	beq.n	8006834 <ai_platform_inputs_get+0x288>
 8006736:	f7ff fad1 	bl	8005cdc <_ai_platform_release_crc>
 800673a:	2000      	movs	r0, #0
 800673c:	b005      	add	sp, #20
 800673e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006742:	4a4e      	ldr	r2, [pc, #312]	; (800687c <ai_platform_inputs_get+0x2d0>)
 8006744:	2301      	movs	r3, #1
 8006746:	6093      	str	r3, [r2, #8]
 8006748:	6893      	ldr	r3, [r2, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1fc      	bne.n	8006748 <ai_platform_inputs_get+0x19c>
 800674e:	494c      	ldr	r1, [pc, #304]	; (8006880 <ai_platform_inputs_get+0x2d4>)
 8006750:	4b4c      	ldr	r3, [pc, #304]	; (8006884 <ai_platform_inputs_get+0x2d8>)
 8006752:	6011      	str	r1, [r2, #0]
 8006754:	6812      	ldr	r2, [r2, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d0ed      	beq.n	8006736 <ai_platform_inputs_get+0x18a>
 800675a:	e7fe      	b.n	800675a <ai_platform_inputs_get+0x1ae>
 800675c:	4a47      	ldr	r2, [pc, #284]	; (800687c <ai_platform_inputs_get+0x2d0>)
 800675e:	2301      	movs	r3, #1
 8006760:	6093      	str	r3, [r2, #8]
 8006762:	6893      	ldr	r3, [r2, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1fc      	bne.n	8006762 <ai_platform_inputs_get+0x1b6>
 8006768:	4b45      	ldr	r3, [pc, #276]	; (8006880 <ai_platform_inputs_get+0x2d4>)
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	4b45      	ldr	r3, [pc, #276]	; (8006884 <ai_platform_inputs_get+0x2d8>)
 800676e:	6812      	ldr	r2, [r2, #0]
 8006770:	429a      	cmp	r2, r3
 8006772:	f43f af55 	beq.w	8006620 <ai_platform_inputs_get+0x74>
 8006776:	e7fe      	b.n	8006776 <ai_platform_inputs_get+0x1ca>
 8006778:	2218      	movs	r2, #24
 800677a:	2111      	movs	r1, #17
 800677c:	f109 0010 	add.w	r0, r9, #16
 8006780:	f001 fd1e 	bl	80081c0 <core_set_error>
 8006784:	2000      	movs	r0, #0
 8006786:	b005      	add	sp, #20
 8006788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678c:	4a3e      	ldr	r2, [pc, #248]	; (8006888 <ai_platform_inputs_get+0x2dc>)
 800678e:	2301      	movs	r3, #1
 8006790:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006794:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1fb      	bne.n	8006794 <ai_platform_inputs_get+0x1e8>
 800679c:	4938      	ldr	r1, [pc, #224]	; (8006880 <ai_platform_inputs_get+0x2d4>)
 800679e:	4b39      	ldr	r3, [pc, #228]	; (8006884 <ai_platform_inputs_get+0x2d8>)
 80067a0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80067a4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d0c4      	beq.n	8006736 <ai_platform_inputs_get+0x18a>
 80067ac:	e7fe      	b.n	80067ac <ai_platform_inputs_get+0x200>
 80067ae:	4a36      	ldr	r2, [pc, #216]	; (8006888 <ai_platform_inputs_get+0x2dc>)
 80067b0:	2301      	movs	r3, #1
 80067b2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80067b6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1fb      	bne.n	80067b6 <ai_platform_inputs_get+0x20a>
 80067be:	4b30      	ldr	r3, [pc, #192]	; (8006880 <ai_platform_inputs_get+0x2d4>)
 80067c0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80067c4:	4b2f      	ldr	r3, [pc, #188]	; (8006884 <ai_platform_inputs_get+0x2d8>)
 80067c6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80067ca:	429a      	cmp	r2, r3
 80067cc:	f43f af28 	beq.w	8006620 <ai_platform_inputs_get+0x74>
 80067d0:	e7fe      	b.n	80067d0 <ai_platform_inputs_get+0x224>
 80067d2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80067d6:	2c00      	cmp	r4, #0
 80067d8:	d0ce      	beq.n	8006778 <ai_platform_inputs_get+0x1cc>
 80067da:	f8da 3008 	ldr.w	r3, [sl, #8]
 80067de:	6858      	ldr	r0, [r3, #4]
 80067e0:	9b02      	ldr	r3, [sp, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0aa      	beq.n	800673c <ai_platform_inputs_get+0x190>
 80067e6:	801c      	strh	r4, [r3, #0]
 80067e8:	b005      	add	sp, #20
 80067ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ee:	4a26      	ldr	r2, [pc, #152]	; (8006888 <ai_platform_inputs_get+0x2dc>)
 80067f0:	2301      	movs	r3, #1
 80067f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80067f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1fb      	bne.n	80067f6 <ai_platform_inputs_get+0x24a>
 80067fe:	4920      	ldr	r1, [pc, #128]	; (8006880 <ai_platform_inputs_get+0x2d4>)
 8006800:	4b20      	ldr	r3, [pc, #128]	; (8006884 <ai_platform_inputs_get+0x2d8>)
 8006802:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006806:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800680a:	429a      	cmp	r2, r3
 800680c:	d093      	beq.n	8006736 <ai_platform_inputs_get+0x18a>
 800680e:	e7fe      	b.n	800680e <ai_platform_inputs_get+0x262>
 8006810:	4a1d      	ldr	r2, [pc, #116]	; (8006888 <ai_platform_inputs_get+0x2dc>)
 8006812:	2301      	movs	r3, #1
 8006814:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006818:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1fb      	bne.n	8006818 <ai_platform_inputs_get+0x26c>
 8006820:	4b17      	ldr	r3, [pc, #92]	; (8006880 <ai_platform_inputs_get+0x2d4>)
 8006822:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006826:	4b17      	ldr	r3, [pc, #92]	; (8006884 <ai_platform_inputs_get+0x2d8>)
 8006828:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800682c:	429a      	cmp	r2, r3
 800682e:	f43f aef7 	beq.w	8006620 <ai_platform_inputs_get+0x74>
 8006832:	e7fe      	b.n	8006832 <ai_platform_inputs_get+0x286>
 8006834:	4a11      	ldr	r2, [pc, #68]	; (800687c <ai_platform_inputs_get+0x2d0>)
 8006836:	2301      	movs	r3, #1
 8006838:	6093      	str	r3, [r2, #8]
 800683a:	6893      	ldr	r3, [r2, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1fc      	bne.n	800683a <ai_platform_inputs_get+0x28e>
 8006840:	490f      	ldr	r1, [pc, #60]	; (8006880 <ai_platform_inputs_get+0x2d4>)
 8006842:	4b10      	ldr	r3, [pc, #64]	; (8006884 <ai_platform_inputs_get+0x2d8>)
 8006844:	6011      	str	r1, [r2, #0]
 8006846:	6812      	ldr	r2, [r2, #0]
 8006848:	429a      	cmp	r2, r3
 800684a:	f43f af74 	beq.w	8006736 <ai_platform_inputs_get+0x18a>
 800684e:	e7fe      	b.n	800684e <ai_platform_inputs_get+0x2a2>
 8006850:	4a0a      	ldr	r2, [pc, #40]	; (800687c <ai_platform_inputs_get+0x2d0>)
 8006852:	2301      	movs	r3, #1
 8006854:	6093      	str	r3, [r2, #8]
 8006856:	6893      	ldr	r3, [r2, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1fc      	bne.n	8006856 <ai_platform_inputs_get+0x2aa>
 800685c:	4b08      	ldr	r3, [pc, #32]	; (8006880 <ai_platform_inputs_get+0x2d4>)
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	4b08      	ldr	r3, [pc, #32]	; (8006884 <ai_platform_inputs_get+0x2d8>)
 8006862:	6812      	ldr	r2, [r2, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	f43f aedb 	beq.w	8006620 <ai_platform_inputs_get+0x74>
 800686a:	e7fe      	b.n	800686a <ai_platform_inputs_get+0x2be>
 800686c:	a1c00100 	.word	0xa1c00100
 8006870:	e0002000 	.word	0xe0002000
 8006874:	e0042000 	.word	0xe0042000
 8006878:	5c001000 	.word	0x5c001000
 800687c:	40023000 	.word	0x40023000
 8006880:	f407a5c2 	.word	0xf407a5c2
 8006884:	b5e8b5cd 	.word	0xb5e8b5cd
 8006888:	58024000 	.word	0x58024000

0800688c <ai_platform_outputs_get>:
 800688c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006890:	b085      	sub	sp, #20
 8006892:	9102      	str	r1, [sp, #8]
 8006894:	2800      	cmp	r0, #0
 8006896:	f000 8092 	beq.w	80069be <ai_platform_outputs_get+0x132>
 800689a:	4ba9      	ldr	r3, [pc, #676]	; (8006b40 <ai_platform_outputs_get+0x2b4>)
 800689c:	4681      	mov	r9, r0
 800689e:	6802      	ldr	r2, [r0, #0]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	f040 808c 	bne.w	80069be <ai_platform_outputs_get+0x132>
 80068a6:	4aa7      	ldr	r2, [pc, #668]	; (8006b44 <ai_platform_outputs_get+0x2b8>)
 80068a8:	6813      	ldr	r3, [r2, #0]
 80068aa:	f023 0301 	bic.w	r3, r3, #1
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	f7ff fa12 	bl	8005cd8 <_ai_platform_acquire_crc>
 80068b4:	4ba4      	ldr	r3, [pc, #656]	; (8006b48 <ai_platform_outputs_get+0x2bc>)
 80068b6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068c0:	189a      	adds	r2, r3, r2
 80068c2:	2a01      	cmp	r2, #1
 80068c4:	f240 80b6 	bls.w	8006a34 <ai_platform_outputs_get+0x1a8>
 80068c8:	f240 4249 	movw	r2, #1097	; 0x449
 80068cc:	4293      	cmp	r3, r2
 80068ce:	f000 80b1 	beq.w	8006a34 <ai_platform_outputs_get+0x1a8>
 80068d2:	4a9e      	ldr	r2, [pc, #632]	; (8006b4c <ai_platform_outputs_get+0x2c0>)
 80068d4:	6813      	ldr	r3, [r2, #0]
 80068d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068da:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80068de:	f000 80d0 	beq.w	8006a82 <ai_platform_outputs_get+0x1f6>
 80068e2:	6813      	ldr	r3, [r2, #0]
 80068e4:	f240 4183 	movw	r1, #1155	; 0x483
 80068e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068ec:	428b      	cmp	r3, r1
 80068ee:	f000 80f9 	beq.w	8006ae4 <ai_platform_outputs_get+0x258>
 80068f2:	6813      	ldr	r3, [r2, #0]
 80068f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068f8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80068fc:	f000 8112 	beq.w	8006b24 <ai_platform_outputs_get+0x298>
 8006900:	f7ff f9ec 	bl	8005cdc <_ai_platform_release_crc>
 8006904:	9a02      	ldr	r2, [sp, #8]
 8006906:	b10a      	cbz	r2, 800690c <ai_platform_outputs_get+0x80>
 8006908:	2300      	movs	r3, #0
 800690a:	8013      	strh	r3, [r2, #0]
 800690c:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8006910:	2b01      	cmp	r3, #1
 8006912:	f240 80ae 	bls.w	8006a72 <ai_platform_outputs_get+0x1e6>
 8006916:	2100      	movs	r1, #0
 8006918:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800691c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006920:	460d      	mov	r5, r1
 8006922:	4689      	mov	r9, r1
 8006924:	e016      	b.n	8006954 <ai_platform_outputs_get+0xc8>
 8006926:	9a01      	ldr	r2, [sp, #4]
 8006928:	2301      	movs	r3, #1
 800692a:	f848 3002 	str.w	r3, [r8, r2]
 800692e:	69b2      	ldr	r2, [r6, #24]
 8006930:	f04f 0301 	mov.w	r3, #1
 8006934:	6856      	ldr	r6, [r2, #4]
 8006936:	3501      	adds	r5, #1
 8006938:	f109 091c 	add.w	r9, r9, #28
 800693c:	7523      	strb	r3, [r4, #20]
 800693e:	2300      	movs	r3, #0
 8006940:	60a7      	str	r7, [r4, #8]
 8006942:	61a1      	str	r1, [r4, #24]
 8006944:	e9c4 0c00 	strd	r0, ip, [r4]
 8006948:	6960      	ldr	r0, [r4, #20]
 800694a:	f36b 201f 	bfi	r0, fp, #8, #24
 800694e:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8006952:	6160      	str	r0, [r4, #20]
 8006954:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006958:	b2ac      	uxth	r4, r5
 800695a:	42ab      	cmp	r3, r5
 800695c:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	f240 80a0 	bls.w	8006aa6 <ai_platform_outputs_get+0x21a>
 8006966:	f8da 3010 	ldr.w	r3, [sl, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 809b 	beq.w	8006aa6 <ai_platform_outputs_get+0x21a>
 8006970:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006974:	2e00      	cmp	r6, #0
 8006976:	f000 8096 	beq.w	8006aa6 <ai_platform_outputs_get+0x21a>
 800697a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800697e:	69b2      	ldr	r2, [r6, #24]
 8006980:	68f1      	ldr	r1, [r6, #12]
 8006982:	6810      	ldr	r0, [r2, #0]
 8006984:	9100      	str	r1, [sp, #0]
 8006986:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800698a:	68b3      	ldr	r3, [r6, #8]
 800698c:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006990:	444c      	add	r4, r9
 8006992:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006996:	f003 fecf 	bl	800a738 <ai_array_to_buffer_fmt>
 800699a:	69b2      	ldr	r2, [r6, #24]
 800699c:	9900      	ldr	r1, [sp, #0]
 800699e:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80069a2:	2f00      	cmp	r7, #0
 80069a4:	d0c4      	beq.n	8006930 <ai_platform_outputs_get+0xa4>
 80069a6:	2200      	movs	r2, #0
 80069a8:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 80069ac:	6832      	ldr	r2, [r6, #0]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	b112      	cbz	r2, 80069b8 <ai_platform_outputs_get+0x12c>
 80069b2:	8852      	ldrh	r2, [r2, #2]
 80069b4:	2a00      	cmp	r2, #0
 80069b6:	d1b6      	bne.n	8006926 <ai_platform_outputs_get+0x9a>
 80069b8:	69b2      	ldr	r2, [r6, #24]
 80069ba:	2700      	movs	r7, #0
 80069bc:	e7b8      	b.n	8006930 <ai_platform_outputs_get+0xa4>
 80069be:	4a61      	ldr	r2, [pc, #388]	; (8006b44 <ai_platform_outputs_get+0x2b8>)
 80069c0:	6813      	ldr	r3, [r2, #0]
 80069c2:	f023 0301 	bic.w	r3, r3, #1
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	f7ff f986 	bl	8005cd8 <_ai_platform_acquire_crc>
 80069cc:	4b5e      	ldr	r3, [pc, #376]	; (8006b48 <ai_platform_outputs_get+0x2bc>)
 80069ce:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069d8:	185a      	adds	r2, r3, r1
 80069da:	2a01      	cmp	r2, #1
 80069dc:	d91d      	bls.n	8006a1a <ai_platform_outputs_get+0x18e>
 80069de:	f240 4249 	movw	r2, #1097	; 0x449
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d019      	beq.n	8006a1a <ai_platform_outputs_get+0x18e>
 80069e6:	4a59      	ldr	r2, [pc, #356]	; (8006b4c <ai_platform_outputs_get+0x2c0>)
 80069e8:	6813      	ldr	r3, [r2, #0]
 80069ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069ee:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80069f2:	d02d      	beq.n	8006a50 <ai_platform_outputs_get+0x1c4>
 80069f4:	6813      	ldr	r3, [r2, #0]
 80069f6:	f240 4183 	movw	r1, #1155	; 0x483
 80069fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069fe:	428b      	cmp	r3, r1
 8006a00:	d05f      	beq.n	8006ac2 <ai_platform_outputs_get+0x236>
 8006a02:	6813      	ldr	r3, [r2, #0]
 8006a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a08:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006a0c:	d07c      	beq.n	8006b08 <ai_platform_outputs_get+0x27c>
 8006a0e:	f7ff f965 	bl	8005cdc <_ai_platform_release_crc>
 8006a12:	2000      	movs	r0, #0
 8006a14:	b005      	add	sp, #20
 8006a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1a:	4a4d      	ldr	r2, [pc, #308]	; (8006b50 <ai_platform_outputs_get+0x2c4>)
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	6093      	str	r3, [r2, #8]
 8006a20:	6893      	ldr	r3, [r2, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1fc      	bne.n	8006a20 <ai_platform_outputs_get+0x194>
 8006a26:	494b      	ldr	r1, [pc, #300]	; (8006b54 <ai_platform_outputs_get+0x2c8>)
 8006a28:	4b4b      	ldr	r3, [pc, #300]	; (8006b58 <ai_platform_outputs_get+0x2cc>)
 8006a2a:	6011      	str	r1, [r2, #0]
 8006a2c:	6812      	ldr	r2, [r2, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d0ed      	beq.n	8006a0e <ai_platform_outputs_get+0x182>
 8006a32:	e7fe      	b.n	8006a32 <ai_platform_outputs_get+0x1a6>
 8006a34:	4a46      	ldr	r2, [pc, #280]	; (8006b50 <ai_platform_outputs_get+0x2c4>)
 8006a36:	2301      	movs	r3, #1
 8006a38:	6093      	str	r3, [r2, #8]
 8006a3a:	6893      	ldr	r3, [r2, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1fc      	bne.n	8006a3a <ai_platform_outputs_get+0x1ae>
 8006a40:	4b44      	ldr	r3, [pc, #272]	; (8006b54 <ai_platform_outputs_get+0x2c8>)
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	4b44      	ldr	r3, [pc, #272]	; (8006b58 <ai_platform_outputs_get+0x2cc>)
 8006a46:	6812      	ldr	r2, [r2, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	f43f af59 	beq.w	8006900 <ai_platform_outputs_get+0x74>
 8006a4e:	e7fe      	b.n	8006a4e <ai_platform_outputs_get+0x1c2>
 8006a50:	4a42      	ldr	r2, [pc, #264]	; (8006b5c <ai_platform_outputs_get+0x2d0>)
 8006a52:	2301      	movs	r3, #1
 8006a54:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006a58:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1fb      	bne.n	8006a58 <ai_platform_outputs_get+0x1cc>
 8006a60:	493c      	ldr	r1, [pc, #240]	; (8006b54 <ai_platform_outputs_get+0x2c8>)
 8006a62:	4b3d      	ldr	r3, [pc, #244]	; (8006b58 <ai_platform_outputs_get+0x2cc>)
 8006a64:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006a68:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d0ce      	beq.n	8006a0e <ai_platform_outputs_get+0x182>
 8006a70:	e7fe      	b.n	8006a70 <ai_platform_outputs_get+0x1e4>
 8006a72:	2218      	movs	r2, #24
 8006a74:	2111      	movs	r1, #17
 8006a76:	f109 0010 	add.w	r0, r9, #16
 8006a7a:	f001 fba1 	bl	80081c0 <core_set_error>
 8006a7e:	2000      	movs	r0, #0
 8006a80:	e7c8      	b.n	8006a14 <ai_platform_outputs_get+0x188>
 8006a82:	4a36      	ldr	r2, [pc, #216]	; (8006b5c <ai_platform_outputs_get+0x2d0>)
 8006a84:	2301      	movs	r3, #1
 8006a86:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006a8a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1fb      	bne.n	8006a8a <ai_platform_outputs_get+0x1fe>
 8006a92:	4b30      	ldr	r3, [pc, #192]	; (8006b54 <ai_platform_outputs_get+0x2c8>)
 8006a94:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006a98:	4b2f      	ldr	r3, [pc, #188]	; (8006b58 <ai_platform_outputs_get+0x2cc>)
 8006a9a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	f43f af2e 	beq.w	8006900 <ai_platform_outputs_get+0x74>
 8006aa4:	e7fe      	b.n	8006aa4 <ai_platform_outputs_get+0x218>
 8006aa6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006aaa:	2c00      	cmp	r4, #0
 8006aac:	d0e1      	beq.n	8006a72 <ai_platform_outputs_get+0x1e6>
 8006aae:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006ab2:	6858      	ldr	r0, [r3, #4]
 8006ab4:	9b02      	ldr	r3, [sp, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0ac      	beq.n	8006a14 <ai_platform_outputs_get+0x188>
 8006aba:	801c      	strh	r4, [r3, #0]
 8006abc:	b005      	add	sp, #20
 8006abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac2:	4a26      	ldr	r2, [pc, #152]	; (8006b5c <ai_platform_outputs_get+0x2d0>)
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006aca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1fb      	bne.n	8006aca <ai_platform_outputs_get+0x23e>
 8006ad2:	4920      	ldr	r1, [pc, #128]	; (8006b54 <ai_platform_outputs_get+0x2c8>)
 8006ad4:	4b20      	ldr	r3, [pc, #128]	; (8006b58 <ai_platform_outputs_get+0x2cc>)
 8006ad6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006ada:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d095      	beq.n	8006a0e <ai_platform_outputs_get+0x182>
 8006ae2:	e7fe      	b.n	8006ae2 <ai_platform_outputs_get+0x256>
 8006ae4:	4a1d      	ldr	r2, [pc, #116]	; (8006b5c <ai_platform_outputs_get+0x2d0>)
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006aec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1fb      	bne.n	8006aec <ai_platform_outputs_get+0x260>
 8006af4:	4b17      	ldr	r3, [pc, #92]	; (8006b54 <ai_platform_outputs_get+0x2c8>)
 8006af6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006afa:	4b17      	ldr	r3, [pc, #92]	; (8006b58 <ai_platform_outputs_get+0x2cc>)
 8006afc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006b00:	429a      	cmp	r2, r3
 8006b02:	f43f aefd 	beq.w	8006900 <ai_platform_outputs_get+0x74>
 8006b06:	e7fe      	b.n	8006b06 <ai_platform_outputs_get+0x27a>
 8006b08:	4a11      	ldr	r2, [pc, #68]	; (8006b50 <ai_platform_outputs_get+0x2c4>)
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	6093      	str	r3, [r2, #8]
 8006b0e:	6893      	ldr	r3, [r2, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1fc      	bne.n	8006b0e <ai_platform_outputs_get+0x282>
 8006b14:	490f      	ldr	r1, [pc, #60]	; (8006b54 <ai_platform_outputs_get+0x2c8>)
 8006b16:	4b10      	ldr	r3, [pc, #64]	; (8006b58 <ai_platform_outputs_get+0x2cc>)
 8006b18:	6011      	str	r1, [r2, #0]
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	f43f af76 	beq.w	8006a0e <ai_platform_outputs_get+0x182>
 8006b22:	e7fe      	b.n	8006b22 <ai_platform_outputs_get+0x296>
 8006b24:	4a0a      	ldr	r2, [pc, #40]	; (8006b50 <ai_platform_outputs_get+0x2c4>)
 8006b26:	2301      	movs	r3, #1
 8006b28:	6093      	str	r3, [r2, #8]
 8006b2a:	6893      	ldr	r3, [r2, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1fc      	bne.n	8006b2a <ai_platform_outputs_get+0x29e>
 8006b30:	4b08      	ldr	r3, [pc, #32]	; (8006b54 <ai_platform_outputs_get+0x2c8>)
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	4b08      	ldr	r3, [pc, #32]	; (8006b58 <ai_platform_outputs_get+0x2cc>)
 8006b36:	6812      	ldr	r2, [r2, #0]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	f43f aee1 	beq.w	8006900 <ai_platform_outputs_get+0x74>
 8006b3e:	e7fe      	b.n	8006b3e <ai_platform_outputs_get+0x2b2>
 8006b40:	a1c00100 	.word	0xa1c00100
 8006b44:	e0002000 	.word	0xe0002000
 8006b48:	e0042000 	.word	0xe0042000
 8006b4c:	5c001000 	.word	0x5c001000
 8006b50:	40023000 	.word	0x40023000
 8006b54:	f407a5c2 	.word	0xf407a5c2
 8006b58:	b5e8b5cd 	.word	0xb5e8b5cd
 8006b5c:	58024000 	.word	0x58024000

08006b60 <ai_platform_api_get_network_report>:
 8006b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	b089      	sub	sp, #36	; 0x24
 8006b66:	4683      	mov	fp, r0
 8006b68:	9101      	str	r1, [sp, #4]
 8006b6a:	b128      	cbz	r0, 8006b78 <ai_platform_api_get_network_report+0x18>
 8006b6c:	4b9f      	ldr	r3, [pc, #636]	; (8006dec <ai_platform_api_get_network_report+0x28c>)
 8006b6e:	6802      	ldr	r2, [r0, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	bf18      	it	ne
 8006b74:	f04f 0b00 	movne.w	fp, #0
 8006b78:	4a9d      	ldr	r2, [pc, #628]	; (8006df0 <ai_platform_api_get_network_report+0x290>)
 8006b7a:	f46f 688a 	mvn.w	r8, #1104	; 0x450
 8006b7e:	6813      	ldr	r3, [r2, #0]
 8006b80:	f023 0301 	bic.w	r3, r3, #1
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	f7ff f8a7 	bl	8005cd8 <_ai_platform_acquire_crc>
 8006b8a:	4b9a      	ldr	r3, [pc, #616]	; (8006df4 <ai_platform_api_get_network_report+0x294>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b92:	eb03 0208 	add.w	r2, r3, r8
 8006b96:	2a01      	cmp	r2, #1
 8006b98:	d934      	bls.n	8006c04 <ai_platform_api_get_network_report+0xa4>
 8006b9a:	f240 4249 	movw	r2, #1097	; 0x449
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d030      	beq.n	8006c04 <ai_platform_api_get_network_report+0xa4>
 8006ba2:	4a95      	ldr	r2, [pc, #596]	; (8006df8 <ai_platform_api_get_network_report+0x298>)
 8006ba4:	6813      	ldr	r3, [r2, #0]
 8006ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006baa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006bae:	f000 808e 	beq.w	8006cce <ai_platform_api_get_network_report+0x16e>
 8006bb2:	6813      	ldr	r3, [r2, #0]
 8006bb4:	f240 4183 	movw	r1, #1155	; 0x483
 8006bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bbc:	428b      	cmp	r3, r1
 8006bbe:	f000 823c 	beq.w	800703a <ai_platform_api_get_network_report+0x4da>
 8006bc2:	6813      	ldr	r3, [r2, #0]
 8006bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bc8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006bcc:	f000 809e 	beq.w	8006d0c <ai_platform_api_get_network_report+0x1ac>
 8006bd0:	f7ff f884 	bl	8005cdc <_ai_platform_release_crc>
 8006bd4:	9801      	ldr	r0, [sp, #4]
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	bf18      	it	ne
 8006bda:	f1bb 0f00 	cmpne.w	fp, #0
 8006bde:	bf0c      	ite	eq
 8006be0:	2301      	moveq	r3, #1
 8006be2:	2300      	movne	r3, #0
 8006be4:	9302      	str	r3, [sp, #8]
 8006be6:	f000 809f 	beq.w	8006d28 <ai_platform_api_get_network_report+0x1c8>
 8006bea:	4619      	mov	r1, r3
 8006bec:	6743      	str	r3, [r0, #116]	; 0x74
 8006bee:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8006bf2:	b1a3      	cbz	r3, 8006c1e <ai_platform_api_get_network_report+0xbe>
 8006bf4:	3101      	adds	r1, #1
 8006bf6:	6741      	str	r1, [r0, #116]	; 0x74
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	b182      	cbz	r2, 8006c1e <ai_platform_api_get_network_report+0xbe>
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d00e      	beq.n	8006c1e <ai_platform_api_get_network_report+0xbe>
 8006c00:	4613      	mov	r3, r2
 8006c02:	e7f6      	b.n	8006bf2 <ai_platform_api_get_network_report+0x92>
 8006c04:	4a7d      	ldr	r2, [pc, #500]	; (8006dfc <ai_platform_api_get_network_report+0x29c>)
 8006c06:	2301      	movs	r3, #1
 8006c08:	6093      	str	r3, [r2, #8]
 8006c0a:	6893      	ldr	r3, [r2, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1fc      	bne.n	8006c0a <ai_platform_api_get_network_report+0xaa>
 8006c10:	4b7b      	ldr	r3, [pc, #492]	; (8006e00 <ai_platform_api_get_network_report+0x2a0>)
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	4b7b      	ldr	r3, [pc, #492]	; (8006e04 <ai_platform_api_get_network_report+0x2a4>)
 8006c16:	6812      	ldr	r2, [r2, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d0d9      	beq.n	8006bd0 <ai_platform_api_get_network_report+0x70>
 8006c1c:	e7fe      	b.n	8006c1c <ai_platform_api_get_network_report+0xbc>
 8006c1e:	2900      	cmp	r1, #0
 8006c20:	f000 8227 	beq.w	8007072 <ai_platform_api_get_network_report+0x512>
 8006c24:	f8bb 302c 	ldrh.w	r3, [fp, #44]	; 0x2c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d062      	beq.n	8006cf2 <ai_platform_api_get_network_report+0x192>
 8006c2c:	f8db 9030 	ldr.w	r9, [fp, #48]	; 0x30
 8006c30:	f1b9 0f00 	cmp.w	r9, #0
 8006c34:	d05d      	beq.n	8006cf2 <ai_platform_api_get_network_report+0x192>
 8006c36:	f04f 0a00 	mov.w	sl, #0
 8006c3a:	f8cd b00c 	str.w	fp, [sp, #12]
 8006c3e:	4655      	mov	r5, sl
 8006c40:	e016      	b.n	8006c70 <ai_platform_api_get_network_report+0x110>
 8006c42:	2201      	movs	r2, #1
 8006c44:	f847 200e 	str.w	r2, [r7, lr]
 8006c48:	69b2      	ldr	r2, [r6, #24]
 8006c4a:	6852      	ldr	r2, [r2, #4]
 8006c4c:	3501      	adds	r5, #1
 8006c4e:	60a3      	str	r3, [r4, #8]
 8006c50:	f04f 0301 	mov.w	r3, #1
 8006c54:	f10a 0a1c 	add.w	sl, sl, #28
 8006c58:	6122      	str	r2, [r4, #16]
 8006c5a:	7523      	strb	r3, [r4, #20]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f8c4 b018 	str.w	fp, [r4, #24]
 8006c62:	60e3      	str	r3, [r4, #12]
 8006c64:	6963      	ldr	r3, [r4, #20]
 8006c66:	f368 231f 	bfi	r3, r8, #8, #24
 8006c6a:	e9c4 0100 	strd	r0, r1, [r4]
 8006c6e:	6163      	str	r3, [r4, #20]
 8006c70:	f8b9 3000 	ldrh.w	r3, [r9]
 8006c74:	b2aa      	uxth	r2, r5
 8006c76:	42ab      	cmp	r3, r5
 8006c78:	d95c      	bls.n	8006d34 <ai_platform_api_get_network_report+0x1d4>
 8006c7a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d058      	beq.n	8006d34 <ai_platform_api_get_network_report+0x1d4>
 8006c82:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006c86:	2e00      	cmp	r6, #0
 8006c88:	d054      	beq.n	8006d34 <ai_platform_api_get_network_report+0x1d4>
 8006c8a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006c8e:	69b2      	ldr	r2, [r6, #24]
 8006c90:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8006c94:	6810      	ldr	r0, [r2, #0]
 8006c96:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006c9a:	68b3      	ldr	r3, [r6, #8]
 8006c9c:	4454      	add	r4, sl
 8006c9e:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8006ca2:	f003 fd49 	bl	800a738 <ai_array_to_buffer_fmt>
 8006ca6:	69b2      	ldr	r2, [r6, #24]
 8006ca8:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8006cac:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8006cb0:	6891      	ldr	r1, [r2, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0c9      	beq.n	8006c4a <ai_platform_api_get_network_report+0xea>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8006cbc:	6832      	ldr	r2, [r6, #0]
 8006cbe:	605a      	str	r2, [r3, #4]
 8006cc0:	b112      	cbz	r2, 8006cc8 <ai_platform_api_get_network_report+0x168>
 8006cc2:	8852      	ldrh	r2, [r2, #2]
 8006cc4:	2a00      	cmp	r2, #0
 8006cc6:	d1bc      	bne.n	8006c42 <ai_platform_api_get_network_report+0xe2>
 8006cc8:	69b2      	ldr	r2, [r6, #24]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e7bd      	b.n	8006c4a <ai_platform_api_get_network_report+0xea>
 8006cce:	4a4e      	ldr	r2, [pc, #312]	; (8006e08 <ai_platform_api_get_network_report+0x2a8>)
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006cd6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1fb      	bne.n	8006cd6 <ai_platform_api_get_network_report+0x176>
 8006cde:	4b48      	ldr	r3, [pc, #288]	; (8006e00 <ai_platform_api_get_network_report+0x2a0>)
 8006ce0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006ce4:	4b47      	ldr	r3, [pc, #284]	; (8006e04 <ai_platform_api_get_network_report+0x2a4>)
 8006ce6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006cea:	429a      	cmp	r2, r3
 8006cec:	f43f af70 	beq.w	8006bd0 <ai_platform_api_get_network_report+0x70>
 8006cf0:	e7fe      	b.n	8006cf0 <ai_platform_api_get_network_report+0x190>
 8006cf2:	9901      	ldr	r1, [sp, #4]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2218      	movs	r2, #24
 8006cf8:	f10b 0010 	add.w	r0, fp, #16
 8006cfc:	860b      	strh	r3, [r1, #48]	; 0x30
 8006cfe:	2112      	movs	r1, #18
 8006d00:	f001 fa5e 	bl	80081c0 <core_set_error>
 8006d04:	9802      	ldr	r0, [sp, #8]
 8006d06:	b009      	add	sp, #36	; 0x24
 8006d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0c:	4a3b      	ldr	r2, [pc, #236]	; (8006dfc <ai_platform_api_get_network_report+0x29c>)
 8006d0e:	2301      	movs	r3, #1
 8006d10:	6093      	str	r3, [r2, #8]
 8006d12:	6893      	ldr	r3, [r2, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1fc      	bne.n	8006d12 <ai_platform_api_get_network_report+0x1b2>
 8006d18:	4b39      	ldr	r3, [pc, #228]	; (8006e00 <ai_platform_api_get_network_report+0x2a0>)
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	4b39      	ldr	r3, [pc, #228]	; (8006e04 <ai_platform_api_get_network_report+0x2a4>)
 8006d1e:	6812      	ldr	r2, [r2, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	f43f af55 	beq.w	8006bd0 <ai_platform_api_get_network_report+0x70>
 8006d26:	e7fe      	b.n	8006d26 <ai_platform_api_get_network_report+0x1c6>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	9302      	str	r3, [sp, #8]
 8006d2c:	9802      	ldr	r0, [sp, #8]
 8006d2e:	b009      	add	sp, #36	; 0x24
 8006d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d34:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006d38:	2a00      	cmp	r2, #0
 8006d3a:	d0da      	beq.n	8006cf2 <ai_platform_api_get_network_report+0x192>
 8006d3c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006d40:	9901      	ldr	r1, [sp, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	860a      	strh	r2, [r1, #48]	; 0x30
 8006d46:	634b      	str	r3, [r1, #52]	; 0x34
 8006d48:	f8bb 302c 	ldrh.w	r3, [fp, #44]	; 0x2c
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	f240 8186 	bls.w	800705e <ai_platform_api_get_network_report+0x4fe>
 8006d52:	f04f 0900 	mov.w	r9, #0
 8006d56:	f8db 8030 	ldr.w	r8, [fp, #48]	; 0x30
 8006d5a:	464d      	mov	r5, r9
 8006d5c:	e016      	b.n	8006d8c <ai_platform_api_get_network_report+0x22c>
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f847 200e 	str.w	r2, [r7, lr]
 8006d64:	69b2      	ldr	r2, [r6, #24]
 8006d66:	6852      	ldr	r2, [r2, #4]
 8006d68:	3501      	adds	r5, #1
 8006d6a:	60a3      	str	r3, [r4, #8]
 8006d6c:	f04f 0301 	mov.w	r3, #1
 8006d70:	f109 091c 	add.w	r9, r9, #28
 8006d74:	6122      	str	r2, [r4, #16]
 8006d76:	7523      	strb	r3, [r4, #20]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f8c4 b018 	str.w	fp, [r4, #24]
 8006d7e:	60e3      	str	r3, [r4, #12]
 8006d80:	6963      	ldr	r3, [r4, #20]
 8006d82:	f36a 231f 	bfi	r3, sl, #8, #24
 8006d86:	e9c4 0100 	strd	r0, r1, [r4]
 8006d8a:	6163      	str	r3, [r4, #20]
 8006d8c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006d90:	b2aa      	uxth	r2, r5
 8006d92:	42ab      	cmp	r3, r5
 8006d94:	d93a      	bls.n	8006e0c <ai_platform_api_get_network_report+0x2ac>
 8006d96:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d036      	beq.n	8006e0c <ai_platform_api_get_network_report+0x2ac>
 8006d9e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006da2:	2e00      	cmp	r6, #0
 8006da4:	d032      	beq.n	8006e0c <ai_platform_api_get_network_report+0x2ac>
 8006da6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006daa:	69b2      	ldr	r2, [r6, #24]
 8006dac:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8006db0:	6810      	ldr	r0, [r2, #0]
 8006db2:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006db6:	68b3      	ldr	r3, [r6, #8]
 8006db8:	444c      	add	r4, r9
 8006dba:	f3c3 2a17 	ubfx	sl, r3, #8, #24
 8006dbe:	f003 fcbb 	bl	800a738 <ai_array_to_buffer_fmt>
 8006dc2:	69b2      	ldr	r2, [r6, #24]
 8006dc4:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8006dc8:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8006dcc:	6891      	ldr	r1, [r2, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0c9      	beq.n	8006d66 <ai_platform_api_get_network_report+0x206>
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8006dd8:	6832      	ldr	r2, [r6, #0]
 8006dda:	605a      	str	r2, [r3, #4]
 8006ddc:	b112      	cbz	r2, 8006de4 <ai_platform_api_get_network_report+0x284>
 8006dde:	8852      	ldrh	r2, [r2, #2]
 8006de0:	2a00      	cmp	r2, #0
 8006de2:	d1bc      	bne.n	8006d5e <ai_platform_api_get_network_report+0x1fe>
 8006de4:	69b2      	ldr	r2, [r6, #24]
 8006de6:	2300      	movs	r3, #0
 8006de8:	e7bd      	b.n	8006d66 <ai_platform_api_get_network_report+0x206>
 8006dea:	bf00      	nop
 8006dec:	a1c00100 	.word	0xa1c00100
 8006df0:	e0002000 	.word	0xe0002000
 8006df4:	e0042000 	.word	0xe0042000
 8006df8:	5c001000 	.word	0x5c001000
 8006dfc:	40023000 	.word	0x40023000
 8006e00:	f407a5c2 	.word	0xf407a5c2
 8006e04:	b5e8b5cd 	.word	0xb5e8b5cd
 8006e08:	58024000 	.word	0x58024000
 8006e0c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006e10:	2a00      	cmp	r2, #0
 8006e12:	f000 8124 	beq.w	800705e <ai_platform_api_get_network_report+0x4fe>
 8006e16:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006e1a:	f10b 0524 	add.w	r5, fp, #36	; 0x24
 8006e1e:	9901      	ldr	r1, [sp, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	4628      	mov	r0, r5
 8006e24:	864a      	strh	r2, [r1, #50]	; 0x32
 8006e26:	638b      	str	r3, [r1, #56]	; 0x38
 8006e28:	f7fe ff3c 	bl	8005ca4 <ai_buffer_array_sane>
 8006e2c:	9002      	str	r0, [sp, #8]
 8006e2e:	b968      	cbnz	r0, 8006e4c <ai_platform_api_get_network_report+0x2ec>
 8006e30:	4628      	mov	r0, r5
 8006e32:	f7fe ff37 	bl	8005ca4 <ai_buffer_array_sane>
 8006e36:	b148      	cbz	r0, 8006e4c <ai_platform_api_get_network_report+0x2ec>
 8006e38:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
 8006e3c:	b133      	cbz	r3, 8006e4c <ai_platform_api_get_network_report+0x2ec>
 8006e3e:	2213      	movs	r2, #19
 8006e40:	2111      	movs	r1, #17
 8006e42:	f10b 0010 	add.w	r0, fp, #16
 8006e46:	f001 f9bb 	bl	80081c0 <core_set_error>
 8006e4a:	e75b      	b.n	8006d04 <ai_platform_api_get_network_report+0x1a4>
 8006e4c:	f10b 061c 	add.w	r6, fp, #28
 8006e50:	4630      	mov	r0, r6
 8006e52:	f7fe ff27 	bl	8005ca4 <ai_buffer_array_sane>
 8006e56:	9002      	str	r0, [sp, #8]
 8006e58:	b928      	cbnz	r0, 8006e66 <ai_platform_api_get_network_report+0x306>
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	f7fe ff22 	bl	8005ca4 <ai_buffer_array_sane>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	f040 811b 	bne.w	800709c <ai_platform_api_get_network_report+0x53c>
 8006e66:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006e6a:	9a01      	ldr	r2, [sp, #4]
 8006e6c:	6793      	str	r3, [r2, #120]	; 0x78
 8006e6e:	4ab1      	ldr	r2, [pc, #708]	; (8007134 <ai_platform_api_get_network_report+0x5d4>)
 8006e70:	6813      	ldr	r3, [r2, #0]
 8006e72:	f023 0301 	bic.w	r3, r3, #1
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	f7fe ff2e 	bl	8005cd8 <_ai_platform_acquire_crc>
 8006e7c:	4bae      	ldr	r3, [pc, #696]	; (8007138 <ai_platform_api_get_network_report+0x5d8>)
 8006e7e:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e88:	eb03 020e 	add.w	r2, r3, lr
 8006e8c:	2a01      	cmp	r2, #1
 8006e8e:	f240 80f7 	bls.w	8007080 <ai_platform_api_get_network_report+0x520>
 8006e92:	f240 4249 	movw	r2, #1097	; 0x449
 8006e96:	4293      	cmp	r3, r2
 8006e98:	f000 80f2 	beq.w	8007080 <ai_platform_api_get_network_report+0x520>
 8006e9c:	4ba7      	ldr	r3, [pc, #668]	; (800713c <ai_platform_api_get_network_report+0x5dc>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006ea4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006ea8:	f000 8104 	beq.w	80070b4 <ai_platform_api_get_network_report+0x554>
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	f240 4183 	movw	r1, #1155	; 0x483
 8006eb2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006eb6:	428a      	cmp	r2, r1
 8006eb8:	f000 811c 	beq.w	80070f4 <ai_platform_api_get_network_report+0x594>
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ec2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006ec6:	f000 8147 	beq.w	8007158 <ai_platform_api_get_network_report+0x5f8>
 8006eca:	f7fe ff07 	bl	8005cdc <_ai_platform_release_crc>
 8006ece:	9a01      	ldr	r2, [sp, #4]
 8006ed0:	4b9b      	ldr	r3, [pc, #620]	; (8007140 <ai_platform_api_get_network_report+0x5e0>)
 8006ed2:	6113      	str	r3, [r2, #16]
 8006ed4:	4a97      	ldr	r2, [pc, #604]	; (8007134 <ai_platform_api_get_network_report+0x5d4>)
 8006ed6:	6813      	ldr	r3, [r2, #0]
 8006ed8:	f023 0301 	bic.w	r3, r3, #1
 8006edc:	6013      	str	r3, [r2, #0]
 8006ede:	f7fe fefb 	bl	8005cd8 <_ai_platform_acquire_crc>
 8006ee2:	4b95      	ldr	r3, [pc, #596]	; (8007138 <ai_platform_api_get_network_report+0x5d8>)
 8006ee4:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006eee:	eb03 020c 	add.w	r2, r3, ip
 8006ef2:	2a01      	cmp	r2, #1
 8006ef4:	f240 80f0 	bls.w	80070d8 <ai_platform_api_get_network_report+0x578>
 8006ef8:	f240 4249 	movw	r2, #1097	; 0x449
 8006efc:	4293      	cmp	r3, r2
 8006efe:	f000 80eb 	beq.w	80070d8 <ai_platform_api_get_network_report+0x578>
 8006f02:	4b8e      	ldr	r3, [pc, #568]	; (800713c <ai_platform_api_get_network_report+0x5dc>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006f0a:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006f0e:	f000 8131 	beq.w	8007174 <ai_platform_api_get_network_report+0x614>
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	f240 4183 	movw	r1, #1155	; 0x483
 8006f18:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006f1c:	428a      	cmp	r2, r1
 8006f1e:	f000 813b 	beq.w	8007198 <ai_platform_api_get_network_report+0x638>
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f28:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006f2c:	f000 8146 	beq.w	80071bc <ai_platform_api_get_network_report+0x65c>
 8006f30:	f7fe fed4 	bl	8005cdc <_ai_platform_release_crc>
 8006f34:	9a01      	ldr	r2, [sp, #4]
 8006f36:	f240 2307 	movw	r3, #519	; 0x207
 8006f3a:	f46f 678a 	mvn.w	r7, #1104	; 0x450
 8006f3e:	6153      	str	r3, [r2, #20]
 8006f40:	4a7c      	ldr	r2, [pc, #496]	; (8007134 <ai_platform_api_get_network_report+0x5d4>)
 8006f42:	6813      	ldr	r3, [r2, #0]
 8006f44:	f023 0301 	bic.w	r3, r3, #1
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	f7fe fec5 	bl	8005cd8 <_ai_platform_acquire_crc>
 8006f4e:	4b7a      	ldr	r3, [pc, #488]	; (8007138 <ai_platform_api_get_network_report+0x5d8>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f56:	19da      	adds	r2, r3, r7
 8006f58:	2a01      	cmp	r2, #1
 8006f5a:	f240 80dd 	bls.w	8007118 <ai_platform_api_get_network_report+0x5b8>
 8006f5e:	f240 4249 	movw	r2, #1097	; 0x449
 8006f62:	4293      	cmp	r3, r2
 8006f64:	f000 80d8 	beq.w	8007118 <ai_platform_api_get_network_report+0x5b8>
 8006f68:	4b74      	ldr	r3, [pc, #464]	; (800713c <ai_platform_api_get_network_report+0x5dc>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006f70:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006f74:	f000 8142 	beq.w	80071fc <ai_platform_api_get_network_report+0x69c>
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	f240 4183 	movw	r1, #1155	; 0x483
 8006f7e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006f82:	428a      	cmp	r2, r1
 8006f84:	f000 8128 	beq.w	80071d8 <ai_platform_api_get_network_report+0x678>
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f8e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006f92:	f000 8181 	beq.w	8007298 <ai_platform_api_get_network_report+0x738>
 8006f96:	f7fe fea1 	bl	8005cdc <_ai_platform_release_crc>
 8006f9a:	9a01      	ldr	r2, [sp, #4]
 8006f9c:	f240 2301 	movw	r3, #513	; 0x201
 8006fa0:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 8006fa4:	6253      	str	r3, [r2, #36]	; 0x24
 8006fa6:	4a63      	ldr	r2, [pc, #396]	; (8007134 <ai_platform_api_get_network_report+0x5d4>)
 8006fa8:	6813      	ldr	r3, [r2, #0]
 8006faa:	f023 0301 	bic.w	r3, r3, #1
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	f7fe fe92 	bl	8005cd8 <_ai_platform_acquire_crc>
 8006fb4:	4b60      	ldr	r3, [pc, #384]	; (8007138 <ai_platform_api_get_network_report+0x5d8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fbc:	191a      	adds	r2, r3, r4
 8006fbe:	2a01      	cmp	r2, #1
 8006fc0:	f240 815c 	bls.w	800727c <ai_platform_api_get_network_report+0x71c>
 8006fc4:	f240 4249 	movw	r2, #1097	; 0x449
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	f000 8157 	beq.w	800727c <ai_platform_api_get_network_report+0x71c>
 8006fce:	4b5b      	ldr	r3, [pc, #364]	; (800713c <ai_platform_api_get_network_report+0x5dc>)
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006fd6:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006fda:	f000 816b 	beq.w	80072b4 <ai_platform_api_get_network_report+0x754>
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	f240 4183 	movw	r1, #1155	; 0x483
 8006fe4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006fe8:	428a      	cmp	r2, r1
 8006fea:	f000 8183 	beq.w	80072f4 <ai_platform_api_get_network_report+0x794>
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ff4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006ff8:	f000 816e 	beq.w	80072d8 <ai_platform_api_get_network_report+0x778>
 8006ffc:	f7fe fe6e 	bl	8005cdc <_ai_platform_release_crc>
 8007000:	9c01      	ldr	r4, [sp, #4]
 8007002:	f240 5301 	movw	r3, #1281	; 0x501
 8007006:	62a3      	str	r3, [r4, #40]	; 0x28
 8007008:	f8db 0048 	ldr.w	r0, [fp, #72]	; 0x48
 800700c:	f003 fb6c 	bl	800a6e8 <ai_platform_version_get>
 8007010:	4b4c      	ldr	r3, [pc, #304]	; (8007144 <ai_platform_api_get_network_report+0x5e4>)
 8007012:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007014:	6220      	str	r0, [r4, #32]
 8007016:	429a      	cmp	r2, r3
 8007018:	f040 8102 	bne.w	8007220 <ai_platform_api_get_network_report+0x6c0>
 800701c:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8007020:	4623      	mov	r3, r4
 8007022:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007026:	3340      	adds	r3, #64	; 0x40
 8007028:	e882 0003 	stmia.w	r2, {r0, r1}
 800702c:	2201      	movs	r2, #1
 800702e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007032:	9202      	str	r2, [sp, #8]
 8007034:	e883 0003 	stmia.w	r3, {r0, r1}
 8007038:	e664      	b.n	8006d04 <ai_platform_api_get_network_report+0x1a4>
 800703a:	4a43      	ldr	r2, [pc, #268]	; (8007148 <ai_platform_api_get_network_report+0x5e8>)
 800703c:	2301      	movs	r3, #1
 800703e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007042:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1fb      	bne.n	8007042 <ai_platform_api_get_network_report+0x4e2>
 800704a:	4b40      	ldr	r3, [pc, #256]	; (800714c <ai_platform_api_get_network_report+0x5ec>)
 800704c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007050:	4b3f      	ldr	r3, [pc, #252]	; (8007150 <ai_platform_api_get_network_report+0x5f0>)
 8007052:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007056:	429a      	cmp	r2, r3
 8007058:	f43f adba 	beq.w	8006bd0 <ai_platform_api_get_network_report+0x70>
 800705c:	e7fe      	b.n	800705c <ai_platform_api_get_network_report+0x4fc>
 800705e:	9901      	ldr	r1, [sp, #4]
 8007060:	2300      	movs	r3, #0
 8007062:	2218      	movs	r2, #24
 8007064:	f10b 0010 	add.w	r0, fp, #16
 8007068:	864b      	strh	r3, [r1, #50]	; 0x32
 800706a:	2113      	movs	r1, #19
 800706c:	f001 f8a8 	bl	80081c0 <core_set_error>
 8007070:	e648      	b.n	8006d04 <ai_platform_api_get_network_report+0x1a4>
 8007072:	2218      	movs	r2, #24
 8007074:	2111      	movs	r1, #17
 8007076:	f10b 0010 	add.w	r0, fp, #16
 800707a:	f001 f8a1 	bl	80081c0 <core_set_error>
 800707e:	e641      	b.n	8006d04 <ai_platform_api_get_network_report+0x1a4>
 8007080:	4a34      	ldr	r2, [pc, #208]	; (8007154 <ai_platform_api_get_network_report+0x5f4>)
 8007082:	2301      	movs	r3, #1
 8007084:	6093      	str	r3, [r2, #8]
 8007086:	6893      	ldr	r3, [r2, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1fc      	bne.n	8007086 <ai_platform_api_get_network_report+0x526>
 800708c:	4b2f      	ldr	r3, [pc, #188]	; (800714c <ai_platform_api_get_network_report+0x5ec>)
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	4b2f      	ldr	r3, [pc, #188]	; (8007150 <ai_platform_api_get_network_report+0x5f0>)
 8007092:	6812      	ldr	r2, [r2, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	f43f af18 	beq.w	8006eca <ai_platform_api_get_network_report+0x36a>
 800709a:	e7fe      	b.n	800709a <ai_platform_api_get_network_report+0x53a>
 800709c:	f8bb 301e 	ldrh.w	r3, [fp, #30]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f43f aee0 	beq.w	8006e66 <ai_platform_api_get_network_report+0x306>
 80070a6:	2212      	movs	r2, #18
 80070a8:	2111      	movs	r1, #17
 80070aa:	f10b 0010 	add.w	r0, fp, #16
 80070ae:	f001 f887 	bl	80081c0 <core_set_error>
 80070b2:	e627      	b.n	8006d04 <ai_platform_api_get_network_report+0x1a4>
 80070b4:	4a24      	ldr	r2, [pc, #144]	; (8007148 <ai_platform_api_get_network_report+0x5e8>)
 80070b6:	2301      	movs	r3, #1
 80070b8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80070bc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1fb      	bne.n	80070bc <ai_platform_api_get_network_report+0x55c>
 80070c4:	4b21      	ldr	r3, [pc, #132]	; (800714c <ai_platform_api_get_network_report+0x5ec>)
 80070c6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80070ca:	4b21      	ldr	r3, [pc, #132]	; (8007150 <ai_platform_api_get_network_report+0x5f0>)
 80070cc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80070d0:	429a      	cmp	r2, r3
 80070d2:	f43f aefa 	beq.w	8006eca <ai_platform_api_get_network_report+0x36a>
 80070d6:	e7fe      	b.n	80070d6 <ai_platform_api_get_network_report+0x576>
 80070d8:	4a1e      	ldr	r2, [pc, #120]	; (8007154 <ai_platform_api_get_network_report+0x5f4>)
 80070da:	2301      	movs	r3, #1
 80070dc:	6093      	str	r3, [r2, #8]
 80070de:	6893      	ldr	r3, [r2, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1fc      	bne.n	80070de <ai_platform_api_get_network_report+0x57e>
 80070e4:	4b19      	ldr	r3, [pc, #100]	; (800714c <ai_platform_api_get_network_report+0x5ec>)
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	4b19      	ldr	r3, [pc, #100]	; (8007150 <ai_platform_api_get_network_report+0x5f0>)
 80070ea:	6812      	ldr	r2, [r2, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	f43f af1f 	beq.w	8006f30 <ai_platform_api_get_network_report+0x3d0>
 80070f2:	e7fe      	b.n	80070f2 <ai_platform_api_get_network_report+0x592>
 80070f4:	4b14      	ldr	r3, [pc, #80]	; (8007148 <ai_platform_api_get_network_report+0x5e8>)
 80070f6:	2201      	movs	r2, #1
 80070f8:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80070fc:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8007100:	2a00      	cmp	r2, #0
 8007102:	d1fb      	bne.n	80070fc <ai_platform_api_get_network_report+0x59c>
 8007104:	4a11      	ldr	r2, [pc, #68]	; (800714c <ai_platform_api_get_network_report+0x5ec>)
 8007106:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800710a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800710e:	4b10      	ldr	r3, [pc, #64]	; (8007150 <ai_platform_api_get_network_report+0x5f0>)
 8007110:	429a      	cmp	r2, r3
 8007112:	f43f aeda 	beq.w	8006eca <ai_platform_api_get_network_report+0x36a>
 8007116:	e7fe      	b.n	8007116 <ai_platform_api_get_network_report+0x5b6>
 8007118:	4b0e      	ldr	r3, [pc, #56]	; (8007154 <ai_platform_api_get_network_report+0x5f4>)
 800711a:	2201      	movs	r2, #1
 800711c:	609a      	str	r2, [r3, #8]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	2a00      	cmp	r2, #0
 8007122:	d1fc      	bne.n	800711e <ai_platform_api_get_network_report+0x5be>
 8007124:	4a09      	ldr	r2, [pc, #36]	; (800714c <ai_platform_api_get_network_report+0x5ec>)
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	4b09      	ldr	r3, [pc, #36]	; (8007150 <ai_platform_api_get_network_report+0x5f0>)
 800712c:	429a      	cmp	r2, r3
 800712e:	f43f af32 	beq.w	8006f96 <ai_platform_api_get_network_report+0x436>
 8007132:	e7fe      	b.n	8007132 <ai_platform_api_get_network_report+0x5d2>
 8007134:	e0002000 	.word	0xe0002000
 8007138:	e0042000 	.word	0xe0042000
 800713c:	5c001000 	.word	0x5c001000
 8007140:	0800fe68 	.word	0x0800fe68
 8007144:	a1facade 	.word	0xa1facade
 8007148:	58024000 	.word	0x58024000
 800714c:	f407a5c2 	.word	0xf407a5c2
 8007150:	b5e8b5cd 	.word	0xb5e8b5cd
 8007154:	40023000 	.word	0x40023000
 8007158:	4b86      	ldr	r3, [pc, #536]	; (8007374 <ai_platform_api_get_network_report+0x814>)
 800715a:	2201      	movs	r2, #1
 800715c:	609a      	str	r2, [r3, #8]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	2a00      	cmp	r2, #0
 8007162:	d1fc      	bne.n	800715e <ai_platform_api_get_network_report+0x5fe>
 8007164:	4a84      	ldr	r2, [pc, #528]	; (8007378 <ai_platform_api_get_network_report+0x818>)
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	4b84      	ldr	r3, [pc, #528]	; (800737c <ai_platform_api_get_network_report+0x81c>)
 800716c:	429a      	cmp	r2, r3
 800716e:	f43f aeac 	beq.w	8006eca <ai_platform_api_get_network_report+0x36a>
 8007172:	e7fe      	b.n	8007172 <ai_platform_api_get_network_report+0x612>
 8007174:	4b82      	ldr	r3, [pc, #520]	; (8007380 <ai_platform_api_get_network_report+0x820>)
 8007176:	2201      	movs	r2, #1
 8007178:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800717c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8007180:	2a00      	cmp	r2, #0
 8007182:	d1fb      	bne.n	800717c <ai_platform_api_get_network_report+0x61c>
 8007184:	4a7c      	ldr	r2, [pc, #496]	; (8007378 <ai_platform_api_get_network_report+0x818>)
 8007186:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800718a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800718e:	4b7b      	ldr	r3, [pc, #492]	; (800737c <ai_platform_api_get_network_report+0x81c>)
 8007190:	429a      	cmp	r2, r3
 8007192:	f43f aecd 	beq.w	8006f30 <ai_platform_api_get_network_report+0x3d0>
 8007196:	e7fe      	b.n	8007196 <ai_platform_api_get_network_report+0x636>
 8007198:	4b79      	ldr	r3, [pc, #484]	; (8007380 <ai_platform_api_get_network_report+0x820>)
 800719a:	2201      	movs	r2, #1
 800719c:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80071a0:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80071a4:	2a00      	cmp	r2, #0
 80071a6:	d1fb      	bne.n	80071a0 <ai_platform_api_get_network_report+0x640>
 80071a8:	4a73      	ldr	r2, [pc, #460]	; (8007378 <ai_platform_api_get_network_report+0x818>)
 80071aa:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80071ae:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80071b2:	4b72      	ldr	r3, [pc, #456]	; (800737c <ai_platform_api_get_network_report+0x81c>)
 80071b4:	429a      	cmp	r2, r3
 80071b6:	f43f aebb 	beq.w	8006f30 <ai_platform_api_get_network_report+0x3d0>
 80071ba:	e7fe      	b.n	80071ba <ai_platform_api_get_network_report+0x65a>
 80071bc:	4b6d      	ldr	r3, [pc, #436]	; (8007374 <ai_platform_api_get_network_report+0x814>)
 80071be:	2201      	movs	r2, #1
 80071c0:	609a      	str	r2, [r3, #8]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	2a00      	cmp	r2, #0
 80071c6:	d1fc      	bne.n	80071c2 <ai_platform_api_get_network_report+0x662>
 80071c8:	4a6b      	ldr	r2, [pc, #428]	; (8007378 <ai_platform_api_get_network_report+0x818>)
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	4b6b      	ldr	r3, [pc, #428]	; (800737c <ai_platform_api_get_network_report+0x81c>)
 80071d0:	429a      	cmp	r2, r3
 80071d2:	f43f aead 	beq.w	8006f30 <ai_platform_api_get_network_report+0x3d0>
 80071d6:	e7fe      	b.n	80071d6 <ai_platform_api_get_network_report+0x676>
 80071d8:	4b69      	ldr	r3, [pc, #420]	; (8007380 <ai_platform_api_get_network_report+0x820>)
 80071da:	2201      	movs	r2, #1
 80071dc:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80071e0:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80071e4:	2a00      	cmp	r2, #0
 80071e6:	d1fb      	bne.n	80071e0 <ai_platform_api_get_network_report+0x680>
 80071e8:	4a63      	ldr	r2, [pc, #396]	; (8007378 <ai_platform_api_get_network_report+0x818>)
 80071ea:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80071ee:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80071f2:	4b62      	ldr	r3, [pc, #392]	; (800737c <ai_platform_api_get_network_report+0x81c>)
 80071f4:	429a      	cmp	r2, r3
 80071f6:	f43f aece 	beq.w	8006f96 <ai_platform_api_get_network_report+0x436>
 80071fa:	e7fe      	b.n	80071fa <ai_platform_api_get_network_report+0x69a>
 80071fc:	4b60      	ldr	r3, [pc, #384]	; (8007380 <ai_platform_api_get_network_report+0x820>)
 80071fe:	2201      	movs	r2, #1
 8007200:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8007204:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8007208:	2a00      	cmp	r2, #0
 800720a:	d1fb      	bne.n	8007204 <ai_platform_api_get_network_report+0x6a4>
 800720c:	4a5a      	ldr	r2, [pc, #360]	; (8007378 <ai_platform_api_get_network_report+0x818>)
 800720e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8007212:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8007216:	4b59      	ldr	r3, [pc, #356]	; (800737c <ai_platform_api_get_network_report+0x81c>)
 8007218:	429a      	cmp	r2, r3
 800721a:	f43f aebc 	beq.w	8006f96 <ai_platform_api_get_network_report+0x436>
 800721e:	e7fe      	b.n	800721e <ai_platform_api_get_network_report+0x6be>
 8007220:	9901      	ldr	r1, [sp, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f10d 0810 	add.w	r8, sp, #16
 8007228:	4b56      	ldr	r3, [pc, #344]	; (8007384 <ai_platform_api_get_network_report+0x824>)
 800722a:	f101 043c 	add.w	r4, r1, #60	; 0x3c
 800722e:	f101 0758 	add.w	r7, r1, #88	; 0x58
 8007232:	f8c1 8054 	str.w	r8, [r1, #84]	; 0x54
 8007236:	46a6      	mov	lr, r4
 8007238:	46bc      	mov	ip, r7
 800723a:	e9c1 2210 	strd	r2, r2, [r1, #64]	; 0x40
 800723e:	e9c1 2212 	strd	r2, r2, [r1, #72]	; 0x48
 8007242:	4a51      	ldr	r2, [pc, #324]	; (8007388 <ai_platform_api_get_network_report+0x828>)
 8007244:	63ca      	str	r2, [r1, #60]	; 0x3c
 8007246:	f240 4201 	movw	r2, #1025	; 0x401
 800724a:	650a      	str	r2, [r1, #80]	; 0x50
 800724c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800724e:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 8007252:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8007256:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800725a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800725e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8007262:	4628      	mov	r0, r5
 8007264:	f7fe fd1e 	bl	8005ca4 <ai_buffer_array_sane>
 8007268:	2800      	cmp	r0, #0
 800726a:	d162      	bne.n	8007332 <ai_platform_api_get_network_report+0x7d2>
 800726c:	4630      	mov	r0, r6
 800726e:	f7fe fd19 	bl	8005ca4 <ai_buffer_array_sane>
 8007272:	2800      	cmp	r0, #0
 8007274:	d150      	bne.n	8007318 <ai_platform_api_get_network_report+0x7b8>
 8007276:	2301      	movs	r3, #1
 8007278:	9302      	str	r3, [sp, #8]
 800727a:	e543      	b.n	8006d04 <ai_platform_api_get_network_report+0x1a4>
 800727c:	4b3d      	ldr	r3, [pc, #244]	; (8007374 <ai_platform_api_get_network_report+0x814>)
 800727e:	2201      	movs	r2, #1
 8007280:	609a      	str	r2, [r3, #8]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	2a00      	cmp	r2, #0
 8007286:	d1fc      	bne.n	8007282 <ai_platform_api_get_network_report+0x722>
 8007288:	4a3b      	ldr	r2, [pc, #236]	; (8007378 <ai_platform_api_get_network_report+0x818>)
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	4b3b      	ldr	r3, [pc, #236]	; (800737c <ai_platform_api_get_network_report+0x81c>)
 8007290:	429a      	cmp	r2, r3
 8007292:	f43f aeb3 	beq.w	8006ffc <ai_platform_api_get_network_report+0x49c>
 8007296:	e7fe      	b.n	8007296 <ai_platform_api_get_network_report+0x736>
 8007298:	4b36      	ldr	r3, [pc, #216]	; (8007374 <ai_platform_api_get_network_report+0x814>)
 800729a:	2201      	movs	r2, #1
 800729c:	609a      	str	r2, [r3, #8]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	2a00      	cmp	r2, #0
 80072a2:	d1fc      	bne.n	800729e <ai_platform_api_get_network_report+0x73e>
 80072a4:	4a34      	ldr	r2, [pc, #208]	; (8007378 <ai_platform_api_get_network_report+0x818>)
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4b34      	ldr	r3, [pc, #208]	; (800737c <ai_platform_api_get_network_report+0x81c>)
 80072ac:	429a      	cmp	r2, r3
 80072ae:	f43f ae72 	beq.w	8006f96 <ai_platform_api_get_network_report+0x436>
 80072b2:	e7fe      	b.n	80072b2 <ai_platform_api_get_network_report+0x752>
 80072b4:	4b32      	ldr	r3, [pc, #200]	; (8007380 <ai_platform_api_get_network_report+0x820>)
 80072b6:	2201      	movs	r2, #1
 80072b8:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80072bc:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80072c0:	2a00      	cmp	r2, #0
 80072c2:	d1fb      	bne.n	80072bc <ai_platform_api_get_network_report+0x75c>
 80072c4:	4a2c      	ldr	r2, [pc, #176]	; (8007378 <ai_platform_api_get_network_report+0x818>)
 80072c6:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80072ca:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80072ce:	4b2b      	ldr	r3, [pc, #172]	; (800737c <ai_platform_api_get_network_report+0x81c>)
 80072d0:	429a      	cmp	r2, r3
 80072d2:	f43f ae93 	beq.w	8006ffc <ai_platform_api_get_network_report+0x49c>
 80072d6:	e7fe      	b.n	80072d6 <ai_platform_api_get_network_report+0x776>
 80072d8:	4b26      	ldr	r3, [pc, #152]	; (8007374 <ai_platform_api_get_network_report+0x814>)
 80072da:	2201      	movs	r2, #1
 80072dc:	609a      	str	r2, [r3, #8]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	2a00      	cmp	r2, #0
 80072e2:	d1fc      	bne.n	80072de <ai_platform_api_get_network_report+0x77e>
 80072e4:	4a24      	ldr	r2, [pc, #144]	; (8007378 <ai_platform_api_get_network_report+0x818>)
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	4b24      	ldr	r3, [pc, #144]	; (800737c <ai_platform_api_get_network_report+0x81c>)
 80072ec:	429a      	cmp	r2, r3
 80072ee:	f43f ae85 	beq.w	8006ffc <ai_platform_api_get_network_report+0x49c>
 80072f2:	e7fe      	b.n	80072f2 <ai_platform_api_get_network_report+0x792>
 80072f4:	4b22      	ldr	r3, [pc, #136]	; (8007380 <ai_platform_api_get_network_report+0x820>)
 80072f6:	2201      	movs	r2, #1
 80072f8:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80072fc:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8007300:	2a00      	cmp	r2, #0
 8007302:	d1fb      	bne.n	80072fc <ai_platform_api_get_network_report+0x79c>
 8007304:	4a1c      	ldr	r2, [pc, #112]	; (8007378 <ai_platform_api_get_network_report+0x818>)
 8007306:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800730a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800730e:	4b1b      	ldr	r3, [pc, #108]	; (800737c <ai_platform_api_get_network_report+0x81c>)
 8007310:	429a      	cmp	r2, r3
 8007312:	f43f ae73 	beq.w	8006ffc <ai_platform_api_get_network_report+0x49c>
 8007316:	e7fe      	b.n	8007316 <ai_platform_api_get_network_report+0x7b6>
 8007318:	4630      	mov	r0, r6
 800731a:	f7fe fcc3 	bl	8005ca4 <ai_buffer_array_sane>
 800731e:	b1b8      	cbz	r0, 8007350 <ai_platform_api_get_network_report+0x7f0>
 8007320:	f8db 5020 	ldr.w	r5, [fp, #32]
 8007324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007328:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800732c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007330:	e7a1      	b.n	8007276 <ai_platform_api_get_network_report+0x716>
 8007332:	4628      	mov	r0, r5
 8007334:	f7fe fcb6 	bl	8005ca4 <ai_buffer_array_sane>
 8007338:	b190      	cbz	r0, 8007360 <ai_platform_api_get_network_report+0x800>
 800733a:	f8db c028 	ldr.w	ip, [fp, #40]	; 0x28
 800733e:	463d      	mov	r5, r7
 8007340:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007346:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800734a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800734e:	e78d      	b.n	800726c <ai_platform_api_get_network_report+0x70c>
 8007350:	4605      	mov	r5, r0
 8007352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007356:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800735a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800735e:	deff      	udf	#255	; 0xff
 8007360:	4604      	mov	r4, r0
 8007362:	463d      	mov	r5, r7
 8007364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007368:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800736c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007370:	deff      	udf	#255	; 0xff
 8007372:	bf00      	nop
 8007374:	40023000 	.word	0x40023000
 8007378:	f407a5c2 	.word	0xf407a5c2
 800737c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007380:	58024000 	.word	0x58024000
 8007384:	0800f4b8 	.word	0x0800f4b8
 8007388:	00040440 	.word	0x00040440

0800738c <ai_platform_network_create>:
 800738c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007390:	b083      	sub	sp, #12
 8007392:	4604      	mov	r4, r0
 8007394:	4615      	mov	r5, r2
 8007396:	461e      	mov	r6, r3
 8007398:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800739c:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80073a0:	f7fe fc9a 	bl	8005cd8 <_ai_platform_acquire_crc>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f000 80ba 	beq.w	800751e <ai_platform_network_create+0x192>
 80073aa:	4bb3      	ldr	r3, [pc, #716]	; (8007678 <ai_platform_network_create+0x2ec>)
 80073ac:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 80073b0:	4601      	mov	r1, r0
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073b8:	eb03 020c 	add.w	r2, r3, ip
 80073bc:	2a01      	cmp	r2, #1
 80073be:	f240 80a5 	bls.w	800750c <ai_platform_network_create+0x180>
 80073c2:	f240 4249 	movw	r2, #1097	; 0x449
 80073c6:	4293      	cmp	r3, r2
 80073c8:	f000 80a0 	beq.w	800750c <ai_platform_network_create+0x180>
 80073cc:	4aab      	ldr	r2, [pc, #684]	; (800767c <ai_platform_network_create+0x2f0>)
 80073ce:	6813      	ldr	r3, [r2, #0]
 80073d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073d4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80073d8:	f000 80b7 	beq.w	800754a <ai_platform_network_create+0x1be>
 80073dc:	6813      	ldr	r3, [r2, #0]
 80073de:	f240 4c83 	movw	ip, #1155	; 0x483
 80073e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073e6:	4563      	cmp	r3, ip
 80073e8:	f000 809f 	beq.w	800752a <ai_platform_network_create+0x19e>
 80073ec:	6813      	ldr	r3, [r2, #0]
 80073ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073f2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80073f6:	f040 8090 	bne.w	800751a <ai_platform_network_create+0x18e>
 80073fa:	4ba1      	ldr	r3, [pc, #644]	; (8007680 <ai_platform_network_create+0x2f4>)
 80073fc:	2218      	movs	r2, #24
 80073fe:	609a      	str	r2, [r3, #8]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	2a18      	cmp	r2, #24
 8007404:	f040 8089 	bne.w	800751a <ai_platform_network_create+0x18e>
 8007408:	2201      	movs	r2, #1
 800740a:	609a      	str	r2, [r3, #8]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	2a00      	cmp	r2, #0
 8007410:	d1fc      	bne.n	800740c <ai_platform_network_create+0x80>
 8007412:	4608      	mov	r0, r1
 8007414:	f7fe fc62 	bl	8005cdc <_ai_platform_release_crc>
 8007418:	4a9a      	ldr	r2, [pc, #616]	; (8007684 <ai_platform_network_create+0x2f8>)
 800741a:	6813      	ldr	r3, [r2, #0]
 800741c:	f023 0301 	bic.w	r3, r3, #1
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	f7fe fc59 	bl	8005cd8 <_ai_platform_acquire_crc>
 8007426:	4b94      	ldr	r3, [pc, #592]	; (8007678 <ai_platform_network_create+0x2ec>)
 8007428:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007432:	189a      	adds	r2, r3, r2
 8007434:	2a01      	cmp	r2, #1
 8007436:	f240 809e 	bls.w	8007576 <ai_platform_network_create+0x1ea>
 800743a:	f240 4249 	movw	r2, #1097	; 0x449
 800743e:	4293      	cmp	r3, r2
 8007440:	f000 8099 	beq.w	8007576 <ai_platform_network_create+0x1ea>
 8007444:	4a8d      	ldr	r2, [pc, #564]	; (800767c <ai_platform_network_create+0x2f0>)
 8007446:	6813      	ldr	r3, [r2, #0]
 8007448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800744c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007450:	f000 809f 	beq.w	8007592 <ai_platform_network_create+0x206>
 8007454:	6813      	ldr	r3, [r2, #0]
 8007456:	f240 4183 	movw	r1, #1155	; 0x483
 800745a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800745e:	428b      	cmp	r3, r1
 8007460:	f000 80c0 	beq.w	80075e4 <ai_platform_network_create+0x258>
 8007464:	6813      	ldr	r3, [r2, #0]
 8007466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800746a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800746e:	f000 80d9 	beq.w	8007624 <ai_platform_network_create+0x298>
 8007472:	f7fe fc33 	bl	8005cdc <_ai_platform_release_crc>
 8007476:	2c00      	cmp	r4, #0
 8007478:	f000 80b1 	beq.w	80075de <ai_platform_network_create+0x252>
 800747c:	4b82      	ldr	r3, [pc, #520]	; (8007688 <ai_platform_network_create+0x2fc>)
 800747e:	602b      	str	r3, [r5, #0]
 8007480:	6025      	str	r5, [r4, #0]
 8007482:	f000 fe95 	bl	80081b0 <core_init>
 8007486:	2800      	cmp	r0, #0
 8007488:	f000 8095 	beq.w	80075b6 <ai_platform_network_create+0x22a>
 800748c:	4a7d      	ldr	r2, [pc, #500]	; (8007684 <ai_platform_network_create+0x2f8>)
 800748e:	6813      	ldr	r3, [r2, #0]
 8007490:	f023 0301 	bic.w	r3, r3, #1
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	f7fe fc1f 	bl	8005cd8 <_ai_platform_acquire_crc>
 800749a:	4b77      	ldr	r3, [pc, #476]	; (8007678 <ai_platform_network_create+0x2ec>)
 800749c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074a6:	185a      	adds	r2, r3, r1
 80074a8:	2a01      	cmp	r2, #1
 80074aa:	f240 80ad 	bls.w	8007608 <ai_platform_network_create+0x27c>
 80074ae:	f240 4249 	movw	r2, #1097	; 0x449
 80074b2:	4293      	cmp	r3, r2
 80074b4:	f000 80a8 	beq.w	8007608 <ai_platform_network_create+0x27c>
 80074b8:	4a70      	ldr	r2, [pc, #448]	; (800767c <ai_platform_network_create+0x2f0>)
 80074ba:	6813      	ldr	r3, [r2, #0]
 80074bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074c0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80074c4:	f000 80bc 	beq.w	8007640 <ai_platform_network_create+0x2b4>
 80074c8:	6813      	ldr	r3, [r2, #0]
 80074ca:	f240 4183 	movw	r1, #1155	; 0x483
 80074ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074d2:	428b      	cmp	r3, r1
 80074d4:	f000 80e2 	beq.w	800769c <ai_platform_network_create+0x310>
 80074d8:	6813      	ldr	r3, [r2, #0]
 80074da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074de:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80074e2:	f000 80ed 	beq.w	80076c0 <ai_platform_network_create+0x334>
 80074e6:	f7fe fbf9 	bl	8005cdc <_ai_platform_release_crc>
 80074ea:	2200      	movs	r2, #0
 80074ec:	4639      	mov	r1, r7
 80074ee:	4630      	mov	r0, r6
 80074f0:	f003 f8f4 	bl	800a6dc <ai_version_get>
 80074f4:	4681      	mov	r9, r0
 80074f6:	2200      	movs	r2, #0
 80074f8:	2105      	movs	r1, #5
 80074fa:	2001      	movs	r0, #1
 80074fc:	f003 f8ee 	bl	800a6dc <ai_version_get>
 8007500:	4581      	cmp	r9, r0
 8007502:	f000 80af 	beq.w	8007664 <ai_platform_network_create+0x2d8>
 8007506:	f04f 0901 	mov.w	r9, #1
 800750a:	e056      	b.n	80075ba <ai_platform_network_create+0x22e>
 800750c:	4b5c      	ldr	r3, [pc, #368]	; (8007680 <ai_platform_network_create+0x2f4>)
 800750e:	2218      	movs	r2, #24
 8007510:	609a      	str	r2, [r3, #8]
 8007512:	689a      	ldr	r2, [r3, #8]
 8007514:	2a18      	cmp	r2, #24
 8007516:	d028      	beq.n	800756a <ai_platform_network_create+0x1de>
 8007518:	4608      	mov	r0, r1
 800751a:	f7fe fbdf 	bl	8005cdc <_ai_platform_release_crc>
 800751e:	f244 1333 	movw	r3, #16691	; 0x4133
 8007522:	4618      	mov	r0, r3
 8007524:	b003      	add	sp, #12
 8007526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800752a:	4a58      	ldr	r2, [pc, #352]	; (800768c <ai_platform_network_create+0x300>)
 800752c:	2318      	movs	r3, #24
 800752e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007532:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007536:	2b18      	cmp	r3, #24
 8007538:	d1ef      	bne.n	800751a <ai_platform_network_create+0x18e>
 800753a:	2301      	movs	r3, #1
 800753c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007540:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1fb      	bne.n	8007540 <ai_platform_network_create+0x1b4>
 8007548:	e763      	b.n	8007412 <ai_platform_network_create+0x86>
 800754a:	4a50      	ldr	r2, [pc, #320]	; (800768c <ai_platform_network_create+0x300>)
 800754c:	2318      	movs	r3, #24
 800754e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007552:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007556:	2b18      	cmp	r3, #24
 8007558:	d1df      	bne.n	800751a <ai_platform_network_create+0x18e>
 800755a:	2301      	movs	r3, #1
 800755c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007560:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1fb      	bne.n	8007560 <ai_platform_network_create+0x1d4>
 8007568:	e753      	b.n	8007412 <ai_platform_network_create+0x86>
 800756a:	2201      	movs	r2, #1
 800756c:	609a      	str	r2, [r3, #8]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	2a00      	cmp	r2, #0
 8007572:	d1fc      	bne.n	800756e <ai_platform_network_create+0x1e2>
 8007574:	e74d      	b.n	8007412 <ai_platform_network_create+0x86>
 8007576:	4a42      	ldr	r2, [pc, #264]	; (8007680 <ai_platform_network_create+0x2f4>)
 8007578:	2301      	movs	r3, #1
 800757a:	6093      	str	r3, [r2, #8]
 800757c:	6891      	ldr	r1, [r2, #8]
 800757e:	2900      	cmp	r1, #0
 8007580:	d1fc      	bne.n	800757c <ai_platform_network_create+0x1f0>
 8007582:	4b43      	ldr	r3, [pc, #268]	; (8007690 <ai_platform_network_create+0x304>)
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	4b43      	ldr	r3, [pc, #268]	; (8007694 <ai_platform_network_create+0x308>)
 8007588:	6812      	ldr	r2, [r2, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	f43f af71 	beq.w	8007472 <ai_platform_network_create+0xe6>
 8007590:	e7fe      	b.n	8007590 <ai_platform_network_create+0x204>
 8007592:	4a3e      	ldr	r2, [pc, #248]	; (800768c <ai_platform_network_create+0x300>)
 8007594:	2301      	movs	r3, #1
 8007596:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800759a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1fb      	bne.n	800759a <ai_platform_network_create+0x20e>
 80075a2:	4b3b      	ldr	r3, [pc, #236]	; (8007690 <ai_platform_network_create+0x304>)
 80075a4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80075a8:	4b3a      	ldr	r3, [pc, #232]	; (8007694 <ai_platform_network_create+0x308>)
 80075aa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80075ae:	429a      	cmp	r2, r3
 80075b0:	f43f af5f 	beq.w	8007472 <ai_platform_network_create+0xe6>
 80075b4:	e7fe      	b.n	80075b4 <ai_platform_network_create+0x228>
 80075b6:	f04f 0930 	mov.w	r9, #48	; 0x30
 80075ba:	2300      	movs	r3, #0
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	2410      	movs	r4, #16
 80075c0:	4642      	mov	r2, r8
 80075c2:	4639      	mov	r1, r7
 80075c4:	4630      	mov	r0, r6
 80075c6:	f003 f889 	bl	800a6dc <ai_version_get>
 80075ca:	2300      	movs	r3, #0
 80075cc:	64a8      	str	r0, [r5, #72]	; 0x48
 80075ce:	f369 0307 	bfi	r3, r9, #0, #8
 80075d2:	f364 231f 	bfi	r3, r4, #8, #24
 80075d6:	4618      	mov	r0, r3
 80075d8:	b003      	add	sp, #12
 80075da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075de:	f241 0310 	movw	r3, #4112	; 0x1010
 80075e2:	e79e      	b.n	8007522 <ai_platform_network_create+0x196>
 80075e4:	4a29      	ldr	r2, [pc, #164]	; (800768c <ai_platform_network_create+0x300>)
 80075e6:	2301      	movs	r3, #1
 80075e8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80075ec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1fb      	bne.n	80075ec <ai_platform_network_create+0x260>
 80075f4:	4b26      	ldr	r3, [pc, #152]	; (8007690 <ai_platform_network_create+0x304>)
 80075f6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80075fa:	4b26      	ldr	r3, [pc, #152]	; (8007694 <ai_platform_network_create+0x308>)
 80075fc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007600:	429a      	cmp	r2, r3
 8007602:	f43f af36 	beq.w	8007472 <ai_platform_network_create+0xe6>
 8007606:	e7fe      	b.n	8007606 <ai_platform_network_create+0x27a>
 8007608:	4a1d      	ldr	r2, [pc, #116]	; (8007680 <ai_platform_network_create+0x2f4>)
 800760a:	2301      	movs	r3, #1
 800760c:	6093      	str	r3, [r2, #8]
 800760e:	6893      	ldr	r3, [r2, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1fc      	bne.n	800760e <ai_platform_network_create+0x282>
 8007614:	4b1e      	ldr	r3, [pc, #120]	; (8007690 <ai_platform_network_create+0x304>)
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	4b1e      	ldr	r3, [pc, #120]	; (8007694 <ai_platform_network_create+0x308>)
 800761a:	6812      	ldr	r2, [r2, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	f43f af62 	beq.w	80074e6 <ai_platform_network_create+0x15a>
 8007622:	e7fe      	b.n	8007622 <ai_platform_network_create+0x296>
 8007624:	4a16      	ldr	r2, [pc, #88]	; (8007680 <ai_platform_network_create+0x2f4>)
 8007626:	2301      	movs	r3, #1
 8007628:	6093      	str	r3, [r2, #8]
 800762a:	6893      	ldr	r3, [r2, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1fc      	bne.n	800762a <ai_platform_network_create+0x29e>
 8007630:	4b17      	ldr	r3, [pc, #92]	; (8007690 <ai_platform_network_create+0x304>)
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	4b17      	ldr	r3, [pc, #92]	; (8007694 <ai_platform_network_create+0x308>)
 8007636:	6812      	ldr	r2, [r2, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	f43f af1a 	beq.w	8007472 <ai_platform_network_create+0xe6>
 800763e:	e7fe      	b.n	800763e <ai_platform_network_create+0x2b2>
 8007640:	4a12      	ldr	r2, [pc, #72]	; (800768c <ai_platform_network_create+0x300>)
 8007642:	2301      	movs	r3, #1
 8007644:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007648:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1fb      	bne.n	8007648 <ai_platform_network_create+0x2bc>
 8007650:	4b0f      	ldr	r3, [pc, #60]	; (8007690 <ai_platform_network_create+0x304>)
 8007652:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007656:	4b0f      	ldr	r3, [pc, #60]	; (8007694 <ai_platform_network_create+0x308>)
 8007658:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800765c:	429a      	cmp	r2, r3
 800765e:	f43f af42 	beq.w	80074e6 <ai_platform_network_create+0x15a>
 8007662:	e7fe      	b.n	8007662 <ai_platform_network_create+0x2d6>
 8007664:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <ai_platform_network_create+0x30c>)
 8007666:	a801      	add	r0, sp, #4
 8007668:	9301      	str	r3, [sp, #4]
 800766a:	f002 ffa1 	bl	800a5b0 <ai_check_custom_types>
 800766e:	2800      	cmp	r0, #0
 8007670:	d034      	beq.n	80076dc <ai_platform_network_create+0x350>
 8007672:	2400      	movs	r4, #0
 8007674:	46a1      	mov	r9, r4
 8007676:	e7a3      	b.n	80075c0 <ai_platform_network_create+0x234>
 8007678:	e0042000 	.word	0xe0042000
 800767c:	5c001000 	.word	0x5c001000
 8007680:	40023000 	.word	0x40023000
 8007684:	e0002000 	.word	0xe0002000
 8007688:	a1c00100 	.word	0xa1c00100
 800768c:	58024000 	.word	0x58024000
 8007690:	f407a5c2 	.word	0xf407a5c2
 8007694:	b5e8b5cd 	.word	0xb5e8b5cd
 8007698:	84048403 	.word	0x84048403
 800769c:	4b11      	ldr	r3, [pc, #68]	; (80076e4 <ai_platform_network_create+0x358>)
 800769e:	2201      	movs	r2, #1
 80076a0:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80076a4:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80076a8:	2a00      	cmp	r2, #0
 80076aa:	d1fb      	bne.n	80076a4 <ai_platform_network_create+0x318>
 80076ac:	4a0e      	ldr	r2, [pc, #56]	; (80076e8 <ai_platform_network_create+0x35c>)
 80076ae:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80076b2:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80076b6:	4b0d      	ldr	r3, [pc, #52]	; (80076ec <ai_platform_network_create+0x360>)
 80076b8:	429a      	cmp	r2, r3
 80076ba:	f43f af14 	beq.w	80074e6 <ai_platform_network_create+0x15a>
 80076be:	e7fe      	b.n	80076be <ai_platform_network_create+0x332>
 80076c0:	4b0b      	ldr	r3, [pc, #44]	; (80076f0 <ai_platform_network_create+0x364>)
 80076c2:	2201      	movs	r2, #1
 80076c4:	609a      	str	r2, [r3, #8]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	2a00      	cmp	r2, #0
 80076ca:	d1fc      	bne.n	80076c6 <ai_platform_network_create+0x33a>
 80076cc:	4a06      	ldr	r2, [pc, #24]	; (80076e8 <ai_platform_network_create+0x35c>)
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	4b06      	ldr	r3, [pc, #24]	; (80076ec <ai_platform_network_create+0x360>)
 80076d4:	429a      	cmp	r2, r3
 80076d6:	f43f af06 	beq.w	80074e6 <ai_platform_network_create+0x15a>
 80076da:	e7fe      	b.n	80076da <ai_platform_network_create+0x34e>
 80076dc:	f04f 0902 	mov.w	r9, #2
 80076e0:	e76b      	b.n	80075ba <ai_platform_network_create+0x22e>
 80076e2:	bf00      	nop
 80076e4:	58024000 	.word	0x58024000
 80076e8:	f407a5c2 	.word	0xf407a5c2
 80076ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80076f0:	40023000 	.word	0x40023000

080076f4 <ai_platform_network_init>:
 80076f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d04f      	beq.n	800779c <ai_platform_network_init+0xa8>
 80076fc:	4bad      	ldr	r3, [pc, #692]	; (80079b4 <ai_platform_network_init+0x2c0>)
 80076fe:	4604      	mov	r4, r0
 8007700:	6802      	ldr	r2, [r0, #0]
 8007702:	429a      	cmp	r2, r3
 8007704:	d14a      	bne.n	800779c <ai_platform_network_init+0xa8>
 8007706:	4aac      	ldr	r2, [pc, #688]	; (80079b8 <ai_platform_network_init+0x2c4>)
 8007708:	460d      	mov	r5, r1
 800770a:	6813      	ldr	r3, [r2, #0]
 800770c:	f023 0301 	bic.w	r3, r3, #1
 8007710:	6013      	str	r3, [r2, #0]
 8007712:	f7fe fae1 	bl	8005cd8 <_ai_platform_acquire_crc>
 8007716:	4ba9      	ldr	r3, [pc, #676]	; (80079bc <ai_platform_network_init+0x2c8>)
 8007718:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007722:	189a      	adds	r2, r3, r2
 8007724:	2a01      	cmp	r2, #1
 8007726:	d975      	bls.n	8007814 <ai_platform_network_init+0x120>
 8007728:	f240 4249 	movw	r2, #1097	; 0x449
 800772c:	4293      	cmp	r3, r2
 800772e:	d071      	beq.n	8007814 <ai_platform_network_init+0x120>
 8007730:	4aa3      	ldr	r2, [pc, #652]	; (80079c0 <ai_platform_network_init+0x2cc>)
 8007732:	6813      	ldr	r3, [r2, #0]
 8007734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007738:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800773c:	f000 8088 	beq.w	8007850 <ai_platform_network_init+0x15c>
 8007740:	6813      	ldr	r3, [r2, #0]
 8007742:	f240 4183 	movw	r1, #1155	; 0x483
 8007746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800774a:	428b      	cmp	r3, r1
 800774c:	f000 80cc 	beq.w	80078e8 <ai_platform_network_init+0x1f4>
 8007750:	6813      	ldr	r3, [r2, #0]
 8007752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007756:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800775a:	f000 80f5 	beq.w	8007948 <ai_platform_network_init+0x254>
 800775e:	f7fe fabd 	bl	8005cdc <_ai_platform_release_crc>
 8007762:	2d00      	cmp	r5, #0
 8007764:	f000 80fe 	beq.w	8007964 <ai_platform_network_init+0x270>
 8007768:	4b96      	ldr	r3, [pc, #600]	; (80079c4 <ai_platform_network_init+0x2d0>)
 800776a:	682a      	ldr	r2, [r5, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	f040 8081 	bne.w	8007874 <ai_platform_network_init+0x180>
 8007772:	692b      	ldr	r3, [r5, #16]
 8007774:	89ae      	ldrh	r6, [r5, #12]
 8007776:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800777a:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800777e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007780:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8007784:	2303      	movs	r3, #3
 8007786:	84a6      	strh	r6, [r4, #36]	; 0x24
 8007788:	4626      	mov	r6, r4
 800778a:	4620      	mov	r0, r4
 800778c:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8007790:	60e3      	str	r3, [r4, #12]
 8007792:	f002 ff35 	bl	800a600 <ai_layers_init_all>
 8007796:	4630      	mov	r0, r6
 8007798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800779c:	4a86      	ldr	r2, [pc, #536]	; (80079b8 <ai_platform_network_init+0x2c4>)
 800779e:	6813      	ldr	r3, [r2, #0]
 80077a0:	f023 0301 	bic.w	r3, r3, #1
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	f7fe fa97 	bl	8005cd8 <_ai_platform_acquire_crc>
 80077aa:	4b84      	ldr	r3, [pc, #528]	; (80079bc <ai_platform_network_init+0x2c8>)
 80077ac:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077b6:	185a      	adds	r2, r3, r1
 80077b8:	2a01      	cmp	r2, #1
 80077ba:	d91e      	bls.n	80077fa <ai_platform_network_init+0x106>
 80077bc:	f240 4249 	movw	r2, #1097	; 0x449
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d01a      	beq.n	80077fa <ai_platform_network_init+0x106>
 80077c4:	4a7e      	ldr	r2, [pc, #504]	; (80079c0 <ai_platform_network_init+0x2cc>)
 80077c6:	6813      	ldr	r3, [r2, #0]
 80077c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077cc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80077d0:	d02d      	beq.n	800782e <ai_platform_network_init+0x13a>
 80077d2:	6813      	ldr	r3, [r2, #0]
 80077d4:	f240 4183 	movw	r1, #1155	; 0x483
 80077d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077dc:	428b      	cmp	r3, r1
 80077de:	d072      	beq.n	80078c6 <ai_platform_network_init+0x1d2>
 80077e0:	6813      	ldr	r3, [r2, #0]
 80077e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077e6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80077ea:	f000 809f 	beq.w	800792c <ai_platform_network_init+0x238>
 80077ee:	2600      	movs	r6, #0
 80077f0:	f7fe fa74 	bl	8005cdc <_ai_platform_release_crc>
 80077f4:	4630      	mov	r0, r6
 80077f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077fa:	4a73      	ldr	r2, [pc, #460]	; (80079c8 <ai_platform_network_init+0x2d4>)
 80077fc:	2301      	movs	r3, #1
 80077fe:	6093      	str	r3, [r2, #8]
 8007800:	6893      	ldr	r3, [r2, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1fc      	bne.n	8007800 <ai_platform_network_init+0x10c>
 8007806:	4971      	ldr	r1, [pc, #452]	; (80079cc <ai_platform_network_init+0x2d8>)
 8007808:	4b71      	ldr	r3, [pc, #452]	; (80079d0 <ai_platform_network_init+0x2dc>)
 800780a:	6011      	str	r1, [r2, #0]
 800780c:	6812      	ldr	r2, [r2, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d0ed      	beq.n	80077ee <ai_platform_network_init+0xfa>
 8007812:	e7fe      	b.n	8007812 <ai_platform_network_init+0x11e>
 8007814:	4a6c      	ldr	r2, [pc, #432]	; (80079c8 <ai_platform_network_init+0x2d4>)
 8007816:	2301      	movs	r3, #1
 8007818:	6093      	str	r3, [r2, #8]
 800781a:	6893      	ldr	r3, [r2, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1fc      	bne.n	800781a <ai_platform_network_init+0x126>
 8007820:	4b6a      	ldr	r3, [pc, #424]	; (80079cc <ai_platform_network_init+0x2d8>)
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	4b6a      	ldr	r3, [pc, #424]	; (80079d0 <ai_platform_network_init+0x2dc>)
 8007826:	6812      	ldr	r2, [r2, #0]
 8007828:	429a      	cmp	r2, r3
 800782a:	d098      	beq.n	800775e <ai_platform_network_init+0x6a>
 800782c:	e7fe      	b.n	800782c <ai_platform_network_init+0x138>
 800782e:	4a69      	ldr	r2, [pc, #420]	; (80079d4 <ai_platform_network_init+0x2e0>)
 8007830:	2301      	movs	r3, #1
 8007832:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007836:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1fb      	bne.n	8007836 <ai_platform_network_init+0x142>
 800783e:	4963      	ldr	r1, [pc, #396]	; (80079cc <ai_platform_network_init+0x2d8>)
 8007840:	4b63      	ldr	r3, [pc, #396]	; (80079d0 <ai_platform_network_init+0x2dc>)
 8007842:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007846:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800784a:	429a      	cmp	r2, r3
 800784c:	d0cf      	beq.n	80077ee <ai_platform_network_init+0xfa>
 800784e:	e7fe      	b.n	800784e <ai_platform_network_init+0x15a>
 8007850:	4a60      	ldr	r2, [pc, #384]	; (80079d4 <ai_platform_network_init+0x2e0>)
 8007852:	2301      	movs	r3, #1
 8007854:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007858:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1fb      	bne.n	8007858 <ai_platform_network_init+0x164>
 8007860:	4b5a      	ldr	r3, [pc, #360]	; (80079cc <ai_platform_network_init+0x2d8>)
 8007862:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007866:	4b5a      	ldr	r3, [pc, #360]	; (80079d0 <ai_platform_network_init+0x2dc>)
 8007868:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800786c:	429a      	cmp	r2, r3
 800786e:	f43f af76 	beq.w	800775e <ai_platform_network_init+0x6a>
 8007872:	e7fe      	b.n	8007872 <ai_platform_network_init+0x17e>
 8007874:	2101      	movs	r1, #1
 8007876:	4628      	mov	r0, r5
 8007878:	f105 081c 	add.w	r8, r5, #28
 800787c:	686e      	ldr	r6, [r5, #4]
 800787e:	f7fe f9dd 	bl	8005c3c <ai_buffer_get_size>
 8007882:	4607      	mov	r7, r0
 8007884:	2101      	movs	r1, #1
 8007886:	4640      	mov	r0, r8
 8007888:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800788c:	f7fe f9d6 	bl	8005c3c <ai_buffer_get_size>
 8007890:	2f00      	cmp	r7, #0
 8007892:	d13b      	bne.n	800790c <ai_platform_network_init+0x218>
 8007894:	2800      	cmp	r0, #0
 8007896:	d079      	beq.n	800798c <ai_platform_network_init+0x298>
 8007898:	f1b9 0f00 	cmp.w	r9, #0
 800789c:	d07a      	beq.n	8007994 <ai_platform_network_init+0x2a0>
 800789e:	f04f 0c01 	mov.w	ip, #1
 80078a2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80078a4:	2600      	movs	r6, #0
 80078a6:	83e7      	strh	r7, [r4, #30]
 80078a8:	4563      	cmp	r3, ip
 80078aa:	83a6      	strh	r6, [r4, #28]
 80078ac:	d361      	bcc.n	8007972 <ai_platform_network_init+0x27e>
 80078ae:	f1bc 0f00 	cmp.w	ip, #0
 80078b2:	d07c      	beq.n	80079ae <ai_platform_network_init+0x2ba>
 80078b4:	4647      	mov	r7, r8
 80078b6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80078b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80078ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078bc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80078c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80078c4:	e75e      	b.n	8007784 <ai_platform_network_init+0x90>
 80078c6:	4a43      	ldr	r2, [pc, #268]	; (80079d4 <ai_platform_network_init+0x2e0>)
 80078c8:	2301      	movs	r3, #1
 80078ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80078ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1fb      	bne.n	80078ce <ai_platform_network_init+0x1da>
 80078d6:	493d      	ldr	r1, [pc, #244]	; (80079cc <ai_platform_network_init+0x2d8>)
 80078d8:	4b3d      	ldr	r3, [pc, #244]	; (80079d0 <ai_platform_network_init+0x2dc>)
 80078da:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80078de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d083      	beq.n	80077ee <ai_platform_network_init+0xfa>
 80078e6:	e7fe      	b.n	80078e6 <ai_platform_network_init+0x1f2>
 80078e8:	4a3a      	ldr	r2, [pc, #232]	; (80079d4 <ai_platform_network_init+0x2e0>)
 80078ea:	2301      	movs	r3, #1
 80078ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80078f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1fb      	bne.n	80078f0 <ai_platform_network_init+0x1fc>
 80078f8:	4b34      	ldr	r3, [pc, #208]	; (80079cc <ai_platform_network_init+0x2d8>)
 80078fa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80078fe:	4b34      	ldr	r3, [pc, #208]	; (80079d0 <ai_platform_network_init+0x2dc>)
 8007900:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007904:	429a      	cmp	r2, r3
 8007906:	f43f af2a 	beq.w	800775e <ai_platform_network_init+0x6a>
 800790a:	e7fe      	b.n	800790a <ai_platform_network_init+0x216>
 800790c:	2800      	cmp	r0, #0
 800790e:	d137      	bne.n	8007980 <ai_platform_network_init+0x28c>
 8007910:	4680      	mov	r8, r0
 8007912:	4684      	mov	ip, r0
 8007914:	2e00      	cmp	r6, #0
 8007916:	d044      	beq.n	80079a2 <ai_platform_network_init+0x2ae>
 8007918:	8be6      	ldrh	r6, [r4, #30]
 800791a:	2e00      	cmp	r6, #0
 800791c:	d15c      	bne.n	80079d8 <ai_platform_network_init+0x2e4>
 800791e:	2212      	movs	r2, #18
 8007920:	2116      	movs	r1, #22
 8007922:	f104 0010 	add.w	r0, r4, #16
 8007926:	f000 fc4b 	bl	80081c0 <core_set_error>
 800792a:	e763      	b.n	80077f4 <ai_platform_network_init+0x100>
 800792c:	4a26      	ldr	r2, [pc, #152]	; (80079c8 <ai_platform_network_init+0x2d4>)
 800792e:	2301      	movs	r3, #1
 8007930:	6093      	str	r3, [r2, #8]
 8007932:	6893      	ldr	r3, [r2, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1fc      	bne.n	8007932 <ai_platform_network_init+0x23e>
 8007938:	4924      	ldr	r1, [pc, #144]	; (80079cc <ai_platform_network_init+0x2d8>)
 800793a:	4b25      	ldr	r3, [pc, #148]	; (80079d0 <ai_platform_network_init+0x2dc>)
 800793c:	6011      	str	r1, [r2, #0]
 800793e:	6812      	ldr	r2, [r2, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	f43f af54 	beq.w	80077ee <ai_platform_network_init+0xfa>
 8007946:	e7fe      	b.n	8007946 <ai_platform_network_init+0x252>
 8007948:	4a1f      	ldr	r2, [pc, #124]	; (80079c8 <ai_platform_network_init+0x2d4>)
 800794a:	2301      	movs	r3, #1
 800794c:	6093      	str	r3, [r2, #8]
 800794e:	6893      	ldr	r3, [r2, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1fc      	bne.n	800794e <ai_platform_network_init+0x25a>
 8007954:	4b1d      	ldr	r3, [pc, #116]	; (80079cc <ai_platform_network_init+0x2d8>)
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	4b1d      	ldr	r3, [pc, #116]	; (80079d0 <ai_platform_network_init+0x2dc>)
 800795a:	6812      	ldr	r2, [r2, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	f43f aefe 	beq.w	800775e <ai_platform_network_init+0x6a>
 8007962:	e7fe      	b.n	8007962 <ai_platform_network_init+0x26e>
 8007964:	2110      	movs	r1, #16
 8007966:	2211      	movs	r2, #17
 8007968:	462e      	mov	r6, r5
 800796a:	1860      	adds	r0, r4, r1
 800796c:	f000 fc28 	bl	80081c0 <core_set_error>
 8007970:	e740      	b.n	80077f4 <ai_platform_network_init+0x100>
 8007972:	2213      	movs	r2, #19
 8007974:	2116      	movs	r1, #22
 8007976:	f104 0010 	add.w	r0, r4, #16
 800797a:	f000 fc21 	bl	80081c0 <core_set_error>
 800797e:	e739      	b.n	80077f4 <ai_platform_network_init+0x100>
 8007980:	f1b9 0f00 	cmp.w	r9, #0
 8007984:	d006      	beq.n	8007994 <ai_platform_network_init+0x2a0>
 8007986:	f04f 0c01 	mov.w	ip, #1
 800798a:	e7c3      	b.n	8007914 <ai_platform_network_init+0x220>
 800798c:	4607      	mov	r7, r0
 800798e:	4680      	mov	r8, r0
 8007990:	4684      	mov	ip, r0
 8007992:	e786      	b.n	80078a2 <ai_platform_network_init+0x1ae>
 8007994:	2110      	movs	r1, #16
 8007996:	2213      	movs	r2, #19
 8007998:	2600      	movs	r6, #0
 800799a:	1860      	adds	r0, r4, r1
 800799c:	f000 fc10 	bl	80081c0 <core_set_error>
 80079a0:	e728      	b.n	80077f4 <ai_platform_network_init+0x100>
 80079a2:	2110      	movs	r1, #16
 80079a4:	2212      	movs	r2, #18
 80079a6:	1860      	adds	r0, r4, r1
 80079a8:	f000 fc0a 	bl	80081c0 <core_set_error>
 80079ac:	e722      	b.n	80077f4 <ai_platform_network_init+0x100>
 80079ae:	4666      	mov	r6, ip
 80079b0:	e6e8      	b.n	8007784 <ai_platform_network_init+0x90>
 80079b2:	bf00      	nop
 80079b4:	a1c00100 	.word	0xa1c00100
 80079b8:	e0002000 	.word	0xe0002000
 80079bc:	e0042000 	.word	0xe0042000
 80079c0:	5c001000 	.word	0x5c001000
 80079c4:	a1facade 	.word	0xa1facade
 80079c8:	40023000 	.word	0x40023000
 80079cc:	f407a5c2 	.word	0xf407a5c2
 80079d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80079d4:	58024000 	.word	0x58024000
 80079d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079da:	6a26      	ldr	r6, [r4, #32]
 80079dc:	2701      	movs	r7, #1
 80079de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80079e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80079e4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80079e8:	e75b      	b.n	80078a2 <ai_platform_network_init+0x1ae>
 80079ea:	bf00      	nop

080079ec <ai_platform_network_post_init>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d04a      	beq.n	8007a88 <ai_platform_network_post_init+0x9c>
 80079f2:	4b7c      	ldr	r3, [pc, #496]	; (8007be4 <ai_platform_network_post_init+0x1f8>)
 80079f4:	4604      	mov	r4, r0
 80079f6:	6802      	ldr	r2, [r0, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d145      	bne.n	8007a88 <ai_platform_network_post_init+0x9c>
 80079fc:	4a7a      	ldr	r2, [pc, #488]	; (8007be8 <ai_platform_network_post_init+0x1fc>)
 80079fe:	6813      	ldr	r3, [r2, #0]
 8007a00:	f023 0301 	bic.w	r3, r3, #1
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	f7fe f967 	bl	8005cd8 <_ai_platform_acquire_crc>
 8007a0a:	4b78      	ldr	r3, [pc, #480]	; (8007bec <ai_platform_network_post_init+0x200>)
 8007a0c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a16:	189a      	adds	r2, r3, r2
 8007a18:	2a01      	cmp	r2, #1
 8007a1a:	d96e      	bls.n	8007afa <ai_platform_network_post_init+0x10e>
 8007a1c:	f240 4249 	movw	r2, #1097	; 0x449
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d06a      	beq.n	8007afa <ai_platform_network_post_init+0x10e>
 8007a24:	4a72      	ldr	r2, [pc, #456]	; (8007bf0 <ai_platform_network_post_init+0x204>)
 8007a26:	6813      	ldr	r3, [r2, #0]
 8007a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a2c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007a30:	f000 8081 	beq.w	8007b36 <ai_platform_network_post_init+0x14a>
 8007a34:	6813      	ldr	r3, [r2, #0]
 8007a36:	f240 4183 	movw	r1, #1155	; 0x483
 8007a3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a3e:	428b      	cmp	r3, r1
 8007a40:	f000 80a3 	beq.w	8007b8a <ai_platform_network_post_init+0x19e>
 8007a44:	6813      	ldr	r3, [r2, #0]
 8007a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a4a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007a4e:	f000 80bb 	beq.w	8007bc8 <ai_platform_network_post_init+0x1dc>
 8007a52:	f7fe f943 	bl	8005cdc <_ai_platform_release_crc>
 8007a56:	68e3      	ldr	r3, [r4, #12]
 8007a58:	f013 0502 	ands.w	r5, r3, #2
 8007a5c:	d07d      	beq.n	8007b5a <ai_platform_network_post_init+0x16e>
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f002 fddc 	bl	800a61c <ai_layers_post_init_all>
 8007a64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007a66:	b16b      	cbz	r3, 8007a84 <ai_platform_network_post_init+0x98>
 8007a68:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007a6a:	e007      	b.n	8007a7c <ai_platform_network_post_init+0x90>
 8007a6c:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8007a70:	4798      	blx	r3
 8007a72:	692b      	ldr	r3, [r5, #16]
 8007a74:	b133      	cbz	r3, 8007a84 <ai_platform_network_post_init+0x98>
 8007a76:	42ab      	cmp	r3, r5
 8007a78:	461d      	mov	r5, r3
 8007a7a:	d003      	beq.n	8007a84 <ai_platform_network_post_init+0x98>
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	2000      	movs	r0, #0
 8007a80:	2d00      	cmp	r5, #0
 8007a82:	d1f3      	bne.n	8007a6c <ai_platform_network_post_init+0x80>
 8007a84:	2001      	movs	r0, #1
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	4a57      	ldr	r2, [pc, #348]	; (8007be8 <ai_platform_network_post_init+0x1fc>)
 8007a8a:	6813      	ldr	r3, [r2, #0]
 8007a8c:	f023 0301 	bic.w	r3, r3, #1
 8007a90:	6013      	str	r3, [r2, #0]
 8007a92:	f7fe f921 	bl	8005cd8 <_ai_platform_acquire_crc>
 8007a96:	4b55      	ldr	r3, [pc, #340]	; (8007bec <ai_platform_network_post_init+0x200>)
 8007a98:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007aa2:	185a      	adds	r2, r3, r1
 8007aa4:	2a01      	cmp	r2, #1
 8007aa6:	d91b      	bls.n	8007ae0 <ai_platform_network_post_init+0xf4>
 8007aa8:	f240 4249 	movw	r2, #1097	; 0x449
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d017      	beq.n	8007ae0 <ai_platform_network_post_init+0xf4>
 8007ab0:	4a4f      	ldr	r2, [pc, #316]	; (8007bf0 <ai_platform_network_post_init+0x204>)
 8007ab2:	6813      	ldr	r3, [r2, #0]
 8007ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ab8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007abc:	d02a      	beq.n	8007b14 <ai_platform_network_post_init+0x128>
 8007abe:	6813      	ldr	r3, [r2, #0]
 8007ac0:	f240 4183 	movw	r1, #1155	; 0x483
 8007ac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ac8:	428b      	cmp	r3, r1
 8007aca:	d04d      	beq.n	8007b68 <ai_platform_network_post_init+0x17c>
 8007acc:	6813      	ldr	r3, [r2, #0]
 8007ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ad2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007ad6:	d06a      	beq.n	8007bae <ai_platform_network_post_init+0x1c2>
 8007ad8:	f7fe f900 	bl	8005cdc <_ai_platform_release_crc>
 8007adc:	2000      	movs	r0, #0
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	4a44      	ldr	r2, [pc, #272]	; (8007bf4 <ai_platform_network_post_init+0x208>)
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	6093      	str	r3, [r2, #8]
 8007ae6:	6893      	ldr	r3, [r2, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1fc      	bne.n	8007ae6 <ai_platform_network_post_init+0xfa>
 8007aec:	4942      	ldr	r1, [pc, #264]	; (8007bf8 <ai_platform_network_post_init+0x20c>)
 8007aee:	4b43      	ldr	r3, [pc, #268]	; (8007bfc <ai_platform_network_post_init+0x210>)
 8007af0:	6011      	str	r1, [r2, #0]
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d0ef      	beq.n	8007ad8 <ai_platform_network_post_init+0xec>
 8007af8:	e7fe      	b.n	8007af8 <ai_platform_network_post_init+0x10c>
 8007afa:	4a3e      	ldr	r2, [pc, #248]	; (8007bf4 <ai_platform_network_post_init+0x208>)
 8007afc:	2301      	movs	r3, #1
 8007afe:	6093      	str	r3, [r2, #8]
 8007b00:	6893      	ldr	r3, [r2, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1fc      	bne.n	8007b00 <ai_platform_network_post_init+0x114>
 8007b06:	493c      	ldr	r1, [pc, #240]	; (8007bf8 <ai_platform_network_post_init+0x20c>)
 8007b08:	4b3c      	ldr	r3, [pc, #240]	; (8007bfc <ai_platform_network_post_init+0x210>)
 8007b0a:	6011      	str	r1, [r2, #0]
 8007b0c:	6812      	ldr	r2, [r2, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d09f      	beq.n	8007a52 <ai_platform_network_post_init+0x66>
 8007b12:	e7fe      	b.n	8007b12 <ai_platform_network_post_init+0x126>
 8007b14:	4a3a      	ldr	r2, [pc, #232]	; (8007c00 <ai_platform_network_post_init+0x214>)
 8007b16:	2301      	movs	r3, #1
 8007b18:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007b1c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1fb      	bne.n	8007b1c <ai_platform_network_post_init+0x130>
 8007b24:	4934      	ldr	r1, [pc, #208]	; (8007bf8 <ai_platform_network_post_init+0x20c>)
 8007b26:	4b35      	ldr	r3, [pc, #212]	; (8007bfc <ai_platform_network_post_init+0x210>)
 8007b28:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007b2c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d0d1      	beq.n	8007ad8 <ai_platform_network_post_init+0xec>
 8007b34:	e7fe      	b.n	8007b34 <ai_platform_network_post_init+0x148>
 8007b36:	4a32      	ldr	r2, [pc, #200]	; (8007c00 <ai_platform_network_post_init+0x214>)
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007b3e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1fb      	bne.n	8007b3e <ai_platform_network_post_init+0x152>
 8007b46:	492c      	ldr	r1, [pc, #176]	; (8007bf8 <ai_platform_network_post_init+0x20c>)
 8007b48:	4b2c      	ldr	r3, [pc, #176]	; (8007bfc <ai_platform_network_post_init+0x210>)
 8007b4a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007b4e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007b52:	429a      	cmp	r2, r3
 8007b54:	f43f af7d 	beq.w	8007a52 <ai_platform_network_post_init+0x66>
 8007b58:	e7fe      	b.n	8007b58 <ai_platform_network_post_init+0x16c>
 8007b5a:	2210      	movs	r2, #16
 8007b5c:	2111      	movs	r1, #17
 8007b5e:	18a0      	adds	r0, r4, r2
 8007b60:	f000 fb2e 	bl	80081c0 <core_set_error>
 8007b64:	4628      	mov	r0, r5
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	4a25      	ldr	r2, [pc, #148]	; (8007c00 <ai_platform_network_post_init+0x214>)
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007b70:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1fb      	bne.n	8007b70 <ai_platform_network_post_init+0x184>
 8007b78:	491f      	ldr	r1, [pc, #124]	; (8007bf8 <ai_platform_network_post_init+0x20c>)
 8007b7a:	4b20      	ldr	r3, [pc, #128]	; (8007bfc <ai_platform_network_post_init+0x210>)
 8007b7c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007b80:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d0a7      	beq.n	8007ad8 <ai_platform_network_post_init+0xec>
 8007b88:	e7fe      	b.n	8007b88 <ai_platform_network_post_init+0x19c>
 8007b8a:	4a1d      	ldr	r2, [pc, #116]	; (8007c00 <ai_platform_network_post_init+0x214>)
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007b92:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1fb      	bne.n	8007b92 <ai_platform_network_post_init+0x1a6>
 8007b9a:	4917      	ldr	r1, [pc, #92]	; (8007bf8 <ai_platform_network_post_init+0x20c>)
 8007b9c:	4b17      	ldr	r3, [pc, #92]	; (8007bfc <ai_platform_network_post_init+0x210>)
 8007b9e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007ba2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	f43f af53 	beq.w	8007a52 <ai_platform_network_post_init+0x66>
 8007bac:	e7fe      	b.n	8007bac <ai_platform_network_post_init+0x1c0>
 8007bae:	4a11      	ldr	r2, [pc, #68]	; (8007bf4 <ai_platform_network_post_init+0x208>)
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	6093      	str	r3, [r2, #8]
 8007bb4:	6893      	ldr	r3, [r2, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1fc      	bne.n	8007bb4 <ai_platform_network_post_init+0x1c8>
 8007bba:	490f      	ldr	r1, [pc, #60]	; (8007bf8 <ai_platform_network_post_init+0x20c>)
 8007bbc:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <ai_platform_network_post_init+0x210>)
 8007bbe:	6011      	str	r1, [r2, #0]
 8007bc0:	6812      	ldr	r2, [r2, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d088      	beq.n	8007ad8 <ai_platform_network_post_init+0xec>
 8007bc6:	e7fe      	b.n	8007bc6 <ai_platform_network_post_init+0x1da>
 8007bc8:	4a0a      	ldr	r2, [pc, #40]	; (8007bf4 <ai_platform_network_post_init+0x208>)
 8007bca:	2301      	movs	r3, #1
 8007bcc:	6093      	str	r3, [r2, #8]
 8007bce:	6893      	ldr	r3, [r2, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1fc      	bne.n	8007bce <ai_platform_network_post_init+0x1e2>
 8007bd4:	4908      	ldr	r1, [pc, #32]	; (8007bf8 <ai_platform_network_post_init+0x20c>)
 8007bd6:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <ai_platform_network_post_init+0x210>)
 8007bd8:	6011      	str	r1, [r2, #0]
 8007bda:	6812      	ldr	r2, [r2, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	f43f af38 	beq.w	8007a52 <ai_platform_network_post_init+0x66>
 8007be2:	e7fe      	b.n	8007be2 <ai_platform_network_post_init+0x1f6>
 8007be4:	a1c00100 	.word	0xa1c00100
 8007be8:	e0002000 	.word	0xe0002000
 8007bec:	e0042000 	.word	0xe0042000
 8007bf0:	5c001000 	.word	0x5c001000
 8007bf4:	40023000 	.word	0x40023000
 8007bf8:	f407a5c2 	.word	0xf407a5c2
 8007bfc:	b5e8b5cd 	.word	0xb5e8b5cd
 8007c00:	58024000 	.word	0x58024000

08007c04 <ai_platform_network_process>:
 8007c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	460e      	mov	r6, r1
 8007c0c:	4605      	mov	r5, r0
 8007c0e:	9202      	str	r2, [sp, #8]
 8007c10:	b120      	cbz	r0, 8007c1c <ai_platform_network_process+0x18>
 8007c12:	4bb5      	ldr	r3, [pc, #724]	; (8007ee8 <ai_platform_network_process+0x2e4>)
 8007c14:	6802      	ldr	r2, [r0, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	bf18      	it	ne
 8007c1a:	2500      	movne	r5, #0
 8007c1c:	4ab3      	ldr	r2, [pc, #716]	; (8007eec <ai_platform_network_process+0x2e8>)
 8007c1e:	6813      	ldr	r3, [r2, #0]
 8007c20:	f023 0301 	bic.w	r3, r3, #1
 8007c24:	6013      	str	r3, [r2, #0]
 8007c26:	f7fe f857 	bl	8005cd8 <_ai_platform_acquire_crc>
 8007c2a:	4bb1      	ldr	r3, [pc, #708]	; (8007ef0 <ai_platform_network_process+0x2ec>)
 8007c2c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c36:	185a      	adds	r2, r3, r1
 8007c38:	2a01      	cmp	r2, #1
 8007c3a:	f240 8147 	bls.w	8007ecc <ai_platform_network_process+0x2c8>
 8007c3e:	f240 4249 	movw	r2, #1097	; 0x449
 8007c42:	4293      	cmp	r3, r2
 8007c44:	f000 8142 	beq.w	8007ecc <ai_platform_network_process+0x2c8>
 8007c48:	4aaa      	ldr	r2, [pc, #680]	; (8007ef4 <ai_platform_network_process+0x2f0>)
 8007c4a:	6813      	ldr	r3, [r2, #0]
 8007c4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c50:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007c54:	f000 8167 	beq.w	8007f26 <ai_platform_network_process+0x322>
 8007c58:	6813      	ldr	r3, [r2, #0]
 8007c5a:	f240 4183 	movw	r1, #1155	; 0x483
 8007c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c62:	428b      	cmp	r3, r1
 8007c64:	f000 8191 	beq.w	8007f8a <ai_platform_network_process+0x386>
 8007c68:	6813      	ldr	r3, [r2, #0]
 8007c6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c6e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007c72:	f000 816a 	beq.w	8007f4a <ai_platform_network_process+0x346>
 8007c76:	f7fe f831 	bl	8005cdc <_ai_platform_release_crc>
 8007c7a:	2d00      	cmp	r5, #0
 8007c7c:	f000 8197 	beq.w	8007fae <ai_platform_network_process+0x3aa>
 8007c80:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 813e 	beq.w	8007f04 <ai_platform_network_process+0x300>
 8007c88:	68eb      	ldr	r3, [r5, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8007c90:	f003 0303 	and.w	r3, r3, #3
 8007c94:	616a      	str	r2, [r5, #20]
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	f040 813a 	bne.w	8007f10 <ai_platform_network_process+0x30c>
 8007c9c:	2e00      	cmp	r6, #0
 8007c9e:	f000 8169 	beq.w	8007f74 <ai_platform_network_process+0x370>
 8007ca2:	fab8 f788 	clz	r7, r8
 8007ca6:	097f      	lsrs	r7, r7, #5
 8007ca8:	f1b8 0f00 	cmp.w	r8, #0
 8007cac:	f000 8162 	beq.w	8007f74 <ai_platform_network_process+0x370>
 8007cb0:	f8b8 3000 	ldrh.w	r3, [r8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 815d 	beq.w	8007f74 <ai_platform_network_process+0x370>
 8007cba:	69b3      	ldr	r3, [r6, #24]
 8007cbc:	9503      	str	r5, [sp, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d072      	beq.n	8007db0 <ai_platform_network_process+0x1ac>
 8007cca:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007cce:	2c00      	cmp	r4, #0
 8007cd0:	d06e      	beq.n	8007db0 <ai_platform_network_process+0x1ac>
 8007cd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cd6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007cda:	f8d3 a000 	ldr.w	sl, [r3]
 8007cde:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8007ce2:	f000 8146 	beq.w	8007f72 <ai_platform_network_process+0x36e>
 8007ce6:	69a3      	ldr	r3, [r4, #24]
 8007ce8:	2101      	movs	r1, #1
 8007cea:	4630      	mov	r0, r6
 8007cec:	685d      	ldr	r5, [r3, #4]
 8007cee:	f7fd ffa5 	bl	8005c3c <ai_buffer_get_size>
 8007cf2:	4285      	cmp	r5, r0
 8007cf4:	f0c0 815d 	bcc.w	8007fb2 <ai_platform_network_process+0x3ae>
 8007cf8:	68e0      	ldr	r0, [r4, #12]
 8007cfa:	69b1      	ldr	r1, [r6, #24]
 8007cfc:	68c2      	ldr	r2, [r0, #12]
 8007cfe:	68cb      	ldr	r3, [r1, #12]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	f040 8156 	bne.w	8007fb2 <ai_platform_network_process+0x3ae>
 8007d06:	6882      	ldr	r2, [r0, #8]
 8007d08:	688b      	ldr	r3, [r1, #8]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	f040 8151 	bne.w	8007fb2 <ai_platform_network_process+0x3ae>
 8007d10:	6842      	ldr	r2, [r0, #4]
 8007d12:	684b      	ldr	r3, [r1, #4]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	f040 814c 	bne.w	8007fb2 <ai_platform_network_process+0x3ae>
 8007d1a:	69a3      	ldr	r3, [r4, #24]
 8007d1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d20:	f002 fd9e 	bl	800a860 <ai_array_get_data_byte_size>
 8007d24:	4605      	mov	r5, r0
 8007d26:	4620      	mov	r0, r4
 8007d28:	f002 fcf0 	bl	800a70c <get_tensor_byte_size>
 8007d2c:	4285      	cmp	r5, r0
 8007d2e:	f0c0 8140 	bcc.w	8007fb2 <ai_platform_network_process+0x3ae>
 8007d32:	69a3      	ldr	r3, [r4, #24]
 8007d34:	6818      	ldr	r0, [r3, #0]
 8007d36:	f002 fcff 	bl	800a738 <ai_array_to_buffer_fmt>
 8007d3a:	6833      	ldr	r3, [r6, #0]
 8007d3c:	4058      	eors	r0, r3
 8007d3e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007d42:	f040 81fa 	bne.w	800813a <ai_platform_network_process+0x536>
 8007d46:	6873      	ldr	r3, [r6, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 81ed 	beq.w	8008128 <ai_platform_network_process+0x524>
 8007d4e:	69b3      	ldr	r3, [r6, #24]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 81df 	beq.w	8008116 <ai_platform_network_process+0x512>
 8007d58:	9a01      	ldr	r2, [sp, #4]
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	3701      	adds	r7, #1
 8007d5e:	361c      	adds	r6, #28
 8007d60:	429a      	cmp	r2, r3
 8007d62:	bf38      	it	cc
 8007d64:	461a      	movcc	r2, r3
 8007d66:	9201      	str	r2, [sp, #4]
 8007d68:	f002 fcd0 	bl	800a70c <get_tensor_byte_size>
 8007d6c:	f8c9 0008 	str.w	r0, [r9, #8]
 8007d70:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	fb00 f303 	mul.w	r3, r0, r3
 8007d7a:	f8c9 300c 	str.w	r3, [r9, #12]
 8007d7e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007d82:	440b      	add	r3, r1
 8007d84:	f8c9 1004 	str.w	r1, [r9, #4]
 8007d88:	f84a 300b 	str.w	r3, [sl, fp]
 8007d8c:	69a0      	ldr	r0, [r4, #24]
 8007d8e:	6803      	ldr	r3, [r0, #0]
 8007d90:	009a      	lsls	r2, r3, #2
 8007d92:	f100 80e8 	bmi.w	8007f66 <ai_platform_network_process+0x362>
 8007d96:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007d9a:	1a9b      	subs	r3, r3, r2
 8007d9c:	4419      	add	r1, r3
 8007d9e:	6081      	str	r1, [r0, #8]
 8007da0:	69a3      	ldr	r3, [r4, #24]
 8007da2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007da6:	60da      	str	r2, [r3, #12]
 8007da8:	f8b8 3000 	ldrh.w	r3, [r8]
 8007dac:	42bb      	cmp	r3, r7
 8007dae:	d888      	bhi.n	8007cc2 <ai_platform_network_process+0xbe>
 8007db0:	9d03      	ldr	r5, [sp, #12]
 8007db2:	9b02      	ldr	r3, [sp, #8]
 8007db4:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 81c8 	beq.w	800814c <ai_platform_network_process+0x548>
 8007dbc:	2a01      	cmp	r2, #1
 8007dbe:	f240 81a2 	bls.w	8008106 <ai_platform_network_process+0x502>
 8007dc2:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8007dc6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 819b 	beq.w	8008106 <ai_platform_network_process+0x502>
 8007dd0:	2600      	movs	r6, #0
 8007dd2:	9f02      	ldr	r7, [sp, #8]
 8007dd4:	9502      	str	r5, [sp, #8]
 8007dd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 80f7 	beq.w	8007fce <ai_platform_network_process+0x3ca>
 8007de0:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8007de4:	2c00      	cmp	r4, #0
 8007de6:	f000 80f2 	beq.w	8007fce <ai_platform_network_process+0x3ca>
 8007dea:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007dee:	ea4f 1b06 	mov.w	fp, r6, lsl #4
 8007df2:	f8d3 8000 	ldr.w	r8, [r3]
 8007df6:	eb18 1a06 	adds.w	sl, r8, r6, lsl #4
 8007dfa:	f000 81b4 	beq.w	8008166 <ai_platform_network_process+0x562>
 8007dfe:	69a3      	ldr	r3, [r4, #24]
 8007e00:	2101      	movs	r1, #1
 8007e02:	4638      	mov	r0, r7
 8007e04:	685d      	ldr	r5, [r3, #4]
 8007e06:	f7fd ff19 	bl	8005c3c <ai_buffer_get_size>
 8007e0a:	4285      	cmp	r5, r0
 8007e0c:	f0c0 817a 	bcc.w	8008104 <ai_platform_network_process+0x500>
 8007e10:	68e0      	ldr	r0, [r4, #12]
 8007e12:	69b9      	ldr	r1, [r7, #24]
 8007e14:	68c2      	ldr	r2, [r0, #12]
 8007e16:	68cb      	ldr	r3, [r1, #12]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	f040 8173 	bne.w	8008104 <ai_platform_network_process+0x500>
 8007e1e:	6882      	ldr	r2, [r0, #8]
 8007e20:	688b      	ldr	r3, [r1, #8]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	f040 816e 	bne.w	8008104 <ai_platform_network_process+0x500>
 8007e28:	6842      	ldr	r2, [r0, #4]
 8007e2a:	684b      	ldr	r3, [r1, #4]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	f040 8169 	bne.w	8008104 <ai_platform_network_process+0x500>
 8007e32:	69a3      	ldr	r3, [r4, #24]
 8007e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e38:	f002 fd12 	bl	800a860 <ai_array_get_data_byte_size>
 8007e3c:	9003      	str	r0, [sp, #12]
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f002 fc64 	bl	800a70c <get_tensor_byte_size>
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	4283      	cmp	r3, r0
 8007e48:	f0c0 815c 	bcc.w	8008104 <ai_platform_network_process+0x500>
 8007e4c:	69a3      	ldr	r3, [r4, #24]
 8007e4e:	6818      	ldr	r0, [r3, #0]
 8007e50:	f002 fc72 	bl	800a738 <ai_array_to_buffer_fmt>
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	4058      	eors	r0, r3
 8007e58:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007e5c:	f040 817a 	bne.w	8008154 <ai_platform_network_process+0x550>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 8193 	beq.w	800818e <ai_platform_network_process+0x58a>
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 8185 	beq.w	800817c <ai_platform_network_process+0x578>
 8007e72:	9a01      	ldr	r2, [sp, #4]
 8007e74:	4620      	mov	r0, r4
 8007e76:	3601      	adds	r6, #1
 8007e78:	371c      	adds	r7, #28
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	bf38      	it	cc
 8007e7e:	461a      	movcc	r2, r3
 8007e80:	9201      	str	r2, [sp, #4]
 8007e82:	f002 fc43 	bl	800a70c <get_tensor_byte_size>
 8007e86:	f8ca 0008 	str.w	r0, [sl, #8]
 8007e8a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	fb00 f303 	mul.w	r3, r0, r3
 8007e94:	f8ca 300c 	str.w	r3, [sl, #12]
 8007e98:	f857 1c18 	ldr.w	r1, [r7, #-24]
 8007e9c:	440b      	add	r3, r1
 8007e9e:	f8ca 1004 	str.w	r1, [sl, #4]
 8007ea2:	f848 300b 	str.w	r3, [r8, fp]
 8007ea6:	69a0      	ldr	r0, [r4, #24]
 8007ea8:	6803      	ldr	r3, [r0, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	f100 808a 	bmi.w	8007fc4 <ai_platform_network_process+0x3c0>
 8007eb0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	4419      	add	r1, r3
 8007eb8:	6081      	str	r1, [r0, #8]
 8007eba:	69a3      	ldr	r3, [r4, #24]
 8007ebc:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007ec0:	60da      	str	r2, [r3, #12]
 8007ec2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007ec6:	429e      	cmp	r6, r3
 8007ec8:	d385      	bcc.n	8007dd6 <ai_platform_network_process+0x1d2>
 8007eca:	e080      	b.n	8007fce <ai_platform_network_process+0x3ca>
 8007ecc:	4a0a      	ldr	r2, [pc, #40]	; (8007ef8 <ai_platform_network_process+0x2f4>)
 8007ece:	2301      	movs	r3, #1
 8007ed0:	6093      	str	r3, [r2, #8]
 8007ed2:	6893      	ldr	r3, [r2, #8]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1fc      	bne.n	8007ed2 <ai_platform_network_process+0x2ce>
 8007ed8:	4b08      	ldr	r3, [pc, #32]	; (8007efc <ai_platform_network_process+0x2f8>)
 8007eda:	6013      	str	r3, [r2, #0]
 8007edc:	4b08      	ldr	r3, [pc, #32]	; (8007f00 <ai_platform_network_process+0x2fc>)
 8007ede:	6812      	ldr	r2, [r2, #0]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	f43f aec8 	beq.w	8007c76 <ai_platform_network_process+0x72>
 8007ee6:	e7fe      	b.n	8007ee6 <ai_platform_network_process+0x2e2>
 8007ee8:	a1c00100 	.word	0xa1c00100
 8007eec:	e0002000 	.word	0xe0002000
 8007ef0:	e0042000 	.word	0xe0042000
 8007ef4:	5c001000 	.word	0x5c001000
 8007ef8:	40023000 	.word	0x40023000
 8007efc:	f407a5c2 	.word	0xf407a5c2
 8007f00:	b5e8b5cd 	.word	0xb5e8b5cd
 8007f04:	68ea      	ldr	r2, [r5, #12]
 8007f06:	616b      	str	r3, [r5, #20]
 8007f08:	f002 0203 	and.w	r2, r2, #3
 8007f0c:	2a03      	cmp	r2, #3
 8007f0e:	d031      	beq.n	8007f74 <ai_platform_network_process+0x370>
 8007f10:	2230      	movs	r2, #48	; 0x30
 8007f12:	2111      	movs	r1, #17
 8007f14:	f105 0010 	add.w	r0, r5, #16
 8007f18:	2400      	movs	r4, #0
 8007f1a:	f000 f951 	bl	80081c0 <core_set_error>
 8007f1e:	4620      	mov	r0, r4
 8007f20:	b005      	add	sp, #20
 8007f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f26:	4a9e      	ldr	r2, [pc, #632]	; (80081a0 <ai_platform_network_process+0x59c>)
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007f2e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1fb      	bne.n	8007f2e <ai_platform_network_process+0x32a>
 8007f36:	4b9b      	ldr	r3, [pc, #620]	; (80081a4 <ai_platform_network_process+0x5a0>)
 8007f38:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007f3c:	4b9a      	ldr	r3, [pc, #616]	; (80081a8 <ai_platform_network_process+0x5a4>)
 8007f3e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007f42:	429a      	cmp	r2, r3
 8007f44:	f43f ae97 	beq.w	8007c76 <ai_platform_network_process+0x72>
 8007f48:	e7fe      	b.n	8007f48 <ai_platform_network_process+0x344>
 8007f4a:	4a98      	ldr	r2, [pc, #608]	; (80081ac <ai_platform_network_process+0x5a8>)
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	6093      	str	r3, [r2, #8]
 8007f50:	6893      	ldr	r3, [r2, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1fc      	bne.n	8007f50 <ai_platform_network_process+0x34c>
 8007f56:	4b93      	ldr	r3, [pc, #588]	; (80081a4 <ai_platform_network_process+0x5a0>)
 8007f58:	6013      	str	r3, [r2, #0]
 8007f5a:	4b93      	ldr	r3, [pc, #588]	; (80081a8 <ai_platform_network_process+0x5a4>)
 8007f5c:	6812      	ldr	r2, [r2, #0]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	f43f ae89 	beq.w	8007c76 <ai_platform_network_process+0x72>
 8007f64:	e7fe      	b.n	8007f64 <ai_platform_network_process+0x360>
 8007f66:	f8b8 3000 	ldrh.w	r3, [r8]
 8007f6a:	429f      	cmp	r7, r3
 8007f6c:	f4ff aea9 	bcc.w	8007cc2 <ai_platform_network_process+0xbe>
 8007f70:	e71e      	b.n	8007db0 <ai_platform_network_process+0x1ac>
 8007f72:	9d03      	ldr	r5, [sp, #12]
 8007f74:	2400      	movs	r4, #0
 8007f76:	2217      	movs	r2, #23
 8007f78:	2112      	movs	r1, #18
 8007f7a:	f105 0010 	add.w	r0, r5, #16
 8007f7e:	f000 f91f 	bl	80081c0 <core_set_error>
 8007f82:	4620      	mov	r0, r4
 8007f84:	b005      	add	sp, #20
 8007f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8a:	4a85      	ldr	r2, [pc, #532]	; (80081a0 <ai_platform_network_process+0x59c>)
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007f92:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1fb      	bne.n	8007f92 <ai_platform_network_process+0x38e>
 8007f9a:	4b82      	ldr	r3, [pc, #520]	; (80081a4 <ai_platform_network_process+0x5a0>)
 8007f9c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007fa0:	4b81      	ldr	r3, [pc, #516]	; (80081a8 <ai_platform_network_process+0x5a4>)
 8007fa2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	f43f ae65 	beq.w	8007c76 <ai_platform_network_process+0x72>
 8007fac:	e7fe      	b.n	8007fac <ai_platform_network_process+0x3a8>
 8007fae:	462c      	mov	r4, r5
 8007fb0:	e7b5      	b.n	8007f1e <ai_platform_network_process+0x31a>
 8007fb2:	9d03      	ldr	r5, [sp, #12]
 8007fb4:	2218      	movs	r2, #24
 8007fb6:	2112      	movs	r1, #18
 8007fb8:	2400      	movs	r4, #0
 8007fba:	f105 0010 	add.w	r0, r5, #16
 8007fbe:	f000 f8ff 	bl	80081c0 <core_set_error>
 8007fc2:	e7ac      	b.n	8007f1e <ai_platform_network_process+0x31a>
 8007fc4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007fc8:	429e      	cmp	r6, r3
 8007fca:	f4ff af04 	bcc.w	8007dd6 <ai_platform_network_process+0x1d2>
 8007fce:	9d02      	ldr	r5, [sp, #8]
 8007fd0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007fd4:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007fd6:	82ab      	strh	r3, [r5, #20]
 8007fd8:	2a00      	cmp	r2, #0
 8007fda:	f040 808d 	bne.w	80080f8 <ai_platform_network_process+0x4f4>
 8007fde:	4616      	mov	r6, r2
 8007fe0:	4617      	mov	r7, r2
 8007fe2:	8aec      	ldrh	r4, [r5, #22]
 8007fe4:	429c      	cmp	r4, r3
 8007fe6:	d29a      	bcs.n	8007f1e <ai_platform_network_process+0x31a>
 8007fe8:	46ab      	mov	fp, r5
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	d030      	beq.n	8008050 <ai_platform_network_process+0x44c>
 8007fee:	f04f 0800 	mov.w	r8, #0
 8007ff2:	e014      	b.n	800801e <ai_platform_network_process+0x41a>
 8007ff4:	6882      	ldr	r2, [r0, #8]
 8007ff6:	68c5      	ldr	r5, [r0, #12]
 8007ff8:	6863      	ldr	r3, [r4, #4]
 8007ffa:	1b52      	subs	r2, r2, r5
 8007ffc:	4413      	add	r3, r2
 8007ffe:	6083      	str	r3, [r0, #8]
 8008000:	698b      	ldr	r3, [r1, #24]
 8008002:	6862      	ldr	r2, [r4, #4]
 8008004:	60da      	str	r2, [r3, #12]
 8008006:	f859 200a 	ldr.w	r2, [r9, sl]
 800800a:	f108 0801 	add.w	r8, r8, #1
 800800e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8008012:	440b      	add	r3, r1
 8008014:	4293      	cmp	r3, r2
 8008016:	d301      	bcc.n	800801c <ai_platform_network_process+0x418>
 8008018:	68e3      	ldr	r3, [r4, #12]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	6063      	str	r3, [r4, #4]
 800801e:	8833      	ldrh	r3, [r6, #0]
 8008020:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8008024:	4543      	cmp	r3, r8
 8008026:	d913      	bls.n	8008050 <ai_platform_network_process+0x44c>
 8008028:	6873      	ldr	r3, [r6, #4]
 800802a:	b18b      	cbz	r3, 8008050 <ai_platform_network_process+0x44c>
 800802c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8008030:	b171      	cbz	r1, 8008050 <ai_platform_network_process+0x44c>
 8008032:	6988      	ldr	r0, [r1, #24]
 8008034:	68b2      	ldr	r2, [r6, #8]
 8008036:	6803      	ldr	r3, [r0, #0]
 8008038:	f8d2 9000 	ldr.w	r9, [r2]
 800803c:	009d      	lsls	r5, r3, #2
 800803e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8008042:	d5d7      	bpl.n	8007ff4 <ai_platform_network_process+0x3f0>
 8008044:	6880      	ldr	r0, [r0, #8]
 8008046:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800804a:	f002 fc4b 	bl	800a8e4 <memcpy>
 800804e:	e7da      	b.n	8008006 <ai_platform_network_process+0x402>
 8008050:	4658      	mov	r0, fp
 8008052:	f002 faf7 	bl	800a644 <ai_layers_forward_all>
 8008056:	2f00      	cmp	r7, #0
 8008058:	d03f      	beq.n	80080da <ai_platform_network_process+0x4d6>
 800805a:	2400      	movs	r4, #0
 800805c:	e016      	b.n	800808c <ai_platform_network_process+0x488>
 800805e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8008062:	f859 100a 	ldr.w	r1, [r9, sl]
 8008066:	4413      	add	r3, r2
 8008068:	428b      	cmp	r3, r1
 800806a:	d302      	bcc.n	8008072 <ai_platform_network_process+0x46e>
 800806c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008070:	1acb      	subs	r3, r1, r3
 8008072:	f8c8 3004 	str.w	r3, [r8, #4]
 8008076:	6981      	ldr	r1, [r0, #24]
 8008078:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800807c:	1b52      	subs	r2, r2, r5
 800807e:	4413      	add	r3, r2
 8008080:	608b      	str	r3, [r1, #8]
 8008082:	6983      	ldr	r3, [r0, #24]
 8008084:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008088:	60da      	str	r2, [r3, #12]
 800808a:	3401      	adds	r4, #1
 800808c:	883b      	ldrh	r3, [r7, #0]
 800808e:	42a3      	cmp	r3, r4
 8008090:	d923      	bls.n	80080da <ai_platform_network_process+0x4d6>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	b30b      	cbz	r3, 80080da <ai_platform_network_process+0x4d6>
 8008096:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800809a:	b1f0      	cbz	r0, 80080da <ai_platform_network_process+0x4d6>
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80080a2:	6983      	ldr	r3, [r0, #24]
 80080a4:	f8d2 9000 	ldr.w	r9, [r2]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80080ae:	0092      	lsls	r2, r2, #2
 80080b0:	d5d5      	bpl.n	800805e <ai_platform_network_process+0x45a>
 80080b2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80080b6:	6899      	ldr	r1, [r3, #8]
 80080b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80080bc:	f002 fc12 	bl	800a8e4 <memcpy>
 80080c0:	f859 200a 	ldr.w	r2, [r9, sl]
 80080c4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80080c8:	440b      	add	r3, r1
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d302      	bcc.n	80080d4 <ai_platform_network_process+0x4d0>
 80080ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80080d8:	e7d7      	b.n	800808a <ai_platform_network_process+0x486>
 80080da:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 80080de:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80080e2:	3401      	adds	r4, #1
 80080e4:	b2a4      	uxth	r4, r4
 80080e6:	42a3      	cmp	r3, r4
 80080e8:	f8ab 4016 	strh.w	r4, [fp, #22]
 80080ec:	f63f af7d 	bhi.w	8007fea <ai_platform_network_process+0x3e6>
 80080f0:	4620      	mov	r0, r4
 80080f2:	b005      	add	sp, #20
 80080f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f8:	2a01      	cmp	r2, #1
 80080fa:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80080fc:	d03c      	beq.n	8008178 <ai_platform_network_process+0x574>
 80080fe:	f106 070c 	add.w	r7, r6, #12
 8008102:	e76e      	b.n	8007fe2 <ai_platform_network_process+0x3de>
 8008104:	9d02      	ldr	r5, [sp, #8]
 8008106:	2218      	movs	r2, #24
 8008108:	2113      	movs	r1, #19
 800810a:	f105 0010 	add.w	r0, r5, #16
 800810e:	2400      	movs	r4, #0
 8008110:	f000 f856 	bl	80081c0 <core_set_error>
 8008114:	e703      	b.n	8007f1e <ai_platform_network_process+0x31a>
 8008116:	9d03      	ldr	r5, [sp, #12]
 8008118:	4604      	mov	r4, r0
 800811a:	2221      	movs	r2, #33	; 0x21
 800811c:	2112      	movs	r1, #18
 800811e:	f105 0010 	add.w	r0, r5, #16
 8008122:	f000 f84d 	bl	80081c0 <core_set_error>
 8008126:	e6fa      	b.n	8007f1e <ai_platform_network_process+0x31a>
 8008128:	9d03      	ldr	r5, [sp, #12]
 800812a:	4604      	mov	r4, r0
 800812c:	2217      	movs	r2, #23
 800812e:	2112      	movs	r1, #18
 8008130:	f105 0010 	add.w	r0, r5, #16
 8008134:	f000 f844 	bl	80081c0 <core_set_error>
 8008138:	e6f1      	b.n	8007f1e <ai_platform_network_process+0x31a>
 800813a:	9d03      	ldr	r5, [sp, #12]
 800813c:	2219      	movs	r2, #25
 800813e:	2112      	movs	r1, #18
 8008140:	2400      	movs	r4, #0
 8008142:	f105 0010 	add.w	r0, r5, #16
 8008146:	f000 f83b 	bl	80081c0 <core_set_error>
 800814a:	e6e8      	b.n	8007f1e <ai_platform_network_process+0x31a>
 800814c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008150:	82ab      	strh	r3, [r5, #20]
 8008152:	e741      	b.n	8007fd8 <ai_platform_network_process+0x3d4>
 8008154:	9d02      	ldr	r5, [sp, #8]
 8008156:	2219      	movs	r2, #25
 8008158:	2113      	movs	r1, #19
 800815a:	2400      	movs	r4, #0
 800815c:	f105 0010 	add.w	r0, r5, #16
 8008160:	f000 f82e 	bl	80081c0 <core_set_error>
 8008164:	e6db      	b.n	8007f1e <ai_platform_network_process+0x31a>
 8008166:	9d02      	ldr	r5, [sp, #8]
 8008168:	2217      	movs	r2, #23
 800816a:	2113      	movs	r1, #19
 800816c:	4654      	mov	r4, sl
 800816e:	f105 0010 	add.w	r0, r5, #16
 8008172:	f000 f825 	bl	80081c0 <core_set_error>
 8008176:	e6d2      	b.n	8007f1e <ai_platform_network_process+0x31a>
 8008178:	2700      	movs	r7, #0
 800817a:	e732      	b.n	8007fe2 <ai_platform_network_process+0x3de>
 800817c:	9d02      	ldr	r5, [sp, #8]
 800817e:	4604      	mov	r4, r0
 8008180:	2221      	movs	r2, #33	; 0x21
 8008182:	2113      	movs	r1, #19
 8008184:	f105 0010 	add.w	r0, r5, #16
 8008188:	f000 f81a 	bl	80081c0 <core_set_error>
 800818c:	e6c7      	b.n	8007f1e <ai_platform_network_process+0x31a>
 800818e:	9d02      	ldr	r5, [sp, #8]
 8008190:	4604      	mov	r4, r0
 8008192:	2217      	movs	r2, #23
 8008194:	2113      	movs	r1, #19
 8008196:	f105 0010 	add.w	r0, r5, #16
 800819a:	f000 f811 	bl	80081c0 <core_set_error>
 800819e:	e6be      	b.n	8007f1e <ai_platform_network_process+0x31a>
 80081a0:	58024000 	.word	0x58024000
 80081a4:	f407a5c2 	.word	0xf407a5c2
 80081a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80081ac:	40023000 	.word	0x40023000

080081b0 <core_init>:
 80081b0:	2001      	movs	r0, #1
 80081b2:	4770      	bx	lr

080081b4 <core_get_error>:
 80081b4:	4603      	mov	r3, r0
 80081b6:	2200      	movs	r2, #0
 80081b8:	6800      	ldr	r0, [r0, #0]
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop

080081c0 <core_set_error>:
 80081c0:	4603      	mov	r3, r0
 80081c2:	7800      	ldrb	r0, [r0, #0]
 80081c4:	b108      	cbz	r0, 80081ca <core_set_error+0xa>
 80081c6:	2000      	movs	r0, #0
 80081c8:	4770      	bx	lr
 80081ca:	7019      	strb	r1, [r3, #0]
 80081cc:	2001      	movs	r0, #1
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	f362 211f 	bfi	r1, r2, #8, #24
 80081d4:	6019      	str	r1, [r3, #0]
 80081d6:	4770      	bx	lr

080081d8 <forward_dense>:
 80081d8:	6983      	ldr	r3, [r0, #24]
 80081da:	881a      	ldrh	r2, [r3, #0]
 80081dc:	2a00      	cmp	r2, #0
 80081de:	f000 80f7 	beq.w	80083d0 <forward_dense+0x1f8>
 80081e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e6:	ed2d 8b0e 	vpush	{d8-d14}
 80081ea:	6858      	ldr	r0, [r3, #4]
 80081ec:	b09b      	sub	sp, #108	; 0x6c
 80081ee:	6847      	ldr	r7, [r0, #4]
 80081f0:	b107      	cbz	r7, 80081f4 <forward_dense+0x1c>
 80081f2:	683f      	ldr	r7, [r7, #0]
 80081f4:	2a01      	cmp	r2, #1
 80081f6:	f000 8523 	beq.w	8008c40 <forward_dense+0xa68>
 80081fa:	6905      	ldr	r5, [r0, #16]
 80081fc:	b105      	cbz	r5, 8008200 <forward_dense+0x28>
 80081fe:	682d      	ldr	r5, [r5, #0]
 8008200:	2a02      	cmp	r2, #2
 8008202:	f000 80e7 	beq.w	80083d4 <forward_dense+0x1fc>
 8008206:	69c3      	ldr	r3, [r0, #28]
 8008208:	930b      	str	r3, [sp, #44]	; 0x2c
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 8509 	beq.w	8008c22 <forward_dense+0xa4a>
 8008210:	4619      	mov	r1, r3
 8008212:	8b03      	ldrh	r3, [r0, #24]
 8008214:	6809      	ldr	r1, [r1, #0]
 8008216:	2b01      	cmp	r3, #1
 8008218:	910c      	str	r1, [sp, #48]	; 0x30
 800821a:	f240 8505 	bls.w	8008c28 <forward_dense+0xa50>
 800821e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	930b      	str	r3, [sp, #44]	; 0x2c
 8008224:	460b      	mov	r3, r1
 8008226:	6999      	ldr	r1, [r3, #24]
 8008228:	2a03      	cmp	r2, #3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	68ec      	ldr	r4, [r5, #12]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8008234:	9314      	str	r3, [sp, #80]	; 0x50
 8008236:	680b      	ldr	r3, [r1, #0]
 8008238:	e9d4 6c01 	ldrd	r6, ip, [r4, #4]
 800823c:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8008240:	fb0c fb06 	mul.w	fp, ip, r6
 8008244:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 8008248:	fa4e f40c 	asr.w	r4, lr, ip
 800824c:	9413      	str	r4, [sp, #76]	; 0x4c
 800824e:	f000 84f4 	beq.w	8008c3a <forward_dense+0xa62>
 8008252:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008254:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8008258:	2a00      	cmp	r2, #0
 800825a:	f000 84dc 	beq.w	8008c16 <forward_dense+0xa3e>
 800825e:	6812      	ldr	r2, [r2, #0]
 8008260:	2a00      	cmp	r2, #0
 8008262:	f000 84d8 	beq.w	8008c16 <forward_dense+0xa3e>
 8008266:	2b04      	cmp	r3, #4
 8008268:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800826c:	f000 84bf 	beq.w	8008bee <forward_dense+0xa16>
 8008270:	2b08      	cmp	r3, #8
 8008272:	f000 84bc 	beq.w	8008bee <forward_dense+0xa16>
 8008276:	f04f 0a00 	mov.w	sl, #0
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	fb0b f408 	mul.w	r4, fp, r8
 8008280:	69aa      	ldr	r2, [r5, #24]
 8008282:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8008286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008288:	6892      	ldr	r2, [r2, #8]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8008290:	9204      	str	r2, [sp, #16]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	428a      	cmp	r2, r1
 8008296:	910f      	str	r1, [sp, #60]	; 0x3c
 8008298:	9302      	str	r3, [sp, #8]
 800829a:	ea4f 0386 	mov.w	r3, r6, lsl #2
 800829e:	930d      	str	r3, [sp, #52]	; 0x34
 80082a0:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	f080 849a 	bcs.w	8008bde <forward_dense+0xa06>
 80082aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082ac:	4bbf      	ldr	r3, [pc, #764]	; (80085ac <forward_dense+0x3d4>)
 80082ae:	08d0      	lsrs	r0, r2, #3
 80082b0:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80085b0 <forward_dense+0x3d8>
 80082b4:	4413      	add	r3, r2
 80082b6:	9007      	str	r0, [sp, #28]
 80082b8:	0099      	lsls	r1, r3, #2
 80082ba:	f1a2 0310 	sub.w	r3, r2, #16
 80082be:	091b      	lsrs	r3, r3, #4
 80082c0:	f101 0420 	add.w	r4, r1, #32
 80082c4:	9115      	str	r1, [sp, #84]	; 0x54
 80082c6:	0949      	lsrs	r1, r1, #5
 80082c8:	3301      	adds	r3, #1
 80082ca:	940e      	str	r4, [sp, #56]	; 0x38
 80082cc:	445c      	add	r4, fp
 80082ce:	9116      	str	r1, [sp, #88]	; 0x58
 80082d0:	019b      	lsls	r3, r3, #6
 80082d2:	46a1      	mov	r9, r4
 80082d4:	940a      	str	r4, [sp, #40]	; 0x28
 80082d6:	9319      	str	r3, [sp, #100]	; 0x64
 80082d8:	f022 0301 	bic.w	r3, r2, #1
 80082dc:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 80082e0:	9303      	str	r3, [sp, #12]
 80082e2:	1c43      	adds	r3, r0, #1
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	9318      	str	r3, [sp, #96]	; 0x60
 80082e8:	00cb      	lsls	r3, r1, #3
 80082ea:	3310      	adds	r3, #16
 80082ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80082ee:	f002 0301 	and.w	r3, r2, #1
 80082f2:	9308      	str	r3, [sp, #32]
 80082f4:	eb0b 1340 	add.w	r3, fp, r0, lsl #5
 80082f8:	9305      	str	r3, [sp, #20]
 80082fa:	4653      	mov	r3, sl
 80082fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082fe:	6992      	ldr	r2, [r2, #24]
 8008300:	6897      	ldr	r7, [r2, #8]
 8008302:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008304:	2a00      	cmp	r2, #0
 8008306:	f000 8270 	beq.w	80087ea <forward_dense+0x612>
 800830a:	6992      	ldr	r2, [r2, #24]
 800830c:	6895      	ldr	r5, [r2, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 826f 	beq.w	80087f2 <forward_dense+0x61a>
 8008314:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008316:	2a04      	cmp	r2, #4
 8008318:	f000 837a 	beq.w	8008a10 <forward_dense+0x838>
 800831c:	9a01      	ldr	r2, [sp, #4]
 800831e:	9904      	ldr	r1, [sp, #16]
 8008320:	428a      	cmp	r2, r1
 8008322:	d93f      	bls.n	80083a4 <forward_dense+0x1cc>
 8008324:	468e      	mov	lr, r1
 8008326:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008328:	9915      	ldr	r1, [sp, #84]	; 0x54
 800832a:	3201      	adds	r2, #1
 800832c:	eb01 0a0b 	add.w	sl, r1, fp
 8008330:	f10b 0104 	add.w	r1, fp, #4
 8008334:	9110      	str	r1, [sp, #64]	; 0x40
 8008336:	00d1      	lsls	r1, r2, #3
 8008338:	eb0b 1242 	add.w	r2, fp, r2, lsl #5
 800833c:	f8cd a018 	str.w	sl, [sp, #24]
 8008340:	9111      	str	r1, [sp, #68]	; 0x44
 8008342:	9212      	str	r2, [sp, #72]	; 0x48
 8008344:	f1aa 0204 	sub.w	r2, sl, #4
 8008348:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 800834c:	9209      	str	r2, [sp, #36]	; 0x24
 800834e:	2d00      	cmp	r5, #0
 8008350:	f000 8128 	beq.w	80085a4 <forward_dense+0x3cc>
 8008354:	ecf5 4a01 	vldmia	r5!, {s9}
 8008358:	f1ba 0f07 	cmp.w	sl, #7
 800835c:	d83d      	bhi.n	80083da <forward_dense+0x202>
 800835e:	45cb      	cmp	fp, r9
 8008360:	d211      	bcs.n	8008386 <forward_dense+0x1ae>
 8008362:	eddf 7a93 	vldr	s15, [pc, #588]	; 80085b0 <forward_dense+0x3d8>
 8008366:	4659      	mov	r1, fp
 8008368:	4638      	mov	r0, r7
 800836a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800836e:	ecf1 6a01 	vldmia	r1!, {s13}
 8008372:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008376:	4549      	cmp	r1, r9
 8008378:	ed92 6a00 	vldr	s12, [r2]
 800837c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008380:	d3f3      	bcc.n	800836a <forward_dense+0x192>
 8008382:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8008386:	9a02      	ldr	r2, [sp, #8]
 8008388:	ecee 4a01 	vstmia	lr!, {s9}
 800838c:	4417      	add	r7, r2
 800838e:	9a01      	ldr	r2, [sp, #4]
 8008390:	4596      	cmp	lr, r2
 8008392:	d3dc      	bcc.n	800834e <forward_dense+0x176>
 8008394:	9904      	ldr	r1, [sp, #16]
 8008396:	1a52      	subs	r2, r2, r1
 8008398:	3a01      	subs	r2, #1
 800839a:	f022 0203 	bic.w	r2, r2, #3
 800839e:	3204      	adds	r2, #4
 80083a0:	188a      	adds	r2, r1, r2
 80083a2:	9204      	str	r2, [sp, #16]
 80083a4:	9a01      	ldr	r2, [sp, #4]
 80083a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80083a8:	9804      	ldr	r0, [sp, #16]
 80083aa:	440a      	add	r2, r1
 80083ac:	9905      	ldr	r1, [sp, #20]
 80083ae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80083b0:	9201      	str	r2, [sp, #4]
 80083b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083b4:	42a0      	cmp	r0, r4
 80083b6:	4411      	add	r1, r2
 80083b8:	4491      	add	r9, r2
 80083ba:	9105      	str	r1, [sp, #20]
 80083bc:	9903      	ldr	r1, [sp, #12]
 80083be:	4411      	add	r1, r2
 80083c0:	9103      	str	r1, [sp, #12]
 80083c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083c4:	468b      	mov	fp, r1
 80083c6:	f080 840a 	bcs.w	8008bde <forward_dense+0xa06>
 80083ca:	4411      	add	r1, r2
 80083cc:	910a      	str	r1, [sp, #40]	; 0x28
 80083ce:	e795      	b.n	80082fc <forward_dense+0x124>
 80083d0:	6853      	ldr	r3, [r2, #4]
 80083d2:	deff      	udf	#255	; 0xff
 80083d4:	2300      	movs	r3, #0
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	deff      	udf	#255	; 0xff
 80083da:	f007 0203 	and.w	r2, r7, #3
 80083de:	2a02      	cmp	r2, #2
 80083e0:	f000 81e7 	beq.w	80087b2 <forward_dense+0x5da>
 80083e4:	2a03      	cmp	r2, #3
 80083e6:	f000 80e5 	beq.w	80085b4 <forward_dense+0x3dc>
 80083ea:	2a01      	cmp	r2, #1
 80083ec:	f000 81f0 	beq.w	80087d0 <forward_dense+0x5f8>
 80083f0:	9a06      	ldr	r2, [sp, #24]
 80083f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80085b0 <forward_dense+0x3d8>
 80083f6:	4593      	cmp	fp, r2
 80083f8:	f200 83f6 	bhi.w	8008be8 <forward_dense+0xa10>
 80083fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80083fe:	f107 0208 	add.w	r2, r7, #8
 8008402:	f10b 0120 	add.w	r1, fp, #32
 8008406:	19c4      	adds	r4, r0, r7
 8008408:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 800840c:	3208      	adds	r2, #8
 800840e:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8008412:	3120      	adds	r1, #32
 8008414:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008418:	ed51 2a10 	vldr	s5, [r1, #-64]	; 0xffffffc0
 800841c:	ed11 3a0e 	vldr	s6, [r1, #-56]	; 0xffffffc8
 8008420:	edd0 7a00 	vldr	s15, [r0]
 8008424:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8008428:	ee67 7a82 	vmul.f32	s15, s15, s4
 800842c:	ed51 3a0d 	vldr	s7, [r1, #-52]	; 0xffffffcc
 8008430:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008434:	ed11 4a0c 	vldr	s8, [r1, #-48]	; 0xffffffd0
 8008438:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 800843c:	ed90 2a00 	vldr	s4, [r0]
 8008440:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8008444:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008448:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800844c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008450:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 8008454:	edd0 2a00 	vldr	s5, [r0]
 8008458:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800845c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008460:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008464:	ed90 3a00 	vldr	s6, [r0]
 8008468:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 800846c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008470:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008474:	edd0 3a00 	vldr	s7, [r0]
 8008478:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800847c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008480:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008484:	ed90 4a00 	vldr	s8, [r0]
 8008488:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 800848c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008490:	eee4 7a05 	vfma.f32	s15, s8, s10
 8008494:	ed90 5a00 	vldr	s10, [r0]
 8008498:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 800849c:	4294      	cmp	r4, r2
 800849e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084a2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80084a6:	edd0 5a00 	vldr	s11, [r0]
 80084aa:	eee5 7a86 	vfma.f32	s15, s11, s12
 80084ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80084b2:	d1a9      	bne.n	8008408 <forward_dense+0x230>
 80084b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80084b6:	18b9      	adds	r1, r7, r2
 80084b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084ba:	454a      	cmp	r2, r9
 80084bc:	d26f      	bcs.n	800859e <forward_dense+0x3c6>
 80084be:	7808      	ldrb	r0, [r1, #0]
 80084c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084c4:	edd0 7a00 	vldr	s15, [r0]
 80084c8:	4610      	mov	r0, r2
 80084ca:	ecb0 6a01 	vldmia	r0!, {s12}
 80084ce:	4581      	cmp	r9, r0
 80084d0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80084d4:	d963      	bls.n	800859e <forward_dense+0x3c6>
 80084d6:	7848      	ldrb	r0, [r1, #1]
 80084d8:	ed92 6a01 	vldr	s12, [r2, #4]
 80084dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084e0:	edd0 7a00 	vldr	s15, [r0]
 80084e4:	f102 0008 	add.w	r0, r2, #8
 80084e8:	4581      	cmp	r9, r0
 80084ea:	eee6 6a27 	vfma.f32	s13, s12, s15
 80084ee:	d956      	bls.n	800859e <forward_dense+0x3c6>
 80084f0:	7888      	ldrb	r0, [r1, #2]
 80084f2:	ed92 6a02 	vldr	s12, [r2, #8]
 80084f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084fa:	edd0 7a00 	vldr	s15, [r0]
 80084fe:	f102 000c 	add.w	r0, r2, #12
 8008502:	4581      	cmp	r9, r0
 8008504:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008508:	d949      	bls.n	800859e <forward_dense+0x3c6>
 800850a:	78c8      	ldrb	r0, [r1, #3]
 800850c:	ed92 6a03 	vldr	s12, [r2, #12]
 8008510:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008514:	edd0 7a00 	vldr	s15, [r0]
 8008518:	f102 0010 	add.w	r0, r2, #16
 800851c:	4581      	cmp	r9, r0
 800851e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008522:	d93c      	bls.n	800859e <forward_dense+0x3c6>
 8008524:	7908      	ldrb	r0, [r1, #4]
 8008526:	ed92 6a04 	vldr	s12, [r2, #16]
 800852a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800852e:	edd0 7a00 	vldr	s15, [r0]
 8008532:	f102 0014 	add.w	r0, r2, #20
 8008536:	4581      	cmp	r9, r0
 8008538:	eee6 6a27 	vfma.f32	s13, s12, s15
 800853c:	d92f      	bls.n	800859e <forward_dense+0x3c6>
 800853e:	7948      	ldrb	r0, [r1, #5]
 8008540:	ed92 6a05 	vldr	s12, [r2, #20]
 8008544:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008548:	edd0 7a00 	vldr	s15, [r0]
 800854c:	f102 0018 	add.w	r0, r2, #24
 8008550:	4581      	cmp	r9, r0
 8008552:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008556:	d922      	bls.n	800859e <forward_dense+0x3c6>
 8008558:	7988      	ldrb	r0, [r1, #6]
 800855a:	ed92 6a06 	vldr	s12, [r2, #24]
 800855e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008562:	edd0 7a00 	vldr	s15, [r0]
 8008566:	f102 001c 	add.w	r0, r2, #28
 800856a:	4581      	cmp	r9, r0
 800856c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008570:	d915      	bls.n	800859e <forward_dense+0x3c6>
 8008572:	79c8      	ldrb	r0, [r1, #7]
 8008574:	ed92 6a07 	vldr	s12, [r2, #28]
 8008578:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800857c:	edd0 7a00 	vldr	s15, [r0]
 8008580:	f102 0020 	add.w	r0, r2, #32
 8008584:	4581      	cmp	r9, r0
 8008586:	eee6 6a27 	vfma.f32	s13, s12, s15
 800858a:	d908      	bls.n	800859e <forward_dense+0x3c6>
 800858c:	edd2 7a08 	vldr	s15, [r2, #32]
 8008590:	7a0a      	ldrb	r2, [r1, #8]
 8008592:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008596:	ed92 6a00 	vldr	s12, [r2]
 800859a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800859e:	ee74 4aa6 	vadd.f32	s9, s9, s13
 80085a2:	e6f0      	b.n	8008386 <forward_dense+0x1ae>
 80085a4:	eddf 4a02 	vldr	s9, [pc, #8]	; 80085b0 <forward_dense+0x3d8>
 80085a8:	e6d6      	b.n	8008358 <forward_dense+0x180>
 80085aa:	bf00      	nop
 80085ac:	3ffffff8 	.word	0x3ffffff8
 80085b0:	00000000 	.word	0x00000000
 80085b4:	eef0 6a47 	vmov.f32	s13, s14
 80085b8:	4659      	mov	r1, fp
 80085ba:	463a      	mov	r2, r7
 80085bc:	4694      	mov	ip, r2
 80085be:	460c      	mov	r4, r1
 80085c0:	f81c 0b01 	ldrb.w	r0, [ip], #1
 80085c4:	ecf4 7a01 	vldmia	r4!, {s15}
 80085c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085cc:	ed90 6a00 	vldr	s12, [r0]
 80085d0:	9806      	ldr	r0, [sp, #24]
 80085d2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80085d6:	4284      	cmp	r4, r0
 80085d8:	d866      	bhi.n	80086a8 <forward_dense+0x4d0>
 80085da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085dc:	f102 0611 	add.w	r6, r2, #17
 80085e0:	3209      	adds	r2, #9
 80085e2:	eba0 0801 	sub.w	r8, r0, r1
 80085e6:	3124      	adds	r1, #36	; 0x24
 80085e8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80085ec:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 80085f0:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 80085f4:	3208      	adds	r2, #8
 80085f6:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80085fa:	3120      	adds	r1, #32
 80085fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008600:	ed51 2a10 	vldr	s5, [r1, #-64]	; 0xffffffc0
 8008604:	ed11 3a0e 	vldr	s6, [r1, #-56]	; 0xffffffc8
 8008608:	edd0 7a00 	vldr	s15, [r0]
 800860c:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8008610:	ee67 7a82 	vmul.f32	s15, s15, s4
 8008614:	ed51 3a0d 	vldr	s7, [r1, #-52]	; 0xffffffcc
 8008618:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800861c:	ed11 4a0c 	vldr	s8, [r1, #-48]	; 0xffffffd0
 8008620:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 8008624:	ed90 2a00 	vldr	s4, [r0]
 8008628:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 800862c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008630:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 8008634:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008638:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 800863c:	edd0 2a00 	vldr	s5, [r0]
 8008640:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8008644:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008648:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800864c:	ed90 3a00 	vldr	s6, [r0]
 8008650:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8008654:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008658:	eee3 7a23 	vfma.f32	s15, s6, s7
 800865c:	edd0 3a00 	vldr	s7, [r0]
 8008660:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8008664:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008668:	eee3 7a84 	vfma.f32	s15, s7, s8
 800866c:	ed90 4a00 	vldr	s8, [r0]
 8008670:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8008674:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008678:	eee4 7a05 	vfma.f32	s15, s8, s10
 800867c:	ed90 5a00 	vldr	s10, [r0]
 8008680:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8008684:	4296      	cmp	r6, r2
 8008686:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800868a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800868e:	edd0 5a00 	vldr	s11, [r0]
 8008692:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008696:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800869a:	d1a9      	bne.n	80085f0 <forward_dense+0x418>
 800869c:	f108 0801 	add.w	r8, r8, #1
 80086a0:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80086a4:	eb04 1448 	add.w	r4, r4, r8, lsl #5
 80086a8:	454c      	cmp	r4, r9
 80086aa:	f4bf af78 	bcs.w	800859e <forward_dense+0x3c6>
 80086ae:	f89c 2000 	ldrb.w	r2, [ip]
 80086b2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80086b6:	edd2 7a00 	vldr	s15, [r2]
 80086ba:	4622      	mov	r2, r4
 80086bc:	ecb2 6a01 	vldmia	r2!, {s12}
 80086c0:	4591      	cmp	r9, r2
 80086c2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80086c6:	f67f af6a 	bls.w	800859e <forward_dense+0x3c6>
 80086ca:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80086ce:	ed94 6a01 	vldr	s12, [r4, #4]
 80086d2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80086d6:	edd2 7a00 	vldr	s15, [r2]
 80086da:	f104 0208 	add.w	r2, r4, #8
 80086de:	4591      	cmp	r9, r2
 80086e0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80086e4:	f67f af5b 	bls.w	800859e <forward_dense+0x3c6>
 80086e8:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80086ec:	ed94 6a02 	vldr	s12, [r4, #8]
 80086f0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80086f4:	edd2 7a00 	vldr	s15, [r2]
 80086f8:	f104 020c 	add.w	r2, r4, #12
 80086fc:	4591      	cmp	r9, r2
 80086fe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008702:	f67f af4c 	bls.w	800859e <forward_dense+0x3c6>
 8008706:	f89c 2003 	ldrb.w	r2, [ip, #3]
 800870a:	ed94 6a03 	vldr	s12, [r4, #12]
 800870e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008712:	edd2 7a00 	vldr	s15, [r2]
 8008716:	f104 0210 	add.w	r2, r4, #16
 800871a:	4591      	cmp	r9, r2
 800871c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008720:	f67f af3d 	bls.w	800859e <forward_dense+0x3c6>
 8008724:	f89c 2004 	ldrb.w	r2, [ip, #4]
 8008728:	ed94 6a04 	vldr	s12, [r4, #16]
 800872c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008730:	edd2 7a00 	vldr	s15, [r2]
 8008734:	f104 0214 	add.w	r2, r4, #20
 8008738:	4591      	cmp	r9, r2
 800873a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800873e:	f67f af2e 	bls.w	800859e <forward_dense+0x3c6>
 8008742:	f89c 2005 	ldrb.w	r2, [ip, #5]
 8008746:	ed94 6a05 	vldr	s12, [r4, #20]
 800874a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800874e:	edd2 7a00 	vldr	s15, [r2]
 8008752:	f104 0218 	add.w	r2, r4, #24
 8008756:	4591      	cmp	r9, r2
 8008758:	eee6 6a27 	vfma.f32	s13, s12, s15
 800875c:	f67f af1f 	bls.w	800859e <forward_dense+0x3c6>
 8008760:	f89c 2006 	ldrb.w	r2, [ip, #6]
 8008764:	ed94 6a06 	vldr	s12, [r4, #24]
 8008768:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800876c:	edd2 7a00 	vldr	s15, [r2]
 8008770:	f104 021c 	add.w	r2, r4, #28
 8008774:	4591      	cmp	r9, r2
 8008776:	eee6 6a27 	vfma.f32	s13, s12, s15
 800877a:	f67f af10 	bls.w	800859e <forward_dense+0x3c6>
 800877e:	f89c 2007 	ldrb.w	r2, [ip, #7]
 8008782:	ed94 6a07 	vldr	s12, [r4, #28]
 8008786:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800878a:	edd2 7a00 	vldr	s15, [r2]
 800878e:	f104 0220 	add.w	r2, r4, #32
 8008792:	4591      	cmp	r9, r2
 8008794:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008798:	f67f af01 	bls.w	800859e <forward_dense+0x3c6>
 800879c:	f89c 2008 	ldrb.w	r2, [ip, #8]
 80087a0:	edd4 7a08 	vldr	s15, [r4, #32]
 80087a4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80087a8:	ed92 6a00 	vldr	s12, [r2]
 80087ac:	eee6 6a27 	vfma.f32	s13, s12, s15
 80087b0:	e6f5      	b.n	800859e <forward_dense+0x3c6>
 80087b2:	eef0 6a47 	vmov.f32	s13, s14
 80087b6:	4659      	mov	r1, fp
 80087b8:	463a      	mov	r2, r7
 80087ba:	f812 0b01 	ldrb.w	r0, [r2], #1
 80087be:	ecf1 7a01 	vldmia	r1!, {s15}
 80087c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80087c6:	ed90 6a00 	vldr	s12, [r0]
 80087ca:	eee6 6a27 	vfma.f32	s13, s12, s15
 80087ce:	e6f5      	b.n	80085bc <forward_dense+0x3e4>
 80087d0:	463a      	mov	r2, r7
 80087d2:	eddb 7a00 	vldr	s15, [fp]
 80087d6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80087d8:	f812 0b01 	ldrb.w	r0, [r2], #1
 80087dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80087e0:	edd0 6a00 	vldr	s13, [r0]
 80087e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80087e8:	e7e7      	b.n	80087ba <forward_dense+0x5e2>
 80087ea:	4615      	mov	r5, r2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f47f ad91 	bne.w	8008314 <forward_dense+0x13c>
 80087f2:	9a01      	ldr	r2, [sp, #4]
 80087f4:	9904      	ldr	r1, [sp, #16]
 80087f6:	428a      	cmp	r2, r1
 80087f8:	f67f add4 	bls.w	80083a4 <forward_dense+0x1cc>
 80087fc:	4690      	mov	r8, r2
 80087fe:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008800:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008802:	460c      	mov	r4, r1
 8008804:	f000 0c0f 	and.w	ip, r0, #15
 8008808:	f8dd e008 	ldr.w	lr, [sp, #8]
 800880c:	eb0b 0602 	add.w	r6, fp, r2
 8008810:	4692      	mov	sl, r2
 8008812:	9306      	str	r3, [sp, #24]
 8008814:	2d00      	cmp	r5, #0
 8008816:	f000 81d7 	beq.w	8008bc8 <forward_dense+0x9f0>
 800881a:	280f      	cmp	r0, #15
 800881c:	ecb5 0a01 	vldmia	r5!, {s0}
 8008820:	ed5f 6a9d 	vldr	s13, [pc, #-628]	; 80085b0 <forward_dense+0x3d8>
 8008824:	f240 81d7 	bls.w	8008bd6 <forward_dense+0x9fe>
 8008828:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 800882c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008830:	4601      	mov	r1, r0
 8008832:	ed13 6a0f 	vldr	s12, [r3, #-60]	; 0xffffffc4
 8008836:	3910      	subs	r1, #16
 8008838:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800883c:	3340      	adds	r3, #64	; 0x40
 800883e:	ed12 4a10 	vldr	s8, [r2, #-64]	; 0xffffffc0
 8008842:	290f      	cmp	r1, #15
 8008844:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008848:	ed53 4a20 	vldr	s9, [r3, #-128]	; 0xffffff80
 800884c:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 8008850:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008854:	ed53 5a1e 	vldr	s11, [r3, #-120]	; 0xffffff88
 8008858:	eee4 7a24 	vfma.f32	s15, s8, s9
 800885c:	ed13 6a1d 	vldr	s12, [r3, #-116]	; 0xffffff8c
 8008860:	ed12 ea1d 	vldr	s28, [r2, #-116]	; 0xffffff8c
 8008864:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 8008868:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 800886c:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 8008870:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 8008874:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008878:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800887c:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8008880:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8008884:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 8008888:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 800888c:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 8008890:	eeee 7a06 	vfma.f32	s15, s28, s12
 8008894:	ed52 8a17 	vldr	s17, [r2, #-92]	; 0xffffffa4
 8008898:	ed13 8a17 	vldr	s16, [r3, #-92]	; 0xffffffa4
 800889c:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 80088a0:	ed13 1a16 	vldr	s2, [r3, #-88]	; 0xffffffa8
 80088a4:	ed52 1a15 	vldr	s3, [r2, #-84]	; 0xffffffac
 80088a8:	ed13 2a15 	vldr	s4, [r3, #-84]	; 0xffffffac
 80088ac:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80088b0:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 80088b4:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 80088b8:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 80088bc:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 80088c0:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 80088c4:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 80088c8:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80088cc:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 80088d0:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 80088d4:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80088d8:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80088dc:	eee9 7a89 	vfma.f32	s15, s19, s18
 80088e0:	eee8 7a88 	vfma.f32	s15, s17, s16
 80088e4:	eee0 7a81 	vfma.f32	s15, s1, s2
 80088e8:	eee1 7a82 	vfma.f32	s15, s3, s4
 80088ec:	eee2 7a83 	vfma.f32	s15, s5, s6
 80088f0:	eee3 7a84 	vfma.f32	s15, s7, s8
 80088f4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80088f8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80088fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008900:	d897      	bhi.n	8008832 <forward_dense+0x65a>
 8008902:	eb07 010a 	add.w	r1, r7, sl
 8008906:	4663      	mov	r3, ip
 8008908:	4632      	mov	r2, r6
 800890a:	2b00      	cmp	r3, #0
 800890c:	d075      	beq.n	80089fa <forward_dense+0x822>
 800890e:	ed92 6a00 	vldr	s12, [r2]
 8008912:	2b01      	cmp	r3, #1
 8008914:	edd1 7a00 	vldr	s15, [r1]
 8008918:	eee6 6a27 	vfma.f32	s13, s12, s15
 800891c:	d06d      	beq.n	80089fa <forward_dense+0x822>
 800891e:	ed92 6a01 	vldr	s12, [r2, #4]
 8008922:	2b02      	cmp	r3, #2
 8008924:	edd1 7a01 	vldr	s15, [r1, #4]
 8008928:	eee6 6a27 	vfma.f32	s13, s12, s15
 800892c:	d065      	beq.n	80089fa <forward_dense+0x822>
 800892e:	ed92 6a02 	vldr	s12, [r2, #8]
 8008932:	2b03      	cmp	r3, #3
 8008934:	edd1 7a02 	vldr	s15, [r1, #8]
 8008938:	eee6 6a27 	vfma.f32	s13, s12, s15
 800893c:	d05d      	beq.n	80089fa <forward_dense+0x822>
 800893e:	ed92 6a03 	vldr	s12, [r2, #12]
 8008942:	2b04      	cmp	r3, #4
 8008944:	edd1 7a03 	vldr	s15, [r1, #12]
 8008948:	eee6 6a27 	vfma.f32	s13, s12, s15
 800894c:	d055      	beq.n	80089fa <forward_dense+0x822>
 800894e:	ed92 6a04 	vldr	s12, [r2, #16]
 8008952:	2b05      	cmp	r3, #5
 8008954:	edd1 7a04 	vldr	s15, [r1, #16]
 8008958:	eee6 6a27 	vfma.f32	s13, s12, s15
 800895c:	d04d      	beq.n	80089fa <forward_dense+0x822>
 800895e:	ed92 6a05 	vldr	s12, [r2, #20]
 8008962:	2b06      	cmp	r3, #6
 8008964:	edd1 7a05 	vldr	s15, [r1, #20]
 8008968:	eee6 6a27 	vfma.f32	s13, s12, s15
 800896c:	d045      	beq.n	80089fa <forward_dense+0x822>
 800896e:	ed92 6a06 	vldr	s12, [r2, #24]
 8008972:	2b07      	cmp	r3, #7
 8008974:	edd1 7a06 	vldr	s15, [r1, #24]
 8008978:	eee6 6a27 	vfma.f32	s13, s12, s15
 800897c:	d03d      	beq.n	80089fa <forward_dense+0x822>
 800897e:	ed92 6a07 	vldr	s12, [r2, #28]
 8008982:	2b08      	cmp	r3, #8
 8008984:	edd1 7a07 	vldr	s15, [r1, #28]
 8008988:	eee6 6a27 	vfma.f32	s13, s12, s15
 800898c:	d035      	beq.n	80089fa <forward_dense+0x822>
 800898e:	ed92 6a08 	vldr	s12, [r2, #32]
 8008992:	2b09      	cmp	r3, #9
 8008994:	edd1 7a08 	vldr	s15, [r1, #32]
 8008998:	eee6 6a27 	vfma.f32	s13, s12, s15
 800899c:	d02d      	beq.n	80089fa <forward_dense+0x822>
 800899e:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 80089a2:	2b0a      	cmp	r3, #10
 80089a4:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 80089a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80089ac:	d025      	beq.n	80089fa <forward_dense+0x822>
 80089ae:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
 80089b2:	2b0b      	cmp	r3, #11
 80089b4:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 80089b8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80089bc:	d01d      	beq.n	80089fa <forward_dense+0x822>
 80089be:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 80089c2:	2b0c      	cmp	r3, #12
 80089c4:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 80089c8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80089cc:	d015      	beq.n	80089fa <forward_dense+0x822>
 80089ce:	ed92 6a0c 	vldr	s12, [r2, #48]	; 0x30
 80089d2:	3b0d      	subs	r3, #13
 80089d4:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 80089d8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80089dc:	d00d      	beq.n	80089fa <forward_dense+0x822>
 80089de:	ed92 6a0d 	vldr	s12, [r2, #52]	; 0x34
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 80089e8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80089ec:	d005      	beq.n	80089fa <forward_dense+0x822>
 80089ee:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 80089f2:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80089f6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80089fa:	ee70 6a26 	vadd.f32	s13, s0, s13
 80089fe:	4477      	add	r7, lr
 8008a00:	ece4 6a01 	vstmia	r4!, {s13}
 8008a04:	4544      	cmp	r4, r8
 8008a06:	f4ff af05 	bcc.w	8008814 <forward_dense+0x63c>
 8008a0a:	9b06      	ldr	r3, [sp, #24]
 8008a0c:	9a01      	ldr	r2, [sp, #4]
 8008a0e:	e4c1      	b.n	8008394 <forward_dense+0x1bc>
 8008a10:	9901      	ldr	r1, [sp, #4]
 8008a12:	9a04      	ldr	r2, [sp, #16]
 8008a14:	4291      	cmp	r1, r2
 8008a16:	f67f acc5 	bls.w	80083a4 <forward_dense+0x1cc>
 8008a1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a1c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008a20:	4691      	mov	r9, r2
 8008a22:	eb07 0c01 	add.w	ip, r7, r1
 8008a26:	9903      	ldr	r1, [sp, #12]
 8008a28:	3901      	subs	r1, #1
 8008a2a:	9106      	str	r1, [sp, #24]
 8008a2c:	2d00      	cmp	r5, #0
 8008a2e:	f000 80c0 	beq.w	8008bb2 <forward_dense+0x9da>
 8008a32:	9a07      	ldr	r2, [sp, #28]
 8008a34:	ecb5 2a01 	vldmia	r5!, {s4}
 8008a38:	eddf 6a83 	vldr	s13, [pc, #524]	; 8008c48 <forward_dense+0xa70>
 8008a3c:	2a00      	cmp	r2, #0
 8008a3e:	f000 80c0 	beq.w	8008bc2 <forward_dense+0x9ea>
 8008a42:	1d39      	adds	r1, r7, #4
 8008a44:	f10b 0220 	add.w	r2, fp, #32
 8008a48:	f811 6c04 	ldrb.w	r6, [r1, #-4]
 8008a4c:	3104      	adds	r1, #4
 8008a4e:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8008a52:	3220      	adds	r2, #32
 8008a54:	f006 0e0f 	and.w	lr, r6, #15
 8008a58:	0936      	lsrs	r6, r6, #4
 8008a5a:	f811 4c07 	ldrb.w	r4, [r1, #-7]
 8008a5e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8008a62:	ed52 3a10 	vldr	s7, [r2, #-64]	; 0xffffffc0
 8008a66:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8008a6a:	ed12 3a0e 	vldr	s6, [r2, #-56]	; 0xffffffc8
 8008a6e:	edde 7a00 	vldr	s15, [lr]
 8008a72:	edd6 2a00 	vldr	s5, [r6]
 8008a76:	0926      	lsrs	r6, r4, #4
 8008a78:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8008a7c:	f004 040f 	and.w	r4, r4, #15
 8008a80:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8008a84:	f811 0c06 	ldrb.w	r0, [r1, #-6]
 8008a88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a8c:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8008a90:	eee2 7aa3 	vfma.f32	s15, s5, s7
 8008a94:	edd6 2a00 	vldr	s5, [r6]
 8008a98:	edd4 3a00 	vldr	s7, [r4]
 8008a9c:	0904      	lsrs	r4, r0, #4
 8008a9e:	ed12 4a0c 	vldr	s8, [r2, #-48]	; 0xffffffd0
 8008aa2:	f000 000f 	and.w	r0, r0, #15
 8008aa6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008aaa:	ed52 5a0b 	vldr	s11, [r2, #-44]	; 0xffffffd4
 8008aae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ab2:	ed12 5a0a 	vldr	s10, [r2, #-40]	; 0xffffffd8
 8008ab6:	ed12 6a09 	vldr	s12, [r2, #-36]	; 0xffffffdc
 8008aba:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008abe:	eee3 7aa4 	vfma.f32	s15, s7, s9
 8008ac2:	edd4 3a00 	vldr	s7, [r4]
 8008ac6:	edd0 4a00 	vldr	s9, [r0]
 8008aca:	f811 0c05 	ldrb.w	r0, [r1, #-5]
 8008ace:	4561      	cmp	r1, ip
 8008ad0:	ea4f 1410 	mov.w	r4, r0, lsr #4
 8008ad4:	f000 000f 	and.w	r0, r0, #15
 8008ad8:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008adc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ae0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ae4:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8008ae8:	edd4 4a00 	vldr	s9, [r4]
 8008aec:	edd0 5a00 	vldr	s11, [r0]
 8008af0:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008af4:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008af8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008afc:	d1a4      	bne.n	8008a48 <forward_dense+0x870>
 8008afe:	f1ac 0804 	sub.w	r8, ip, #4
 8008b02:	f8dd e014 	ldr.w	lr, [sp, #20]
 8008b06:	9a03      	ldr	r2, [sp, #12]
 8008b08:	4596      	cmp	lr, r2
 8008b0a:	d229      	bcs.n	8008b60 <forward_dense+0x988>
 8008b0c:	9a06      	ldr	r2, [sp, #24]
 8008b0e:	f10e 0108 	add.w	r1, lr, #8
 8008b12:	f108 34ff 	add.w	r4, r8, #4294967295
 8008b16:	eba2 060e 	sub.w	r6, r2, lr
 8008b1a:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 8008b1e:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 8008b22:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8008b26:	3108      	adds	r1, #8
 8008b28:	ed11 5a03 	vldr	s10, [r1, #-12]
 8008b2c:	f002 000f 	and.w	r0, r2, #15
 8008b30:	0912      	lsrs	r2, r2, #4
 8008b32:	ed11 6a04 	vldr	s12, [r1, #-16]
 8008b36:	42a6      	cmp	r6, r4
 8008b38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b3c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008b40:	edd0 7a00 	vldr	s15, [r0]
 8008b44:	edd2 5a00 	vldr	s11, [r2]
 8008b48:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008b4c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008b50:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008b54:	d1e5      	bne.n	8008b22 <forward_dense+0x94a>
 8008b56:	f10a 0a01 	add.w	sl, sl, #1
 8008b5a:	44d0      	add	r8, sl
 8008b5c:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8008b60:	9a08      	ldr	r2, [sp, #32]
 8008b62:	b1ca      	cbz	r2, 8008b98 <forward_dense+0x9c0>
 8008b64:	f898 2000 	ldrb.w	r2, [r8]
 8008b68:	edde 7a00 	vldr	s15, [lr]
 8008b6c:	0912      	lsrs	r2, r2, #4
 8008b6e:	9902      	ldr	r1, [sp, #8]
 8008b70:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008b74:	440f      	add	r7, r1
 8008b76:	448c      	add	ip, r1
 8008b78:	ed92 6a00 	vldr	s12, [r2]
 8008b7c:	9a01      	ldr	r2, [sp, #4]
 8008b7e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008b82:	ee32 2a26 	vadd.f32	s4, s4, s13
 8008b86:	eca9 2a01 	vstmia	r9!, {s4}
 8008b8a:	454a      	cmp	r2, r9
 8008b8c:	f63f af4e 	bhi.w	8008a2c <forward_dense+0x854>
 8008b90:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008b94:	f7ff bbfe 	b.w	8008394 <forward_dense+0x1bc>
 8008b98:	9a02      	ldr	r2, [sp, #8]
 8008b9a:	ee72 6a26 	vadd.f32	s13, s4, s13
 8008b9e:	4417      	add	r7, r2
 8008ba0:	4494      	add	ip, r2
 8008ba2:	9a01      	ldr	r2, [sp, #4]
 8008ba4:	ece9 6a01 	vstmia	r9!, {s13}
 8008ba8:	4591      	cmp	r9, r2
 8008baa:	d2f1      	bcs.n	8008b90 <forward_dense+0x9b8>
 8008bac:	2d00      	cmp	r5, #0
 8008bae:	f47f af40 	bne.w	8008a32 <forward_dense+0x85a>
 8008bb2:	9a07      	ldr	r2, [sp, #28]
 8008bb4:	eeb0 2a47 	vmov.f32	s4, s14
 8008bb8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8008c48 <forward_dense+0xa70>
 8008bbc:	2a00      	cmp	r2, #0
 8008bbe:	f47f af40 	bne.w	8008a42 <forward_dense+0x86a>
 8008bc2:	46de      	mov	lr, fp
 8008bc4:	46b8      	mov	r8, r7
 8008bc6:	e79e      	b.n	8008b06 <forward_dense+0x92e>
 8008bc8:	280f      	cmp	r0, #15
 8008bca:	eeb0 0a47 	vmov.f32	s0, s14
 8008bce:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008c48 <forward_dense+0xa70>
 8008bd2:	f63f ae29 	bhi.w	8008828 <forward_dense+0x650>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	4639      	mov	r1, r7
 8008bda:	465a      	mov	r2, fp
 8008bdc:	e695      	b.n	800890a <forward_dense+0x732>
 8008bde:	b01b      	add	sp, #108	; 0x6c
 8008be0:	ecbd 8b0e 	vpop	{d8-d14}
 8008be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be8:	465a      	mov	r2, fp
 8008bea:	4639      	mov	r1, r7
 8008bec:	e465      	b.n	80084ba <forward_dense+0x2e2>
 8008bee:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8008bf2:	f1b9 0f00 	cmp.w	r9, #0
 8008bf6:	f43f ab40 	beq.w	800827a <forward_dense+0xa2>
 8008bfa:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008bfe:	f001 fe07 	bl	800a810 <ai_array_get_byte_size>
 8008c02:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008c06:	4602      	mov	r2, r0
 8008c08:	4651      	mov	r1, sl
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f001 fe6a 	bl	800a8e4 <memcpy>
 8008c10:	4682      	mov	sl, r0
 8008c12:	f7ff bb32 	b.w	800827a <forward_dense+0xa2>
 8008c16:	2b04      	cmp	r3, #4
 8008c18:	d00b      	beq.n	8008c32 <forward_dense+0xa5a>
 8008c1a:	f04f 0900 	mov.w	r9, #0
 8008c1e:	f7ff bb27 	b.w	8008270 <forward_dense+0x98>
 8008c22:	930c      	str	r3, [sp, #48]	; 0x30
 8008c24:	f7ff baff 	b.w	8008226 <forward_dense+0x4e>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	f7ff bafa 	b.w	8008226 <forward_dense+0x4e>
 8008c32:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8008c36:	f7ff bb20 	b.w	800827a <forward_dense+0xa2>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	deff      	udf	#255	; 0xff
 8008c40:	2300      	movs	r3, #0
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	deff      	udf	#255	; 0xff
 8008c46:	bf00      	nop
 8008c48:	00000000 	.word	0x00000000

08008c4c <array_f32_identity>:
 8008c4c:	6983      	ldr	r3, [r0, #24]
 8008c4e:	6989      	ldr	r1, [r1, #24]
 8008c50:	428b      	cmp	r3, r1
 8008c52:	d004      	beq.n	8008c5e <array_f32_identity+0x12>
 8008c54:	0092      	lsls	r2, r2, #2
 8008c56:	68c9      	ldr	r1, [r1, #12]
 8008c58:	68d8      	ldr	r0, [r3, #12]
 8008c5a:	f001 be43 	b.w	800a8e4 <memcpy>
 8008c5e:	4770      	bx	lr

08008c60 <forward_lstm>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	ed2d 8b10 	vpush	{d8-d15}
 8008c68:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8008c6c:	6983      	ldr	r3, [r0, #24]
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	881a      	ldrh	r2, [r3, #0]
 8008c72:	60b8      	str	r0, [r7, #8]
 8008c74:	2a00      	cmp	r2, #0
 8008c76:	f001 844c 	beq.w	800a512 <forward_lstm+0x18b2>
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	2a01      	cmp	r2, #1
 8008c7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c82:	f001 8446 	beq.w	800a512 <forward_lstm+0x18b2>
 8008c86:	2a02      	cmp	r2, #2
 8008c88:	f001 8443 	beq.w	800a512 <forward_lstm+0x18b2>
 8008c8c:	69d9      	ldr	r1, [r3, #28]
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	f001 8436 	beq.w	800a500 <forward_lstm+0x18a0>
 8008c94:	8b1b      	ldrh	r3, [r3, #24]
 8008c96:	6808      	ldr	r0, [r1, #0]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	688b      	ldr	r3, [r1, #8]
 8008c9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ca4:	bf98      	it	ls
 8008ca6:	f04f 0b00 	movls.w	fp, #0
 8008caa:	68cb      	ldr	r3, [r1, #12]
 8008cac:	bf88      	it	hi
 8008cae:	f8d1 b004 	ldrhi.w	fp, [r1, #4]
 8008cb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008cb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cbe:	b10b      	cbz	r3, 8008cc4 <forward_lstm+0x64>
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cc4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008cc6:	466d      	mov	r5, sp
 8008cc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ccc:	68c4      	ldr	r4, [r0, #12]
 8008cce:	899b      	ldrh	r3, [r3, #12]
 8008cd0:	68b8      	ldr	r0, [r7, #8]
 8008cd2:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 8008cd6:	0098      	lsls	r0, r3, #2
 8008cd8:	3007      	adds	r0, #7
 8008cda:	08c0      	lsrs	r0, r0, #3
 8008cdc:	eba5 05c0 	sub.w	r5, r5, r0, lsl #3
 8008ce0:	46ad      	mov	sp, r5
 8008ce2:	1ddd      	adds	r5, r3, #7
 8008ce4:	466e      	mov	r6, sp
 8008ce6:	08ed      	lsrs	r5, r5, #3
 8008ce8:	eba6 05c5 	sub.w	r5, r6, r5, lsl #3
 8008cec:	46ad      	mov	sp, r5
 8008cee:	68e5      	ldr	r5, [r4, #12]
 8008cf0:	6864      	ldr	r4, [r4, #4]
 8008cf2:	653d      	str	r5, [r7, #80]	; 0x50
 8008cf4:	66bc      	str	r4, [r7, #104]	; 0x68
 8008cf6:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8008cfa:	ee0f 4a10 	vmov	s30, r4
 8008cfe:	466c      	mov	r4, sp
 8008d00:	eba4 05c0 	sub.w	r5, r4, r0, lsl #3
 8008d04:	46ad      	mov	sp, r5
 8008d06:	eba5 00c0 	sub.w	r0, r5, r0, lsl #3
 8008d0a:	f8c7 d010 	str.w	sp, [r7, #16]
 8008d0e:	4685      	mov	sp, r0
 8008d10:	46ee      	mov	lr, sp
 8008d12:	2900      	cmp	r1, #0
 8008d14:	f001 83ed 	beq.w	800a4f2 <forward_lstm+0x1892>
 8008d18:	694d      	ldr	r5, [r1, #20]
 8008d1a:	6908      	ldr	r0, [r1, #16]
 8008d1c:	ee0f 5a90 	vmov	s31, r5
 8008d20:	698d      	ldr	r5, [r1, #24]
 8008d22:	6578      	str	r0, [r7, #84]	; 0x54
 8008d24:	673d      	str	r5, [r7, #112]	; 0x70
 8008d26:	e9d1 9107 	ldrd	r9, r1, [r1, #28]
 8008d2a:	b110      	cbz	r0, 8008d32 <forward_lstm+0xd2>
 8008d2c:	6980      	ldr	r0, [r0, #24]
 8008d2e:	6880      	ldr	r0, [r0, #8]
 8008d30:	6578      	str	r0, [r7, #84]	; 0x54
 8008d32:	ee1f 0a90 	vmov	r0, s31
 8008d36:	b118      	cbz	r0, 8008d40 <forward_lstm+0xe0>
 8008d38:	6980      	ldr	r0, [r0, #24]
 8008d3a:	6880      	ldr	r0, [r0, #8]
 8008d3c:	ee0f 0a90 	vmov	s31, r0
 8008d40:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008d42:	b110      	cbz	r0, 8008d4a <forward_lstm+0xea>
 8008d44:	6980      	ldr	r0, [r0, #24]
 8008d46:	6880      	ldr	r0, [r0, #8]
 8008d48:	6738      	str	r0, [r7, #112]	; 0x70
 8008d4a:	f1b9 0f00 	cmp.w	r9, #0
 8008d4e:	d003      	beq.n	8008d58 <forward_lstm+0xf8>
 8008d50:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8008d54:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8008d58:	b109      	cbz	r1, 8008d5e <forward_lstm+0xfe>
 8008d5a:	6989      	ldr	r1, [r1, #24]
 8008d5c:	6889      	ldr	r1, [r1, #8]
 8008d5e:	2a03      	cmp	r2, #3
 8008d60:	f001 83d7 	beq.w	800a512 <forward_lstm+0x18b2>
 8008d64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d68:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 8008d6c:	f1ba 0f00 	cmp.w	sl, #0
 8008d70:	d001      	beq.n	8008d76 <forward_lstm+0x116>
 8008d72:	f8da a000 	ldr.w	sl, [sl]
 8008d76:	4423      	add	r3, r4
 8008d78:	4620      	mov	r0, r4
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	f1ae 0404 	sub.w	r4, lr, #4
 8008d80:	f8c7 9104 	str.w	r9, [r7, #260]	; 0x104
 8008d84:	3e04      	subs	r6, #4
 8008d86:	f1ce 0e04 	rsb	lr, lr, #4
 8008d8a:	1f15      	subs	r5, r2, #4
 8008d8c:	f8d7 c094 	ldr.w	ip, [r7, #148]	; 0x94
 8008d90:	4699      	mov	r9, r3
 8008d92:	60fc      	str	r4, [r7, #12]
 8008d94:	e016      	b.n	8008dc4 <forward_lstm+0x164>
 8008d96:	4423      	add	r3, r4
 8008d98:	f853 200e 	ldr.w	r2, [r3, lr]
 8008d9c:	b1c2      	cbz	r2, 8008dd0 <forward_lstm+0x170>
 8008d9e:	68d3      	ldr	r3, [r2, #12]
 8008da0:	f846 2f04 	str.w	r2, [r6, #4]!
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	6992      	ldr	r2, [r2, #24]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	6893      	ldr	r3, [r2, #8]
 8008dac:	f845 3f04 	str.w	r3, [r5, #4]!
 8008db0:	bf8c      	ite	hi
 8008db2:	2301      	movhi	r3, #1
 8008db4:	2300      	movls	r3, #0
 8008db6:	f800 3b01 	strb.w	r3, [r0], #1
 8008dba:	bf8c      	ite	hi
 8008dbc:	4643      	movhi	r3, r8
 8008dbe:	2300      	movls	r3, #0
 8008dc0:	f844 3f04 	str.w	r3, [r4, #4]!
 8008dc4:	4548      	cmp	r0, r9
 8008dc6:	d003      	beq.n	8008dd0 <forward_lstm+0x170>
 8008dc8:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1e2      	bne.n	8008d96 <forward_lstm+0x136>
 8008dd0:	f8da 3018 	ldr.w	r3, [sl, #24]
 8008dd4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008dd8:	689d      	ldr	r5, [r3, #8]
 8008dda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dde:	6992      	ldr	r2, [r2, #24]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	f8db 0018 	ldr.w	r0, [fp, #24]
 8008de6:	6892      	ldr	r2, [r2, #8]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8008dee:	667a      	str	r2, [r7, #100]	; 0x64
 8008df0:	69a4      	ldr	r4, [r4, #24]
 8008df2:	6882      	ldr	r2, [r0, #8]
 8008df4:	ee1f 0a10 	vmov	r0, s30
 8008df8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	663a      	str	r2, [r7, #96]	; 0x60
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	68a2      	ldr	r2, [r4, #8]
 8008e02:	eb05 0440 	add.w	r4, r5, r0, lsl #1
 8008e06:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8008e0a:	f8d7 9104 	ldr.w	r9, [r7, #260]	; 0x104
 8008e0e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008e10:	eb05 0200 	add.w	r2, r5, r0
 8008e14:	4420      	add	r0, r4
 8008e16:	677d      	str	r5, [r7, #116]	; 0x74
 8008e18:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8008e1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e20:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8008e24:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8008e28:	607b      	str	r3, [r7, #4]
 8008e2a:	f041 826e 	bne.w	800a30a <forward_lstm+0x16aa>
 8008e2e:	2900      	cmp	r1, #0
 8008e30:	f001 829f 	beq.w	800a372 <forward_lstm+0x1712>
 8008e34:	ee1f 2a10 	vmov	r2, s30
 8008e38:	4628      	mov	r0, r5
 8008e3a:	f001 fd53 	bl	800a8e4 <memcpy>
 8008e3e:	4649      	mov	r1, r9
 8008e40:	ee1f 2a10 	vmov	r2, s30
 8008e44:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8008e48:	f1b9 0f00 	cmp.w	r9, #0
 8008e4c:	f001 82a0 	beq.w	800a390 <forward_lstm+0x1730>
 8008e50:	f001 fd48 	bl	800a8e4 <memcpy>
 8008e54:	ee1f 2a10 	vmov	r2, s30
 8008e58:	2100      	movs	r1, #0
 8008e5a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8008e5e:	f001 fd4f 	bl	800a900 <memset>
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e66:	643b      	str	r3, [r7, #64]	; 0x40
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f001 8260 	beq.w	800a32e <forward_lstm+0x16ce>
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f001 8262 	beq.w	800a340 <forward_lstm+0x16e0>
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f001 8265 	beq.w	800a352 <forward_lstm+0x16f2>
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	ed93 8a10 	vldr	s16, [r3, #64]	; 0x40
 8008e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f001 8267 	beq.w	800a366 <forward_lstm+0x1706>
 8008e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008eac:	b1b3      	cbz	r3, 8008edc <forward_lstm+0x27c>
 8008eae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008eb2:	899d      	ldrh	r5, [r3, #12]
 8008eb4:	b195      	cbz	r5, 8008edc <forward_lstm+0x27c>
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eba:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	1e5e      	subs	r6, r3, #1
 8008ec2:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8008ec6:	6811      	ldr	r1, [r2, #0]
 8008ec8:	fb03 f406 	mul.w	r4, r3, r6
 8008ecc:	425b      	negs	r3, r3
 8008ece:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ed2:	6003      	str	r3, [r0, #0]
 8008ed4:	f842 1b04 	str.w	r1, [r2], #4
 8008ed8:	4295      	cmp	r5, r2
 8008eda:	d1f2      	bne.n	8008ec2 <forward_lstm+0x262>
 8008edc:	f8d7 e068 	ldr.w	lr, [r7, #104]	; 0x68
 8008ee0:	fa1f f288 	uxth.w	r2, r8
 8008ee4:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 8008ee8:	eddf 8ac7 	vldr	s17, [pc, #796]	; 8009208 <forward_lstm+0x5a8>
 8008eec:	fa1f f18e 	uxth.w	r1, lr
 8008ef0:	4673      	mov	r3, lr
 8008ef2:	0096      	lsls	r6, r2, #2
 8008ef4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ef8:	009d      	lsls	r5, r3, #2
 8008efa:	f1a1 0310 	sub.w	r3, r1, #16
 8008efe:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8008f02:	091b      	lsrs	r3, r3, #4
 8008f04:	fb06 f101 	mul.w	r1, r6, r1
 8008f08:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	019c      	lsls	r4, r3, #6
 8008f10:	f1a2 0310 	sub.w	r3, r2, #16
 8008f14:	fb02 f202 	mul.w	r2, r2, r2
 8008f18:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8008f1c:	091b      	lsrs	r3, r3, #4
 8008f1e:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8008f22:	eb04 0c46 	add.w	ip, r4, r6, lsl #1
 8008f26:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8008f28:	f8c7 c0a4 	str.w	ip, [r7, #164]	; 0xa4
 8008f2c:	eb04 0c41 	add.w	ip, r4, r1, lsl #1
 8008f30:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8008f32:	f8c7 c04c 	str.w	ip, [r7, #76]	; 0x4c
 8008f36:	eb04 0c46 	add.w	ip, r4, r6, lsl #1
 8008f3a:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8008f3c:	f8c7 c044 	str.w	ip, [r7, #68]	; 0x44
 8008f40:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
 8008f44:	1c5c      	adds	r4, r3, #1
 8008f46:	019b      	lsls	r3, r3, #6
 8008f48:	f8c7 c048 	str.w	ip, [r7, #72]	; 0x48
 8008f4c:	61bb      	str	r3, [r7, #24]
 8008f4e:	01a3      	lsls	r3, r4, #6
 8008f50:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8008f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f5a:	440b      	add	r3, r1
 8008f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8008f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f60:	440b      	add	r3, r1
 8008f62:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8008f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f6a:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8008f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f70:	f8c7 c028 	str.w	ip, [r7, #40]	; 0x28
 8008f74:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8008f78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f7a:	4633      	mov	r3, r6
 8008f7c:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
 8008f80:	1996      	adds	r6, r2, r6
 8008f82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f84:	67fe      	str	r6, [r7, #124]	; 0x7c
 8008f86:	4676      	mov	r6, lr
 8008f88:	441a      	add	r2, r3
 8008f8a:	4006      	ands	r6, r0
 8008f8c:	ea08 0000 	and.w	r0, r8, r0
 8008f90:	623a      	str	r2, [r7, #32]
 8008f92:	18e2      	adds	r2, r4, r3
 8008f94:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8008f98:	0088      	lsls	r0, r1, #2
 8008f9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f9e:	f8c7 60fc 	str.w	r6, [r7, #252]	; 0xfc
 8008fa2:	f008 060f 	and.w	r6, r8, #15
 8008fa6:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8008faa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008fac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fae:	fb05 f000 	mul.w	r0, r5, r0
 8008fb2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008fb6:	4419      	add	r1, r3
 8008fb8:	6378      	str	r0, [r7, #52]	; 0x34
 8008fba:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008fbe:	61f9      	str	r1, [r7, #28]
 8008fc0:	18d1      	adds	r1, r2, r3
 8008fc2:	fb05 f000 	mul.w	r0, r5, r0
 8008fc6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8008fca:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008fce:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8008fd2:	617b      	str	r3, [r7, #20]
 8008fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008fda:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8008fde:	4413      	add	r3, r2
 8008fe0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008fe4:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8008fe8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fec:	4b85      	ldr	r3, [pc, #532]	; (8009204 <forward_lstm+0x5a4>)
 8008fee:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008ff2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008ff6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8008ffa:	e9c7 3246 	strd	r3, r2, [r7, #280]	; 0x118
 8008ffe:	e9c7 324a 	strd	r3, r2, [r7, #296]	; 0x128
 8009002:	e9c7 324e 	strd	r3, r2, [r7, #312]	; 0x138
 8009006:	e9c7 3252 	strd	r3, r2, [r7, #328]	; 0x148
 800900a:	e9c7 3256 	strd	r3, r2, [r7, #344]	; 0x158
 800900e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8009018:	4403      	add	r3, r0
 800901a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800901e:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 8009022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800902a:	e9c7 1144 	strd	r1, r1, [r7, #272]	; 0x110
 800902e:	e9c7 334c 	strd	r3, r3, [r7, #304]	; 0x130
 8009032:	e9c7 0050 	strd	r0, r0, [r7, #320]	; 0x140
 8009036:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800903a:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 800903c:	e9c7 0054 	strd	r0, r0, [r7, #336]	; 0x150
 8009040:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009044:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 8009048:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800904c:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 8009050:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8009054:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
 8009058:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800905c:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
 8009060:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8009064:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 8009068:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800906c:	e9c7 5558 	strd	r5, r5, [r7, #352]	; 0x160
 8009070:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 8009074:	2a00      	cmp	r2, #0
 8009076:	f001 81d0 	beq.w	800a41a <forward_lstm+0x17ba>
 800907a:	69b8      	ldr	r0, [r7, #24]
 800907c:	469a      	mov	sl, r3
 800907e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009082:	46a3      	mov	fp, r4
 8009084:	3080      	adds	r0, #128	; 0x80
 8009086:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800908a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800908c:	46ae      	mov	lr, r5
 800908e:	1882      	adds	r2, r0, r2
 8009090:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8009094:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009098:	468c      	mov	ip, r1
 800909a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800909e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80090a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090a2:	eb02 0800 	add.w	r8, r2, r0
 80090a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80090a8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80090ac:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 80090b0:	6a38      	ldr	r0, [r7, #32]
 80090b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80090b6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80090ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 80090c2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80090c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80090c8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 80090cc:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80090d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d2:	1810      	adds	r0, r2, r0
 80090d4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80090d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80090dc:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 80090e0:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80090e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090e6:	4402      	add	r2, r0
 80090e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80090ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80090f0:	e9d7 3219 	ldrd	r3, r2, [r7, #100]	; 0x64
 80090f4:	f002 020f 	and.w	r2, r2, #15
 80090f8:	4699      	mov	r9, r3
 80090fa:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80090fe:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8009102:	67bd      	str	r5, [r7, #120]	; 0x78
 8009104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009108:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8009208 <forward_lstm+0x5a8>
 800910c:	ecec 8a01 	vstmia	ip!, {s17}
 8009110:	2b00      	cmp	r3, #0
 8009112:	f001 816e 	beq.w	800a3f2 <forward_lstm+0x1792>
 8009116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800911a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800911e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009122:	f109 0340 	add.w	r3, r9, #64	; 0x40
 8009126:	ed13 7a0f 	vldr	s14, [r3, #-60]	; 0xffffffc4
 800912a:	3910      	subs	r1, #16
 800912c:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8009130:	3340      	adds	r3, #64	; 0x40
 8009132:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8009136:	290f      	cmp	r1, #15
 8009138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800913c:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8009140:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8009144:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8009148:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 800914c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009150:	ed13 7a1d 	vldr	s14, [r3, #-116]	; 0xffffff8c
 8009154:	ed12 ea1d 	vldr	s28, [r2, #-116]	; 0xffffff8c
 8009158:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 800915c:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 8009160:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 8009164:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 8009168:	eee5 7a86 	vfma.f32	s15, s11, s12
 800916c:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8009170:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8009174:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8009178:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800917c:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 8009180:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 8009184:	eeee 7a07 	vfma.f32	s15, s28, s14
 8009188:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 800918c:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 8009190:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8009194:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 8009198:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 800919c:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 80091a0:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80091a4:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80091a8:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80091ac:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80091b0:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80091b4:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80091b8:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80091bc:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80091c0:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80091c4:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 80091c8:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80091cc:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80091d0:	eee9 7a89 	vfma.f32	s15, s19, s18
 80091d4:	eee0 7a20 	vfma.f32	s15, s0, s1
 80091d8:	eee1 7a21 	vfma.f32	s15, s2, s3
 80091dc:	eee2 7a22 	vfma.f32	s15, s4, s5
 80091e0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80091e4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80091e8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80091ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80091f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80091f4:	d897      	bhi.n	8009126 <forward_lstm+0x4c6>
 80091f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091fa:	e9d7 5427 	ldrd	r5, r4, [r7, #156]	; 0x9c
 80091fe:	444b      	add	r3, r9
 8009200:	e004      	b.n	800920c <forward_lstm+0x5ac>
 8009202:	bf00      	nop
 8009204:	01821040 	.word	0x01821040
 8009208:	00000000 	.word	0x00000000
 800920c:	2d00      	cmp	r5, #0
 800920e:	d076      	beq.n	80092fe <forward_lstm+0x69e>
 8009210:	ed94 7a00 	vldr	s14, [r4]
 8009214:	2d01      	cmp	r5, #1
 8009216:	edd3 7a00 	vldr	s15, [r3]
 800921a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800921e:	d06e      	beq.n	80092fe <forward_lstm+0x69e>
 8009220:	ed94 7a01 	vldr	s14, [r4, #4]
 8009224:	2d02      	cmp	r5, #2
 8009226:	edd3 7a01 	vldr	s15, [r3, #4]
 800922a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800922e:	d066      	beq.n	80092fe <forward_lstm+0x69e>
 8009230:	ed93 7a02 	vldr	s14, [r3, #8]
 8009234:	2d03      	cmp	r5, #3
 8009236:	edd4 7a02 	vldr	s15, [r4, #8]
 800923a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800923e:	d05e      	beq.n	80092fe <forward_lstm+0x69e>
 8009240:	ed93 7a03 	vldr	s14, [r3, #12]
 8009244:	2d04      	cmp	r5, #4
 8009246:	edd4 7a03 	vldr	s15, [r4, #12]
 800924a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800924e:	d056      	beq.n	80092fe <forward_lstm+0x69e>
 8009250:	ed94 7a04 	vldr	s14, [r4, #16]
 8009254:	2d05      	cmp	r5, #5
 8009256:	edd3 7a04 	vldr	s15, [r3, #16]
 800925a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800925e:	d04e      	beq.n	80092fe <forward_lstm+0x69e>
 8009260:	ed93 7a05 	vldr	s14, [r3, #20]
 8009264:	2d06      	cmp	r5, #6
 8009266:	edd4 7a05 	vldr	s15, [r4, #20]
 800926a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800926e:	d046      	beq.n	80092fe <forward_lstm+0x69e>
 8009270:	ed93 7a06 	vldr	s14, [r3, #24]
 8009274:	2d07      	cmp	r5, #7
 8009276:	edd4 7a06 	vldr	s15, [r4, #24]
 800927a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800927e:	d03e      	beq.n	80092fe <forward_lstm+0x69e>
 8009280:	ed93 7a07 	vldr	s14, [r3, #28]
 8009284:	2d08      	cmp	r5, #8
 8009286:	edd4 7a07 	vldr	s15, [r4, #28]
 800928a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800928e:	d036      	beq.n	80092fe <forward_lstm+0x69e>
 8009290:	ed93 7a08 	vldr	s14, [r3, #32]
 8009294:	2d09      	cmp	r5, #9
 8009296:	edd4 7a08 	vldr	s15, [r4, #32]
 800929a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800929e:	d02e      	beq.n	80092fe <forward_lstm+0x69e>
 80092a0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80092a4:	2d0a      	cmp	r5, #10
 80092a6:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80092aa:	eee7 6a27 	vfma.f32	s13, s14, s15
 80092ae:	d026      	beq.n	80092fe <forward_lstm+0x69e>
 80092b0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80092b4:	2d0b      	cmp	r5, #11
 80092b6:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80092ba:	eee7 6a27 	vfma.f32	s13, s14, s15
 80092be:	d01e      	beq.n	80092fe <forward_lstm+0x69e>
 80092c0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80092c4:	2d0c      	cmp	r5, #12
 80092c6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80092ca:	eee7 6a27 	vfma.f32	s13, s14, s15
 80092ce:	d016      	beq.n	80092fe <forward_lstm+0x69e>
 80092d0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80092d4:	f1b5 020d 	subs.w	r2, r5, #13
 80092d8:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80092dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80092e0:	d00d      	beq.n	80092fe <forward_lstm+0x69e>
 80092e2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80092e6:	2a01      	cmp	r2, #1
 80092e8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80092ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 80092f0:	d005      	beq.n	80092fe <forward_lstm+0x69e>
 80092f2:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80092f6:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80092fa:	eee7 6a27 	vfma.f32	s13, s14, s15
 80092fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009302:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8009208 <forward_lstm+0x5a8>
 8009306:	ed4c 6a01 	vstr	s13, [ip, #-4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f001 8069 	beq.w	800a3e2 <forward_lstm+0x1782>
 8009310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009314:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8009318:	3340      	adds	r3, #64	; 0x40
 800931a:	3240      	adds	r2, #64	; 0x40
 800931c:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8009320:	3340      	adds	r3, #64	; 0x40
 8009322:	ed12 6a0f 	vldr	s12, [r2, #-60]	; 0xffffffc4
 8009326:	3240      	adds	r2, #64	; 0x40
 8009328:	ed13 4a20 	vldr	s8, [r3, #-128]	; 0xffffff80
 800932c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009330:	ed52 4a20 	vldr	s9, [r2, #-128]	; 0xffffff80
 8009334:	ed13 5a1e 	vldr	s10, [r3, #-120]	; 0xffffff88
 8009338:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 800933c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009340:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8009344:	ed53 ea1d 	vldr	s29, [r3, #-116]	; 0xffffff8c
 8009348:	ed13 ea1c 	vldr	s28, [r3, #-112]	; 0xffffff90
 800934c:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 8009350:	ed13 da1b 	vldr	s26, [r3, #-108]	; 0xffffff94
 8009354:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 8009358:	eee5 7a25 	vfma.f32	s15, s10, s11
 800935c:	ed13 ca1a 	vldr	s24, [r3, #-104]	; 0xffffff98
 8009360:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8009364:	ed13 ba19 	vldr	s22, [r3, #-100]	; 0xffffff9c
 8009368:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800936c:	ed13 aa18 	vldr	s20, [r3, #-96]	; 0xffffffa0
 8009370:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 8009374:	eeee 7a86 	vfma.f32	s15, s29, s12
 8009378:	ed13 9a17 	vldr	s18, [r3, #-92]	; 0xffffffa4
 800937c:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 8009380:	ed53 0a16 	vldr	s1, [r3, #-88]	; 0xffffffa8
 8009384:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8009388:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800938c:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 8009390:	eeee 7a2d 	vfma.f32	s15, s28, s27
 8009394:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8009398:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800939c:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 80093a0:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80093a4:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 80093a8:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80093ac:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80093b0:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 80093b4:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80093b8:	4298      	cmp	r0, r3
 80093ba:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80093be:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 80093c2:	eeea 7a29 	vfma.f32	s15, s20, s19
 80093c6:	eee9 7a00 	vfma.f32	s15, s18, s0
 80093ca:	eee0 7a81 	vfma.f32	s15, s1, s2
 80093ce:	eee1 7a82 	vfma.f32	s15, s3, s4
 80093d2:	eee2 7a83 	vfma.f32	s15, s5, s6
 80093d6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80093da:	eee4 7a85 	vfma.f32	s15, s9, s10
 80093de:	eee5 7a86 	vfma.f32	s15, s11, s12
 80093e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80093e6:	d199      	bne.n	800931c <forward_lstm+0x6bc>
 80093e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093ec:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80093f0:	189a      	adds	r2, r3, r2
 80093f2:	2e00      	cmp	r6, #0
 80093f4:	d078      	beq.n	80094e8 <forward_lstm+0x888>
 80093f6:	4633      	mov	r3, r6
 80093f8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80093fc:	ed91 6a00 	vldr	s12, [r1]
 8009400:	2b01      	cmp	r3, #1
 8009402:	edd2 7a00 	vldr	s15, [r2]
 8009406:	eea6 7a27 	vfma.f32	s14, s12, s15
 800940a:	d06d      	beq.n	80094e8 <forward_lstm+0x888>
 800940c:	ed91 6a01 	vldr	s12, [r1, #4]
 8009410:	2b02      	cmp	r3, #2
 8009412:	edd2 7a01 	vldr	s15, [r2, #4]
 8009416:	eea6 7a27 	vfma.f32	s14, s12, s15
 800941a:	d065      	beq.n	80094e8 <forward_lstm+0x888>
 800941c:	ed91 6a02 	vldr	s12, [r1, #8]
 8009420:	2b03      	cmp	r3, #3
 8009422:	edd2 7a02 	vldr	s15, [r2, #8]
 8009426:	eea6 7a27 	vfma.f32	s14, s12, s15
 800942a:	d05d      	beq.n	80094e8 <forward_lstm+0x888>
 800942c:	ed91 6a03 	vldr	s12, [r1, #12]
 8009430:	2b04      	cmp	r3, #4
 8009432:	edd2 7a03 	vldr	s15, [r2, #12]
 8009436:	eea6 7a27 	vfma.f32	s14, s12, s15
 800943a:	d055      	beq.n	80094e8 <forward_lstm+0x888>
 800943c:	ed91 6a04 	vldr	s12, [r1, #16]
 8009440:	2b05      	cmp	r3, #5
 8009442:	edd2 7a04 	vldr	s15, [r2, #16]
 8009446:	eea6 7a27 	vfma.f32	s14, s12, s15
 800944a:	d04d      	beq.n	80094e8 <forward_lstm+0x888>
 800944c:	ed91 6a05 	vldr	s12, [r1, #20]
 8009450:	2b06      	cmp	r3, #6
 8009452:	edd2 7a05 	vldr	s15, [r2, #20]
 8009456:	eea6 7a27 	vfma.f32	s14, s12, s15
 800945a:	d045      	beq.n	80094e8 <forward_lstm+0x888>
 800945c:	ed91 6a06 	vldr	s12, [r1, #24]
 8009460:	2b07      	cmp	r3, #7
 8009462:	edd2 7a06 	vldr	s15, [r2, #24]
 8009466:	eea6 7a27 	vfma.f32	s14, s12, s15
 800946a:	d03d      	beq.n	80094e8 <forward_lstm+0x888>
 800946c:	ed91 6a07 	vldr	s12, [r1, #28]
 8009470:	2b08      	cmp	r3, #8
 8009472:	edd2 7a07 	vldr	s15, [r2, #28]
 8009476:	eea6 7a27 	vfma.f32	s14, s12, s15
 800947a:	d035      	beq.n	80094e8 <forward_lstm+0x888>
 800947c:	ed91 6a08 	vldr	s12, [r1, #32]
 8009480:	2b09      	cmp	r3, #9
 8009482:	edd2 7a08 	vldr	s15, [r2, #32]
 8009486:	eea6 7a27 	vfma.f32	s14, s12, s15
 800948a:	d02d      	beq.n	80094e8 <forward_lstm+0x888>
 800948c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8009490:	2b0a      	cmp	r3, #10
 8009492:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8009496:	eea6 7a27 	vfma.f32	s14, s12, s15
 800949a:	d025      	beq.n	80094e8 <forward_lstm+0x888>
 800949c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80094a0:	2b0b      	cmp	r3, #11
 80094a2:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80094a6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80094aa:	d01d      	beq.n	80094e8 <forward_lstm+0x888>
 80094ac:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 80094b0:	2b0c      	cmp	r3, #12
 80094b2:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80094b6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80094ba:	d015      	beq.n	80094e8 <forward_lstm+0x888>
 80094bc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80094c0:	3b0d      	subs	r3, #13
 80094c2:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80094c6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80094ca:	d00d      	beq.n	80094e8 <forward_lstm+0x888>
 80094cc:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80094d6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80094da:	d005      	beq.n	80094e8 <forward_lstm+0x888>
 80094dc:	ed92 6a0e 	vldr	s12, [r2, #56]	; 0x38
 80094e0:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80094e4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80094e8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80094ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094f0:	f8c7 e0b4 	str.w	lr, [r7, #180]	; 0xb4
 80094f4:	ed0c 7a01 	vstr	s14, [ip, #-4]
 80094f8:	ecb3 6a01 	vldmia	r3!, {s12}
 80094fc:	edde 7a00 	vldr	s15, [lr]
 8009500:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009504:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009508:	ecf3 6a01 	vldmia	r3!, {s13}
 800950c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009518:	ee36 7a87 	vadd.f32	s14, s13, s14
 800951c:	ed5f 6ac6 	vldr	s13, [pc, #-792]	; 8009208 <forward_lstm+0x5a8>
 8009520:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8009524:	edcb 8a00 	vstr	s17, [fp]
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 8756 	beq.w	800a3da <forward_lstm+0x177a>
 800952e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009532:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8009536:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800953a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800953e:	3340      	adds	r3, #64	; 0x40
 8009540:	ed13 7a0f 	vldr	s14, [r3, #-60]	; 0xffffffc4
 8009544:	3910      	subs	r1, #16
 8009546:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800954a:	3340      	adds	r3, #64	; 0x40
 800954c:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8009550:	290f      	cmp	r1, #15
 8009552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009556:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 800955a:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800955e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8009562:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 8009566:	eee4 7a85 	vfma.f32	s15, s9, s10
 800956a:	ed13 7a1d 	vldr	s14, [r3, #-116]	; 0xffffff8c
 800956e:	ed12 ea1d 	vldr	s28, [r2, #-116]	; 0xffffff8c
 8009572:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 8009576:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 800957a:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 800957e:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 8009582:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009586:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800958a:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800958e:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8009592:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 8009596:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 800959a:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 800959e:	eeee 7a07 	vfma.f32	s15, s28, s14
 80095a2:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 80095a6:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 80095aa:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 80095ae:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 80095b2:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 80095b6:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 80095ba:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80095be:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80095c2:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80095c6:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80095ca:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80095ce:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80095d2:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80095d6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80095da:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80095de:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 80095e2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80095e6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80095ea:	eee9 7a89 	vfma.f32	s15, s19, s18
 80095ee:	eee0 7a20 	vfma.f32	s15, s0, s1
 80095f2:	eee1 7a21 	vfma.f32	s15, s2, s3
 80095f6:	eee2 7a22 	vfma.f32	s15, s4, s5
 80095fa:	eee3 7a23 	vfma.f32	s15, s6, s7
 80095fe:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009602:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009606:	eee6 7a07 	vfma.f32	s15, s12, s14
 800960a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800960e:	d897      	bhi.n	8009540 <forward_lstm+0x8e0>
 8009610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009614:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009618:	4413      	add	r3, r2
 800961a:	2d00      	cmp	r5, #0
 800961c:	d076      	beq.n	800970c <forward_lstm+0xaac>
 800961e:	ed94 7a00 	vldr	s14, [r4]
 8009622:	2d01      	cmp	r5, #1
 8009624:	edd3 7a00 	vldr	s15, [r3]
 8009628:	eee7 6a27 	vfma.f32	s13, s14, s15
 800962c:	d06e      	beq.n	800970c <forward_lstm+0xaac>
 800962e:	ed94 7a01 	vldr	s14, [r4, #4]
 8009632:	2d02      	cmp	r5, #2
 8009634:	edd3 7a01 	vldr	s15, [r3, #4]
 8009638:	eee7 6a27 	vfma.f32	s13, s14, s15
 800963c:	d066      	beq.n	800970c <forward_lstm+0xaac>
 800963e:	ed94 7a02 	vldr	s14, [r4, #8]
 8009642:	2d03      	cmp	r5, #3
 8009644:	edd3 7a02 	vldr	s15, [r3, #8]
 8009648:	eee7 6a27 	vfma.f32	s13, s14, s15
 800964c:	d05e      	beq.n	800970c <forward_lstm+0xaac>
 800964e:	ed94 7a03 	vldr	s14, [r4, #12]
 8009652:	2d04      	cmp	r5, #4
 8009654:	edd3 7a03 	vldr	s15, [r3, #12]
 8009658:	eee7 6a27 	vfma.f32	s13, s14, s15
 800965c:	d056      	beq.n	800970c <forward_lstm+0xaac>
 800965e:	ed94 7a04 	vldr	s14, [r4, #16]
 8009662:	2d05      	cmp	r5, #5
 8009664:	edd3 7a04 	vldr	s15, [r3, #16]
 8009668:	eee7 6a27 	vfma.f32	s13, s14, s15
 800966c:	d04e      	beq.n	800970c <forward_lstm+0xaac>
 800966e:	ed94 7a05 	vldr	s14, [r4, #20]
 8009672:	2d06      	cmp	r5, #6
 8009674:	edd3 7a05 	vldr	s15, [r3, #20]
 8009678:	eee7 6a27 	vfma.f32	s13, s14, s15
 800967c:	d046      	beq.n	800970c <forward_lstm+0xaac>
 800967e:	ed94 7a06 	vldr	s14, [r4, #24]
 8009682:	2d07      	cmp	r5, #7
 8009684:	edd3 7a06 	vldr	s15, [r3, #24]
 8009688:	eee7 6a27 	vfma.f32	s13, s14, s15
 800968c:	d03e      	beq.n	800970c <forward_lstm+0xaac>
 800968e:	ed94 7a07 	vldr	s14, [r4, #28]
 8009692:	2d08      	cmp	r5, #8
 8009694:	edd3 7a07 	vldr	s15, [r3, #28]
 8009698:	eee7 6a27 	vfma.f32	s13, s14, s15
 800969c:	d036      	beq.n	800970c <forward_lstm+0xaac>
 800969e:	ed94 7a08 	vldr	s14, [r4, #32]
 80096a2:	2d09      	cmp	r5, #9
 80096a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80096a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80096ac:	d02e      	beq.n	800970c <forward_lstm+0xaac>
 80096ae:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 80096b2:	2d0a      	cmp	r5, #10
 80096b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80096b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80096bc:	d026      	beq.n	800970c <forward_lstm+0xaac>
 80096be:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80096c2:	2d0b      	cmp	r5, #11
 80096c4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80096c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80096cc:	d01e      	beq.n	800970c <forward_lstm+0xaac>
 80096ce:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 80096d2:	2d0c      	cmp	r5, #12
 80096d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80096d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80096dc:	d016      	beq.n	800970c <forward_lstm+0xaac>
 80096de:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80096e2:	f1b5 020d 	subs.w	r2, r5, #13
 80096e6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80096ea:	eee7 6a27 	vfma.f32	s13, s14, s15
 80096ee:	d00d      	beq.n	800970c <forward_lstm+0xaac>
 80096f0:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 80096f4:	2a01      	cmp	r2, #1
 80096f6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80096fa:	eee7 6a27 	vfma.f32	s13, s14, s15
 80096fe:	d005      	beq.n	800970c <forward_lstm+0xaac>
 8009700:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8009704:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8009708:	eee7 6a27 	vfma.f32	s13, s14, s15
 800970c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009710:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8009a24 <forward_lstm+0xdc4>
 8009714:	edcb 6a00 	vstr	s13, [fp]
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 8656 	beq.w	800a3ca <forward_lstm+0x176a>
 800971e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009722:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8009726:	3340      	adds	r3, #64	; 0x40
 8009728:	3240      	adds	r2, #64	; 0x40
 800972a:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800972e:	3340      	adds	r3, #64	; 0x40
 8009730:	ed12 6a0f 	vldr	s12, [r2, #-60]	; 0xffffffc4
 8009734:	3240      	adds	r2, #64	; 0x40
 8009736:	ed13 4a20 	vldr	s8, [r3, #-128]	; 0xffffff80
 800973a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800973e:	ed52 4a20 	vldr	s9, [r2, #-128]	; 0xffffff80
 8009742:	ed13 5a1e 	vldr	s10, [r3, #-120]	; 0xffffff88
 8009746:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 800974a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800974e:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8009752:	ed53 ea1d 	vldr	s29, [r3, #-116]	; 0xffffff8c
 8009756:	ed13 ea1c 	vldr	s28, [r3, #-112]	; 0xffffff90
 800975a:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 800975e:	ed13 da1b 	vldr	s26, [r3, #-108]	; 0xffffff94
 8009762:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 8009766:	eee5 7a25 	vfma.f32	s15, s10, s11
 800976a:	ed13 ca1a 	vldr	s24, [r3, #-104]	; 0xffffff98
 800976e:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8009772:	ed13 ba19 	vldr	s22, [r3, #-100]	; 0xffffff9c
 8009776:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800977a:	ed13 aa18 	vldr	s20, [r3, #-96]	; 0xffffffa0
 800977e:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 8009782:	eeee 7a86 	vfma.f32	s15, s29, s12
 8009786:	ed13 9a17 	vldr	s18, [r3, #-92]	; 0xffffffa4
 800978a:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 800978e:	ed53 0a16 	vldr	s1, [r3, #-88]	; 0xffffffa8
 8009792:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8009796:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800979a:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 800979e:	eeee 7a2d 	vfma.f32	s15, s28, s27
 80097a2:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 80097a6:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80097aa:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 80097ae:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80097b2:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 80097b6:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80097ba:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80097be:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 80097c2:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80097c6:	4283      	cmp	r3, r0
 80097c8:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80097cc:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 80097d0:	eeea 7a29 	vfma.f32	s15, s20, s19
 80097d4:	eee9 7a00 	vfma.f32	s15, s18, s0
 80097d8:	eee0 7a81 	vfma.f32	s15, s1, s2
 80097dc:	eee1 7a82 	vfma.f32	s15, s3, s4
 80097e0:	eee2 7a83 	vfma.f32	s15, s5, s6
 80097e4:	eee3 7a84 	vfma.f32	s15, s7, s8
 80097e8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80097ec:	eee5 7a86 	vfma.f32	s15, s11, s12
 80097f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80097f4:	d199      	bne.n	800972a <forward_lstm+0xaca>
 80097f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80097fa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80097fe:	189a      	adds	r2, r3, r2
 8009800:	2e00      	cmp	r6, #0
 8009802:	d078      	beq.n	80098f6 <forward_lstm+0xc96>
 8009804:	4633      	mov	r3, r6
 8009806:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800980a:	ed91 6a00 	vldr	s12, [r1]
 800980e:	2b01      	cmp	r3, #1
 8009810:	edd2 7a00 	vldr	s15, [r2]
 8009814:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009818:	d06d      	beq.n	80098f6 <forward_lstm+0xc96>
 800981a:	ed91 6a01 	vldr	s12, [r1, #4]
 800981e:	2b02      	cmp	r3, #2
 8009820:	edd2 7a01 	vldr	s15, [r2, #4]
 8009824:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009828:	d065      	beq.n	80098f6 <forward_lstm+0xc96>
 800982a:	ed91 6a02 	vldr	s12, [r1, #8]
 800982e:	2b03      	cmp	r3, #3
 8009830:	edd2 7a02 	vldr	s15, [r2, #8]
 8009834:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009838:	d05d      	beq.n	80098f6 <forward_lstm+0xc96>
 800983a:	ed91 6a03 	vldr	s12, [r1, #12]
 800983e:	2b04      	cmp	r3, #4
 8009840:	edd2 7a03 	vldr	s15, [r2, #12]
 8009844:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009848:	d055      	beq.n	80098f6 <forward_lstm+0xc96>
 800984a:	ed91 6a04 	vldr	s12, [r1, #16]
 800984e:	2b05      	cmp	r3, #5
 8009850:	edd2 7a04 	vldr	s15, [r2, #16]
 8009854:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009858:	d04d      	beq.n	80098f6 <forward_lstm+0xc96>
 800985a:	ed91 6a05 	vldr	s12, [r1, #20]
 800985e:	2b06      	cmp	r3, #6
 8009860:	edd2 7a05 	vldr	s15, [r2, #20]
 8009864:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009868:	d045      	beq.n	80098f6 <forward_lstm+0xc96>
 800986a:	ed91 6a06 	vldr	s12, [r1, #24]
 800986e:	2b07      	cmp	r3, #7
 8009870:	edd2 7a06 	vldr	s15, [r2, #24]
 8009874:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009878:	d03d      	beq.n	80098f6 <forward_lstm+0xc96>
 800987a:	ed91 6a07 	vldr	s12, [r1, #28]
 800987e:	2b08      	cmp	r3, #8
 8009880:	edd2 7a07 	vldr	s15, [r2, #28]
 8009884:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009888:	d035      	beq.n	80098f6 <forward_lstm+0xc96>
 800988a:	ed91 6a08 	vldr	s12, [r1, #32]
 800988e:	2b09      	cmp	r3, #9
 8009890:	edd2 7a08 	vldr	s15, [r2, #32]
 8009894:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009898:	d02d      	beq.n	80098f6 <forward_lstm+0xc96>
 800989a:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 800989e:	2b0a      	cmp	r3, #10
 80098a0:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80098a4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80098a8:	d025      	beq.n	80098f6 <forward_lstm+0xc96>
 80098aa:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80098ae:	2b0b      	cmp	r3, #11
 80098b0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80098b4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80098b8:	d01d      	beq.n	80098f6 <forward_lstm+0xc96>
 80098ba:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 80098be:	2b0c      	cmp	r3, #12
 80098c0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80098c4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80098c8:	d015      	beq.n	80098f6 <forward_lstm+0xc96>
 80098ca:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80098ce:	3b0d      	subs	r3, #13
 80098d0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80098d4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80098d8:	d00d      	beq.n	80098f6 <forward_lstm+0xc96>
 80098da:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80098de:	2b01      	cmp	r3, #1
 80098e0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80098e4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80098e8:	d005      	beq.n	80098f6 <forward_lstm+0xc96>
 80098ea:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 80098ee:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80098f2:	eea6 7a27 	vfma.f32	s14, s12, s15
 80098f6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80098fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80098fe:	f8c7 80b0 	str.w	r8, [r7, #176]	; 0xb0
 8009902:	ed8b 7a00 	vstr	s14, [fp]
 8009906:	ecf3 6a01 	vldmia	r3!, {s13}
 800990a:	ed98 6a00 	vldr	s12, [r8]
 800990e:	edde 7a00 	vldr	s15, [lr]
 8009912:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009916:	eee6 6a27 	vfma.f32	s13, s12, s15
 800991a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800991e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009922:	ecab 7a01 	vstmia	fp!, {s14}
 8009926:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8009a24 <forward_lstm+0xdc4>
 800992a:	edca 8a00 	vstr	s17, [sl]
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 856d 	beq.w	800a40e <forward_lstm+0x17ae>
 8009934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009938:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800993c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009940:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009944:	3340      	adds	r3, #64	; 0x40
 8009946:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 800994a:	3910      	subs	r1, #16
 800994c:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8009950:	3340      	adds	r3, #64	; 0x40
 8009952:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8009956:	290f      	cmp	r1, #15
 8009958:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800995c:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8009960:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8009964:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8009968:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 800996c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009970:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 8009974:	ed12 ea1d 	vldr	s28, [r2, #-116]	; 0xffffff8c
 8009978:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 800997c:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 8009980:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 8009984:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 8009988:	eee5 7a86 	vfma.f32	s15, s11, s12
 800998c:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8009990:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8009994:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8009998:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800999c:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 80099a0:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 80099a4:	eeee 7a26 	vfma.f32	s15, s28, s13
 80099a8:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 80099ac:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 80099b0:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 80099b4:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 80099b8:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 80099bc:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 80099c0:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80099c4:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80099c8:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80099cc:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80099d0:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80099d4:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80099d8:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80099dc:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80099e0:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80099e4:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80099e8:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80099ec:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80099f0:	eee9 7a89 	vfma.f32	s15, s19, s18
 80099f4:	eee0 7a20 	vfma.f32	s15, s0, s1
 80099f8:	eee1 7a21 	vfma.f32	s15, s2, s3
 80099fc:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009a00:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009a04:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009a08:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009a0c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009a10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a14:	d897      	bhi.n	8009946 <forward_lstm+0xce6>
 8009a16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009a1e:	4413      	add	r3, r2
 8009a20:	e002      	b.n	8009a28 <forward_lstm+0xdc8>
 8009a22:	bf00      	nop
 8009a24:	00000000 	.word	0x00000000
 8009a28:	2d00      	cmp	r5, #0
 8009a2a:	d076      	beq.n	8009b1a <forward_lstm+0xeba>
 8009a2c:	edd4 6a00 	vldr	s13, [r4]
 8009a30:	2d01      	cmp	r5, #1
 8009a32:	edd3 7a00 	vldr	s15, [r3]
 8009a36:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a3a:	d06e      	beq.n	8009b1a <forward_lstm+0xeba>
 8009a3c:	edd4 6a01 	vldr	s13, [r4, #4]
 8009a40:	2d02      	cmp	r5, #2
 8009a42:	edd3 7a01 	vldr	s15, [r3, #4]
 8009a46:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a4a:	d066      	beq.n	8009b1a <forward_lstm+0xeba>
 8009a4c:	edd4 6a02 	vldr	s13, [r4, #8]
 8009a50:	2d03      	cmp	r5, #3
 8009a52:	edd3 7a02 	vldr	s15, [r3, #8]
 8009a56:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a5a:	d05e      	beq.n	8009b1a <forward_lstm+0xeba>
 8009a5c:	edd4 6a03 	vldr	s13, [r4, #12]
 8009a60:	2d04      	cmp	r5, #4
 8009a62:	edd3 7a03 	vldr	s15, [r3, #12]
 8009a66:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a6a:	d056      	beq.n	8009b1a <forward_lstm+0xeba>
 8009a6c:	edd4 6a04 	vldr	s13, [r4, #16]
 8009a70:	2d05      	cmp	r5, #5
 8009a72:	edd3 7a04 	vldr	s15, [r3, #16]
 8009a76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a7a:	d04e      	beq.n	8009b1a <forward_lstm+0xeba>
 8009a7c:	edd4 6a05 	vldr	s13, [r4, #20]
 8009a80:	2d06      	cmp	r5, #6
 8009a82:	edd3 7a05 	vldr	s15, [r3, #20]
 8009a86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a8a:	d046      	beq.n	8009b1a <forward_lstm+0xeba>
 8009a8c:	edd4 6a06 	vldr	s13, [r4, #24]
 8009a90:	2d07      	cmp	r5, #7
 8009a92:	edd3 7a06 	vldr	s15, [r3, #24]
 8009a96:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a9a:	d03e      	beq.n	8009b1a <forward_lstm+0xeba>
 8009a9c:	edd4 6a07 	vldr	s13, [r4, #28]
 8009aa0:	2d08      	cmp	r5, #8
 8009aa2:	edd3 7a07 	vldr	s15, [r3, #28]
 8009aa6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009aaa:	d036      	beq.n	8009b1a <forward_lstm+0xeba>
 8009aac:	edd4 6a08 	vldr	s13, [r4, #32]
 8009ab0:	2d09      	cmp	r5, #9
 8009ab2:	edd3 7a08 	vldr	s15, [r3, #32]
 8009ab6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009aba:	d02e      	beq.n	8009b1a <forward_lstm+0xeba>
 8009abc:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8009ac0:	2d0a      	cmp	r5, #10
 8009ac2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009ac6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009aca:	d026      	beq.n	8009b1a <forward_lstm+0xeba>
 8009acc:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8009ad0:	2d0b      	cmp	r5, #11
 8009ad2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009ad6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009ada:	d01e      	beq.n	8009b1a <forward_lstm+0xeba>
 8009adc:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8009ae0:	2d0c      	cmp	r5, #12
 8009ae2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009ae6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009aea:	d016      	beq.n	8009b1a <forward_lstm+0xeba>
 8009aec:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8009af0:	f1b5 020d 	subs.w	r2, r5, #13
 8009af4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009af8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009afc:	d00d      	beq.n	8009b1a <forward_lstm+0xeba>
 8009afe:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8009b02:	2a01      	cmp	r2, #1
 8009b04:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009b08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009b0c:	d005      	beq.n	8009b1a <forward_lstm+0xeba>
 8009b0e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8009b12:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8009b16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009b1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009b1e:	ed5f 6a3f 	vldr	s13, [pc, #-252]	; 8009a24 <forward_lstm+0xdc4>
 8009b22:	ed8a 7a00 	vstr	s14, [sl]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 846a 	beq.w	800a400 <forward_lstm+0x17a0>
 8009b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b30:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009b34:	3340      	adds	r3, #64	; 0x40
 8009b36:	3240      	adds	r2, #64	; 0x40
 8009b38:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8009b3c:	3340      	adds	r3, #64	; 0x40
 8009b3e:	ed12 6a0f 	vldr	s12, [r2, #-60]	; 0xffffffc4
 8009b42:	3240      	adds	r2, #64	; 0x40
 8009b44:	ed13 4a20 	vldr	s8, [r3, #-128]	; 0xffffff80
 8009b48:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009b4c:	ed52 4a20 	vldr	s9, [r2, #-128]	; 0xffffff80
 8009b50:	ed13 5a1e 	vldr	s10, [r3, #-120]	; 0xffffff88
 8009b54:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8009b58:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009b5c:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8009b60:	ed53 ea1d 	vldr	s29, [r3, #-116]	; 0xffffff8c
 8009b64:	ed13 ea1c 	vldr	s28, [r3, #-112]	; 0xffffff90
 8009b68:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 8009b6c:	ed13 da1b 	vldr	s26, [r3, #-108]	; 0xffffff94
 8009b70:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 8009b74:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009b78:	ed13 ca1a 	vldr	s24, [r3, #-104]	; 0xffffff98
 8009b7c:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8009b80:	ed13 ba19 	vldr	s22, [r3, #-100]	; 0xffffff9c
 8009b84:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8009b88:	ed13 aa18 	vldr	s20, [r3, #-96]	; 0xffffffa0
 8009b8c:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 8009b90:	eeee 7a86 	vfma.f32	s15, s29, s12
 8009b94:	ed13 9a17 	vldr	s18, [r3, #-92]	; 0xffffffa4
 8009b98:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 8009b9c:	ed53 0a16 	vldr	s1, [r3, #-88]	; 0xffffffa8
 8009ba0:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8009ba4:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 8009ba8:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 8009bac:	eeee 7a2d 	vfma.f32	s15, s28, s27
 8009bb0:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8009bb4:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8009bb8:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8009bbc:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8009bc0:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8009bc4:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8009bc8:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8009bcc:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8009bd0:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8009bd4:	4283      	cmp	r3, r0
 8009bd6:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8009bda:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8009bde:	eeea 7a29 	vfma.f32	s15, s20, s19
 8009be2:	eee9 7a00 	vfma.f32	s15, s18, s0
 8009be6:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009bea:	eee1 7a82 	vfma.f32	s15, s3, s4
 8009bee:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009bf2:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009bf6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009bfa:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009bfe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009c02:	d199      	bne.n	8009b38 <forward_lstm+0xed8>
 8009c04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c08:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009c0c:	189a      	adds	r2, r3, r2
 8009c0e:	2e00      	cmp	r6, #0
 8009c10:	d078      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009c12:	4633      	mov	r3, r6
 8009c14:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8009c18:	ed91 6a00 	vldr	s12, [r1]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	edd2 7a00 	vldr	s15, [r2]
 8009c22:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009c26:	d06d      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009c28:	ed91 6a01 	vldr	s12, [r1, #4]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	edd2 7a01 	vldr	s15, [r2, #4]
 8009c32:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009c36:	d065      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009c38:	ed91 6a02 	vldr	s12, [r1, #8]
 8009c3c:	2b03      	cmp	r3, #3
 8009c3e:	edd2 7a02 	vldr	s15, [r2, #8]
 8009c42:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009c46:	d05d      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009c48:	ed91 6a03 	vldr	s12, [r1, #12]
 8009c4c:	2b04      	cmp	r3, #4
 8009c4e:	edd2 7a03 	vldr	s15, [r2, #12]
 8009c52:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009c56:	d055      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009c58:	ed91 6a04 	vldr	s12, [r1, #16]
 8009c5c:	2b05      	cmp	r3, #5
 8009c5e:	edd2 7a04 	vldr	s15, [r2, #16]
 8009c62:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009c66:	d04d      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009c68:	ed91 6a05 	vldr	s12, [r1, #20]
 8009c6c:	2b06      	cmp	r3, #6
 8009c6e:	edd2 7a05 	vldr	s15, [r2, #20]
 8009c72:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009c76:	d045      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009c78:	ed91 6a06 	vldr	s12, [r1, #24]
 8009c7c:	2b07      	cmp	r3, #7
 8009c7e:	edd2 7a06 	vldr	s15, [r2, #24]
 8009c82:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009c86:	d03d      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009c88:	ed91 6a07 	vldr	s12, [r1, #28]
 8009c8c:	2b08      	cmp	r3, #8
 8009c8e:	edd2 7a07 	vldr	s15, [r2, #28]
 8009c92:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009c96:	d035      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009c98:	ed91 6a08 	vldr	s12, [r1, #32]
 8009c9c:	2b09      	cmp	r3, #9
 8009c9e:	edd2 7a08 	vldr	s15, [r2, #32]
 8009ca2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009ca6:	d02d      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009ca8:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8009cac:	2b0a      	cmp	r3, #10
 8009cae:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8009cb2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009cb6:	d025      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009cb8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8009cbc:	2b0b      	cmp	r3, #11
 8009cbe:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8009cc2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009cc6:	d01d      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009cc8:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8009ccc:	2b0c      	cmp	r3, #12
 8009cce:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8009cd2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009cd6:	d015      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009cd8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8009cdc:	3b0d      	subs	r3, #13
 8009cde:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8009ce2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009ce6:	d00d      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009ce8:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8009cf2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009cf6:	d005      	beq.n	8009d04 <forward_lstm+0x10a4>
 8009cf8:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8009cfc:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8009d00:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009d04:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009d08:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009d0c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8009d10:	f108 0804 	add.w	r8, r8, #4
 8009d14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d18:	f10e 0e04 	add.w	lr, lr, #4
 8009d1c:	4411      	add	r1, r2
 8009d1e:	ed8a 7a00 	vstr	s14, [sl]
 8009d22:	4499      	add	r9, r3
 8009d24:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8009d28:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8009d2c:	4419      	add	r1, r3
 8009d2e:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8009d32:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8009d36:	ed91 6a00 	vldr	s12, [r1]
 8009d3a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8009d3e:	edd1 7a00 	vldr	s15, [r1]
 8009d42:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8009d46:	ecf1 6a01 	vldmia	r1!, {s13}
 8009d4a:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 8009d4e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009d52:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8009d56:	4411      	add	r1, r2
 8009d58:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8009d5c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8009d60:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009d64:	4419      	add	r1, r3
 8009d66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009d6a:	fe87 7a48 	vminnm.f32	s14, s14, s16
 8009d6e:	ecaa 7a01 	vstmia	sl!, {s14}
 8009d72:	4413      	add	r3, r2
 8009d74:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8009d78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d80:	459c      	cmp	ip, r3
 8009d82:	f47f a9bf 	bne.w	8009104 <forward_lstm+0x4a4>
 8009d86:	f8d7 80ac 	ldr.w	r8, [r7, #172]	; 0xac
 8009d8a:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8009d8e:	46a3      	mov	fp, r4
 8009d90:	ee1f 3a90 	vmov	r3, s31
 8009d94:	4642      	mov	r2, r8
 8009d96:	4608      	mov	r0, r1
 8009d98:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8009d9c:	f8d7 9078 	ldr.w	r9, [r7, #120]	; 0x78
 8009da0:	47a0      	blx	r4
 8009da2:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8009da6:	4642      	mov	r2, r8
 8009da8:	ee1f 3a90 	vmov	r3, s31
 8009dac:	4608      	mov	r0, r1
 8009dae:	47a0      	blx	r4
 8009db0:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8009db4:	4642      	mov	r2, r8
 8009db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009db8:	4608      	mov	r0, r1
 8009dba:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009dbc:	47a0      	blx	r4
 8009dbe:	1e6a      	subs	r2, r5, #1
 8009dc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009dc2:	465c      	mov	r4, fp
 8009dc4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009dc8:	1eaa      	subs	r2, r5, #2
 8009dca:	f8c7 60f8 	str.w	r6, [r7, #248]	; 0xf8
 8009dce:	461e      	mov	r6, r3
 8009dd0:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8009dd4:	1eea      	subs	r2, r5, #3
 8009dd6:	f8d7 a01c 	ldr.w	sl, [r7, #28]
 8009dda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009dde:	1f2a      	subs	r2, r5, #4
 8009de0:	f8d7 e0a8 	ldr.w	lr, [r7, #168]	; 0xa8
 8009de4:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8009de8:	1f6a      	subs	r2, r5, #5
 8009dea:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
 8009dee:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8009df2:	1faa      	subs	r2, r5, #6
 8009df4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009df6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009dfa:	1fea      	subs	r2, r5, #7
 8009dfc:	e9d7 8121 	ldrd	r8, r1, [r7, #132]	; 0x84
 8009e00:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8009e04:	f1a5 0208 	sub.w	r2, r5, #8
 8009e08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e10:	ecf8 7a01 	vldmia	r8!, {s15}
 8009e14:	ecb3 6a01 	vldmia	r3!, {s12}
 8009e18:	ed99 7a00 	vldr	s14, [r9]
 8009e1c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009e20:	ecfe 6a01 	vldmia	lr!, {s13}
 8009e24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e2c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009e30:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 800a148 <forward_lstm+0x14e8>
 8009e34:	ece9 7a01 	vstmia	r9!, {s15}
 8009e38:	ece1 8a01 	vstmia	r1!, {s17}
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 82ea 	beq.w	800a416 <forward_lstm+0x17b6>
 8009e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e46:	f8d7 b0e0 	ldr.w	fp, [r7, #224]	; 0xe0
 8009e4a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009e4e:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8009e52:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8009e56:	f1ab 0b10 	sub.w	fp, fp, #16
 8009e5a:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8009e5e:	3340      	adds	r3, #64	; 0x40
 8009e60:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8009e64:	f1bb 0f0f 	cmp.w	fp, #15
 8009e68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009e6c:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8009e70:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8009e74:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8009e78:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 8009e7c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009e80:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 8009e84:	ed12 ea1d 	vldr	s28, [r2, #-116]	; 0xffffff8c
 8009e88:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 8009e8c:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 8009e90:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 8009e94:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 8009e98:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009e9c:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8009ea0:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8009ea4:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8009ea8:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 8009eac:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 8009eb0:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 8009eb4:	eeee 7a26 	vfma.f32	s15, s28, s13
 8009eb8:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 8009ebc:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 8009ec0:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8009ec4:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 8009ec8:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 8009ecc:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 8009ed0:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8009ed4:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8009ed8:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8009edc:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8009ee0:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8009ee4:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8009ee8:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8009eec:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8009ef0:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8009ef4:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8009ef8:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009efc:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009f00:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009f04:	eee0 7a20 	vfma.f32	s15, s0, s1
 8009f08:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009f0c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009f10:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009f14:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009f18:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009f1c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009f20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f24:	d895      	bhi.n	8009e52 <forward_lstm+0x11f2>
 8009f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f2a:	18c3      	adds	r3, r0, r3
 8009f2c:	2d00      	cmp	r5, #0
 8009f2e:	f000 8085 	beq.w	800a03c <forward_lstm+0x13dc>
 8009f32:	edd4 6a00 	vldr	s13, [r4]
 8009f36:	edd3 7a00 	vldr	s15, [r3]
 8009f3a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8009f3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	d07a      	beq.n	800a03c <forward_lstm+0x13dc>
 8009f46:	edd4 6a01 	vldr	s13, [r4, #4]
 8009f4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8009f4e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8009f52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f56:	2a00      	cmp	r2, #0
 8009f58:	d070      	beq.n	800a03c <forward_lstm+0x13dc>
 8009f5a:	edd4 6a02 	vldr	s13, [r4, #8]
 8009f5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009f62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009f66:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	d066      	beq.n	800a03c <forward_lstm+0x13dc>
 8009f6e:	edd4 6a03 	vldr	s13, [r4, #12]
 8009f72:	edd3 7a03 	vldr	s15, [r3, #12]
 8009f76:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009f7a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f7e:	2a00      	cmp	r2, #0
 8009f80:	d05c      	beq.n	800a03c <forward_lstm+0x13dc>
 8009f82:	edd4 6a04 	vldr	s13, [r4, #16]
 8009f86:	edd3 7a04 	vldr	s15, [r3, #16]
 8009f8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009f8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f92:	2a00      	cmp	r2, #0
 8009f94:	d052      	beq.n	800a03c <forward_lstm+0x13dc>
 8009f96:	edd4 6a05 	vldr	s13, [r4, #20]
 8009f9a:	edd3 7a05 	vldr	s15, [r3, #20]
 8009f9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009fa2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009fa6:	2a00      	cmp	r2, #0
 8009fa8:	d048      	beq.n	800a03c <forward_lstm+0x13dc>
 8009faa:	edd4 6a06 	vldr	s13, [r4, #24]
 8009fae:	edd3 7a06 	vldr	s15, [r3, #24]
 8009fb2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009fb6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009fba:	b3fa      	cbz	r2, 800a03c <forward_lstm+0x13dc>
 8009fbc:	edd4 6a07 	vldr	s13, [r4, #28]
 8009fc0:	edd3 7a07 	vldr	s15, [r3, #28]
 8009fc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009fc8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009fcc:	b3b2      	cbz	r2, 800a03c <forward_lstm+0x13dc>
 8009fce:	edd4 6a08 	vldr	s13, [r4, #32]
 8009fd2:	2d09      	cmp	r5, #9
 8009fd4:	edd3 7a08 	vldr	s15, [r3, #32]
 8009fd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009fdc:	d02e      	beq.n	800a03c <forward_lstm+0x13dc>
 8009fde:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8009fe2:	2d0a      	cmp	r5, #10
 8009fe4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009fe8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009fec:	d026      	beq.n	800a03c <forward_lstm+0x13dc>
 8009fee:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8009ff2:	2d0b      	cmp	r5, #11
 8009ff4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009ff8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009ffc:	d01e      	beq.n	800a03c <forward_lstm+0x13dc>
 8009ffe:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800a002:	2d0c      	cmp	r5, #12
 800a004:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a008:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a00c:	d016      	beq.n	800a03c <forward_lstm+0x13dc>
 800a00e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800a012:	f1b5 020d 	subs.w	r2, r5, #13
 800a016:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a01a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a01e:	d00d      	beq.n	800a03c <forward_lstm+0x13dc>
 800a020:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 800a024:	2a01      	cmp	r2, #1
 800a026:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800a02a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a02e:	d005      	beq.n	800a03c <forward_lstm+0x13dc>
 800a030:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800a034:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800a038:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a03c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a040:	eddf 6a41 	vldr	s13, [pc, #260]	; 800a148 <forward_lstm+0x14e8>
 800a044:	ed01 7a01 	vstr	s14, [r1, #-4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f000 81b8 	beq.w	800a3be <forward_lstm+0x175e>
 800a04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a052:	f8d7 b0ac 	ldr.w	fp, [r7, #172]	; 0xac
 800a056:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800a05a:	f10c 0340 	add.w	r3, ip, #64	; 0x40
 800a05e:	ed13 6a0f 	vldr	s12, [r3, #-60]	; 0xffffffc4
 800a062:	f1ab 0b10 	sub.w	fp, fp, #16
 800a066:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800a06a:	3340      	adds	r3, #64	; 0x40
 800a06c:	ed12 4a10 	vldr	s8, [r2, #-64]	; 0xffffffc0
 800a070:	f1bb 0f0f 	cmp.w	fp, #15
 800a074:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a078:	ed53 4a20 	vldr	s9, [r3, #-128]	; 0xffffff80
 800a07c:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 800a080:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800a084:	ed53 5a1e 	vldr	s11, [r3, #-120]	; 0xffffff88
 800a088:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a08c:	ed13 6a1d 	vldr	s12, [r3, #-116]	; 0xffffff8c
 800a090:	ed52 ea1d 	vldr	s29, [r2, #-116]	; 0xffffff8c
 800a094:	ed12 ea1c 	vldr	s28, [r2, #-112]	; 0xffffff90
 800a098:	ed53 da1c 	vldr	s27, [r3, #-112]	; 0xffffff90
 800a09c:	ed12 da1b 	vldr	s26, [r2, #-108]	; 0xffffff94
 800a0a0:	ed53 ca1b 	vldr	s25, [r3, #-108]	; 0xffffff94
 800a0a4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a0a8:	ed12 ca1a 	vldr	s24, [r2, #-104]	; 0xffffff98
 800a0ac:	ed53 ba1a 	vldr	s23, [r3, #-104]	; 0xffffff98
 800a0b0:	ed12 ba19 	vldr	s22, [r2, #-100]	; 0xffffff9c
 800a0b4:	ed53 aa19 	vldr	s21, [r3, #-100]	; 0xffffff9c
 800a0b8:	ed12 aa18 	vldr	s20, [r2, #-96]	; 0xffffffa0
 800a0bc:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 800a0c0:	eeee 7a86 	vfma.f32	s15, s29, s12
 800a0c4:	ed12 9a17 	vldr	s18, [r2, #-92]	; 0xffffffa4
 800a0c8:	ed13 0a17 	vldr	s0, [r3, #-92]	; 0xffffffa4
 800a0cc:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800a0d0:	ed13 1a16 	vldr	s2, [r3, #-88]	; 0xffffffa8
 800a0d4:	ed52 1a15 	vldr	s3, [r2, #-84]	; 0xffffffac
 800a0d8:	ed13 2a15 	vldr	s4, [r3, #-84]	; 0xffffffac
 800a0dc:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800a0e0:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 800a0e4:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 800a0e8:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800a0ec:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800a0f0:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800a0f4:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800a0f8:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800a0fc:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 800a100:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 800a104:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800a108:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 800a10c:	eeea 7a29 	vfma.f32	s15, s20, s19
 800a110:	eee9 7a00 	vfma.f32	s15, s18, s0
 800a114:	eee0 7a81 	vfma.f32	s15, s1, s2
 800a118:	eee1 7a82 	vfma.f32	s15, s3, s4
 800a11c:	eee2 7a83 	vfma.f32	s15, s5, s6
 800a120:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a124:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a128:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a12c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a130:	d895      	bhi.n	800a05e <forward_lstm+0x13fe>
 800a132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a136:	eb0c 0203 	add.w	r2, ip, r3
 800a13a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d07a      	beq.n	800a238 <forward_lstm+0x15d8>
 800a142:	f8d7 b0d4 	ldr.w	fp, [r7, #212]	; 0xd4
 800a146:	e001      	b.n	800a14c <forward_lstm+0x14ec>
 800a148:	00000000 	.word	0x00000000
 800a14c:	ed9b 6a00 	vldr	s12, [fp]
 800a150:	2b01      	cmp	r3, #1
 800a152:	edd2 7a00 	vldr	s15, [r2]
 800a156:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a15a:	d06d      	beq.n	800a238 <forward_lstm+0x15d8>
 800a15c:	ed9b 6a01 	vldr	s12, [fp, #4]
 800a160:	2b02      	cmp	r3, #2
 800a162:	edd2 7a01 	vldr	s15, [r2, #4]
 800a166:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a16a:	d065      	beq.n	800a238 <forward_lstm+0x15d8>
 800a16c:	ed9b 6a02 	vldr	s12, [fp, #8]
 800a170:	2b03      	cmp	r3, #3
 800a172:	edd2 7a02 	vldr	s15, [r2, #8]
 800a176:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a17a:	d05d      	beq.n	800a238 <forward_lstm+0x15d8>
 800a17c:	ed9b 6a03 	vldr	s12, [fp, #12]
 800a180:	2b04      	cmp	r3, #4
 800a182:	edd2 7a03 	vldr	s15, [r2, #12]
 800a186:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a18a:	d055      	beq.n	800a238 <forward_lstm+0x15d8>
 800a18c:	ed9b 6a04 	vldr	s12, [fp, #16]
 800a190:	2b05      	cmp	r3, #5
 800a192:	edd2 7a04 	vldr	s15, [r2, #16]
 800a196:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a19a:	d04d      	beq.n	800a238 <forward_lstm+0x15d8>
 800a19c:	ed9b 6a05 	vldr	s12, [fp, #20]
 800a1a0:	2b06      	cmp	r3, #6
 800a1a2:	edd2 7a05 	vldr	s15, [r2, #20]
 800a1a6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a1aa:	d045      	beq.n	800a238 <forward_lstm+0x15d8>
 800a1ac:	ed9b 6a06 	vldr	s12, [fp, #24]
 800a1b0:	2b07      	cmp	r3, #7
 800a1b2:	edd2 7a06 	vldr	s15, [r2, #24]
 800a1b6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a1ba:	d03d      	beq.n	800a238 <forward_lstm+0x15d8>
 800a1bc:	ed9b 6a07 	vldr	s12, [fp, #28]
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	edd2 7a07 	vldr	s15, [r2, #28]
 800a1c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a1ca:	d035      	beq.n	800a238 <forward_lstm+0x15d8>
 800a1cc:	ed9b 6a08 	vldr	s12, [fp, #32]
 800a1d0:	2b09      	cmp	r3, #9
 800a1d2:	edd2 7a08 	vldr	s15, [r2, #32]
 800a1d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a1da:	d02d      	beq.n	800a238 <forward_lstm+0x15d8>
 800a1dc:	ed9b 6a09 	vldr	s12, [fp, #36]	; 0x24
 800a1e0:	2b0a      	cmp	r3, #10
 800a1e2:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800a1e6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a1ea:	d025      	beq.n	800a238 <forward_lstm+0x15d8>
 800a1ec:	ed9b 6a0a 	vldr	s12, [fp, #40]	; 0x28
 800a1f0:	2b0b      	cmp	r3, #11
 800a1f2:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800a1f6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a1fa:	d01d      	beq.n	800a238 <forward_lstm+0x15d8>
 800a1fc:	ed9b 6a0b 	vldr	s12, [fp, #44]	; 0x2c
 800a200:	2b0c      	cmp	r3, #12
 800a202:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800a206:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a20a:	d015      	beq.n	800a238 <forward_lstm+0x15d8>
 800a20c:	ed9b 6a0c 	vldr	s12, [fp, #48]	; 0x30
 800a210:	3b0d      	subs	r3, #13
 800a212:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800a216:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a21a:	d00d      	beq.n	800a238 <forward_lstm+0x15d8>
 800a21c:	ed9b 6a0d 	vldr	s12, [fp, #52]	; 0x34
 800a220:	2b01      	cmp	r3, #1
 800a222:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800a226:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a22a:	d005      	beq.n	800a238 <forward_lstm+0x15d8>
 800a22c:	ed9b 6a0e 	vldr	s12, [fp, #56]	; 0x38
 800a230:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a234:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a238:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a23c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a240:	4418      	add	r0, r3
 800a242:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a246:	ed01 7a01 	vstr	s14, [r1, #-4]
 800a24a:	ecb6 6a01 	vldmia	r6!, {s12}
 800a24e:	449c      	add	ip, r3
 800a250:	ecfa 6a01 	vldmia	sl!, {s13}
 800a254:	ed59 7a01 	vldr	s15, [r9, #-4]
 800a258:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a25c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a260:	459e      	cmp	lr, r3
 800a262:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a266:	ed01 7a01 	vstr	s14, [r1, #-4]
 800a26a:	f47f adcf 	bne.w	8009e0c <forward_lstm+0x11ac>
 800a26e:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 800a272:	f507 71de 	add.w	r1, r7, #444	; 0x1bc
 800a276:	ee1f 3a90 	vmov	r3, s31
 800a27a:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800a27e:	4608      	mov	r0, r1
 800a280:	462a      	mov	r2, r5
 800a282:	f8d7 60f8 	ldr.w	r6, [r7, #248]	; 0xf8
 800a286:	47a0      	blx	r4
 800a288:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a28a:	462a      	mov	r2, r5
 800a28c:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 800a290:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
 800a294:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800a296:	47a0      	blx	r4
 800a298:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a29c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2a0:	6979      	ldr	r1, [r7, #20]
 800a2a2:	ecf3 7a01 	vldmia	r3!, {s15}
 800a2a6:	ed92 7a00 	vldr	s14, [r2]
 800a2aa:	428b      	cmp	r3, r1
 800a2ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2b0:	ece2 7a01 	vstmia	r2!, {s15}
 800a2b4:	d1f5      	bne.n	800a2a2 <forward_lstm+0x1642>
 800a2b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a2ba:	899b      	ldrh	r3, [r3, #12]
 800a2bc:	b163      	cbz	r3, 800a2d8 <forward_lstm+0x1678>
 800a2be:	2400      	movs	r4, #0
 800a2c0:	e9d7 9503 	ldrd	r9, r5, [r7, #12]
 800a2c4:	46a8      	mov	r8, r5
 800a2c6:	f859 5f04 	ldr.w	r5, [r9, #4]!
 800a2ca:	3401      	adds	r4, #1
 800a2cc:	2d00      	cmp	r5, #0
 800a2ce:	d163      	bne.n	800a398 <forward_lstm+0x1738>
 800a2d0:	42a3      	cmp	r3, r4
 800a2d2:	f108 0804 	add.w	r8, r8, #4
 800a2d6:	dcf6      	bgt.n	800a2c6 <forward_lstm+0x1666>
 800a2d8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a2dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a2de:	440a      	add	r2, r1
 800a2e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a2e2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a2e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a2ea:	4291      	cmp	r1, r2
 800a2ec:	f340 80bc 	ble.w	800a468 <forward_lstm+0x1808>
 800a2f0:	2a00      	cmp	r2, #0
 800a2f2:	f2c0 80b9 	blt.w	800a468 <forward_lstm+0x1808>
 800a2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a2fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a302:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800a306:	f7fe be65 	b.w	8008fd4 <forward_lstm+0x374>
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	4628      	mov	r0, r5
 800a30e:	69d9      	ldr	r1, [r3, #28]
 800a310:	f000 fae8 	bl	800a8e4 <memcpy>
 800a314:	ee1f 2a10 	vmov	r2, s30
 800a318:	2100      	movs	r1, #0
 800a31a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800a31e:	f000 faef 	bl	800a900 <memset>
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a326:	643b      	str	r3, [r7, #64]	; 0x40
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f47e ada0 	bne.w	8008e6e <forward_lstm+0x20e>
 800a32e:	4b7a      	ldr	r3, [pc, #488]	; (800a518 <forward_lstm+0x18b8>)
 800a330:	643b      	str	r3, [r7, #64]	; 0x40
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f47e ad9e 	bne.w	8008e7c <forward_lstm+0x21c>
 800a340:	4b75      	ldr	r3, [pc, #468]	; (800a518 <forward_lstm+0x18b8>)
 800a342:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f47e ad9b 	bne.w	8008e88 <forward_lstm+0x228>
 800a352:	4b71      	ldr	r3, [pc, #452]	; (800a518 <forward_lstm+0x18b8>)
 800a354:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	ed93 8a10 	vldr	s16, [r3, #64]	; 0x40
 800a35c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a360:	2b00      	cmp	r3, #0
 800a362:	f47e ad99 	bne.w	8008e98 <forward_lstm+0x238>
 800a366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a36a:	2301      	movs	r3, #1
 800a36c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a36e:	f7fe bd9a 	b.w	8008ea6 <forward_lstm+0x246>
 800a372:	4619      	mov	r1, r3
 800a374:	ee1f 2a10 	vmov	r2, s30
 800a378:	4628      	mov	r0, r5
 800a37a:	f000 fac1 	bl	800a900 <memset>
 800a37e:	4649      	mov	r1, r9
 800a380:	ee1f 2a10 	vmov	r2, s30
 800a384:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800a388:	f1b9 0f00 	cmp.w	r9, #0
 800a38c:	f47e ad60 	bne.w	8008e50 <forward_lstm+0x1f0>
 800a390:	f000 fab6 	bl	800a900 <memset>
 800a394:	f7fe bd5e 	b.w	8008e54 <forward_lstm+0x1f4>
 800a398:	f8d8 3000 	ldr.w	r3, [r8]
 800a39c:	ee1f 2a10 	vmov	r2, s30
 800a3a0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 fa9d 	bl	800a8e4 <memcpy>
 800a3aa:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 800a3ae:	f848 3b04 	str.w	r3, [r8], #4
 800a3b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a3b6:	899b      	ldrh	r3, [r3, #12]
 800a3b8:	42a3      	cmp	r3, r4
 800a3ba:	dc84      	bgt.n	800a2c6 <forward_lstm+0x1666>
 800a3bc:	e78c      	b.n	800a2d8 <forward_lstm+0x1678>
 800a3be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3c2:	4662      	mov	r2, ip
 800a3c4:	f8d7 b104 	ldr.w	fp, [r7, #260]	; 0x104
 800a3c8:	e6c0      	b.n	800a14c <forward_lstm+0x14ec>
 800a3ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3ce:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800a3d2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800a3d6:	f7ff ba18 	b.w	800980a <forward_lstm+0xbaa>
 800a3da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3de:	f7ff b91c 	b.w	800961a <forward_lstm+0x9ba>
 800a3e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3e6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800a3ea:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800a3ee:	f7ff b805 	b.w	80093fc <forward_lstm+0x79c>
 800a3f2:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 800a3f6:	464b      	mov	r3, r9
 800a3f8:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800a3fc:	f7fe bf06 	b.w	800920c <forward_lstm+0x5ac>
 800a400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a404:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800a408:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a40c:	e404      	b.n	8009c18 <forward_lstm+0xfb8>
 800a40e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a412:	f7ff bb09 	b.w	8009a28 <forward_lstm+0xdc8>
 800a416:	4603      	mov	r3, r0
 800a418:	e588      	b.n	8009f2c <forward_lstm+0x12cc>
 800a41a:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 800a41e:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800a422:	ee1f 3a90 	vmov	r3, s31
 800a426:	4690      	mov	r8, r2
 800a428:	4608      	mov	r0, r1
 800a42a:	47a0      	blx	r4
 800a42c:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 800a430:	ee1f 3a90 	vmov	r3, s31
 800a434:	4642      	mov	r2, r8
 800a436:	4608      	mov	r0, r1
 800a438:	47a0      	blx	r4
 800a43a:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800a43e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a440:	4642      	mov	r2, r8
 800a442:	4608      	mov	r0, r1
 800a444:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 800a446:	47a8      	blx	r5
 800a448:	f507 71de 	add.w	r1, r7, #444	; 0x1bc
 800a44c:	ee1f 3a90 	vmov	r3, s31
 800a450:	4642      	mov	r2, r8
 800a452:	4608      	mov	r0, r1
 800a454:	47a0      	blx	r4
 800a456:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a458:	4642      	mov	r2, r8
 800a45a:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 800a45e:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
 800a462:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800a464:	47a0      	blx	r4
 800a466:	e726      	b.n	800a2b6 <forward_lstm+0x1656>
 800a468:	b343      	cbz	r3, 800a4bc <forward_lstm+0x185c>
 800a46a:	2600      	movs	r6, #0
 800a46c:	f8d7 8094 	ldr.w	r8, [r7, #148]	; 0x94
 800a470:	ee1f ba10 	vmov	fp, s30
 800a474:	f8d7 9098 	ldr.w	r9, [r7, #152]	; 0x98
 800a478:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800a47c:	e9d7 5403 	ldrd	r5, r4, [r7, #12]
 800a480:	e009      	b.n	800a496 <forward_lstm+0x1836>
 800a482:	4649      	mov	r1, r9
 800a484:	6820      	ldr	r0, [r4, #0]
 800a486:	f000 fa2d 	bl	800a8e4 <memcpy>
 800a48a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a48e:	3601      	adds	r6, #1
 800a490:	3404      	adds	r4, #4
 800a492:	42b3      	cmp	r3, r6
 800a494:	dd12      	ble.n	800a4bc <forward_lstm+0x185c>
 800a496:	f855 2f04 	ldr.w	r2, [r5, #4]!
 800a49a:	2a00      	cmp	r2, #0
 800a49c:	d1f7      	bne.n	800a48e <forward_lstm+0x182e>
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	465a      	mov	r2, fp
 800a4a2:	42b3      	cmp	r3, r6
 800a4a4:	d1ed      	bne.n	800a482 <forward_lstm+0x1822>
 800a4a6:	f89a 303d 	ldrb.w	r3, [sl, #61]	; 0x3d
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d0e9      	beq.n	800a482 <forward_lstm+0x1822>
 800a4ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a4b0:	6820      	ldr	r0, [r4, #0]
 800a4b2:	f000 fa17 	bl	800a8e4 <memcpy>
 800a4b6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a4ba:	e7e8      	b.n	800a48e <forward_lstm+0x182e>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	b18b      	cbz	r3, 800a4e4 <forward_lstm+0x1884>
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	69db      	ldr	r3, [r3, #28]
 800a4c4:	b173      	cbz	r3, 800a4e4 <forward_lstm+0x1884>
 800a4c6:	ee1f 4a10 	vmov	r4, s30
 800a4ca:	ee1f 2a10 	vmov	r2, s30
 800a4ce:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 fa07 	bl	800a8e4 <memcpy>
 800a4d6:	ee1f 2a10 	vmov	r2, s30
 800a4da:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800a4de:	4420      	add	r0, r4
 800a4e0:	f000 fa00 	bl	800a8e4 <memcpy>
 800a4e4:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	ecbd 8b10 	vpop	{d8-d15}
 800a4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f2:	ee0f 1a90 	vmov	s31, r1
 800a4f6:	4689      	mov	r9, r1
 800a4f8:	6579      	str	r1, [r7, #84]	; 0x54
 800a4fa:	6739      	str	r1, [r7, #112]	; 0x70
 800a4fc:	f7fe bc2f 	b.w	8008d5e <forward_lstm+0xfe>
 800a500:	468b      	mov	fp, r1
 800a502:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800a506:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800a50a:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800a50e:	f7fe bbd2 	b.w	8008cb6 <forward_lstm+0x56>
 800a512:	2300      	movs	r3, #0
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	deff      	udf	#255	; 0xff
 800a518:	08008c4d 	.word	0x08008c4d

0800a51c <nl_func_sigmoid_array_f32>:
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51e:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800a522:	ed2d 8b02 	vpush	{d8}
 800a526:	698f      	ldr	r7, [r1, #24]
 800a528:	4414      	add	r4, r2
 800a52a:	6981      	ldr	r1, [r0, #24]
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	00a3      	lsls	r3, r4, #2
 800a530:	688e      	ldr	r6, [r1, #8]
 800a532:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a536:	42a2      	cmp	r2, r4
 800a538:	d815      	bhi.n	800a566 <nl_func_sigmoid_array_f32+0x4a>
 800a53a:	3304      	adds	r3, #4
 800a53c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800a540:	3404      	adds	r4, #4
 800a542:	441e      	add	r6, r3
 800a544:	4625      	mov	r5, r4
 800a546:	ed34 0a01 	vldmdb	r4!, {s0}
 800a54a:	eeb1 0a40 	vneg.f32	s0, s0
 800a54e:	3d08      	subs	r5, #8
 800a550:	f004 fe20 	bl	800f194 <expf>
 800a554:	ee30 0a08 	vadd.f32	s0, s0, s16
 800a558:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800a55c:	ed66 7a01 	vstmdb	r6!, {s15}
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	42ab      	cmp	r3, r5
 800a564:	d9ee      	bls.n	800a544 <nl_func_sigmoid_array_f32+0x28>
 800a566:	ecbd 8b02 	vpop	{d8}
 800a56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a56c <nl_func_relu_array_f32>:
 800a56c:	b410      	push	{r4}
 800a56e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a572:	698c      	ldr	r4, [r1, #24]
 800a574:	6981      	ldr	r1, [r0, #24]
 800a576:	4413      	add	r3, r2
 800a578:	68a0      	ldr	r0, [r4, #8]
 800a57a:	6889      	ldr	r1, [r1, #8]
 800a57c:	009a      	lsls	r2, r3, #2
 800a57e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a582:	4298      	cmp	r0, r3
 800a584:	d80f      	bhi.n	800a5a6 <nl_func_relu_array_f32+0x3a>
 800a586:	3204      	adds	r2, #4
 800a588:	3304      	adds	r3, #4
 800a58a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800a5ac <nl_func_relu_array_f32+0x40>
 800a58e:	4411      	add	r1, r2
 800a590:	461a      	mov	r2, r3
 800a592:	ed73 7a01 	vldmdb	r3!, {s15}
 800a596:	3a08      	subs	r2, #8
 800a598:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800a59c:	ed61 7a01 	vstmdb	r1!, {s15}
 800a5a0:	68a0      	ldr	r0, [r4, #8]
 800a5a2:	4290      	cmp	r0, r2
 800a5a4:	d9f4      	bls.n	800a590 <nl_func_relu_array_f32+0x24>
 800a5a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	00000000 	.word	0x00000000

0800a5b0 <ai_check_custom_types>:
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	4b12      	ldr	r3, [pc, #72]	; (800a5fc <ai_check_custom_types+0x4c>)
 800a5b4:	9301      	str	r3, [sp, #4]
 800a5b6:	b118      	cbz	r0, 800a5c0 <ai_check_custom_types+0x10>
 800a5b8:	7803      	ldrb	r3, [r0, #0]
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	d002      	beq.n	800a5c4 <ai_check_custom_types+0x14>
 800a5be:	2000      	movs	r0, #0
 800a5c0:	b002      	add	sp, #8
 800a5c2:	4770      	bx	lr
 800a5c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d004      	beq.n	800a5d6 <ai_check_custom_types+0x26>
 800a5cc:	2001      	movs	r0, #1
 800a5ce:	f080 0001 	eor.w	r0, r0, #1
 800a5d2:	b002      	add	sp, #8
 800a5d4:	4770      	bx	lr
 800a5d6:	7842      	ldrb	r2, [r0, #1]
 800a5d8:	3001      	adds	r0, #1
 800a5da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d1f4      	bne.n	800a5cc <ai_check_custom_types+0x1c>
 800a5e2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800a5e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d1ee      	bne.n	800a5cc <ai_check_custom_types+0x1c>
 800a5ee:	7842      	ldrb	r2, [r0, #1]
 800a5f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d1e9      	bne.n	800a5cc <ai_check_custom_types+0x1c>
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	e7e8      	b.n	800a5ce <ai_check_custom_types+0x1e>
 800a5fc:	84048403 	.word	0x84048403

0800a600 <ai_layers_init_all>:
 800a600:	2100      	movs	r1, #0
 800a602:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a604:	b13b      	cbz	r3, 800a616 <ai_layers_init_all+0x16>
 800a606:	691a      	ldr	r2, [r3, #16]
 800a608:	3101      	adds	r1, #1
 800a60a:	60d8      	str	r0, [r3, #12]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	4613      	mov	r3, r2
 800a610:	d001      	beq.n	800a616 <ai_layers_init_all+0x16>
 800a612:	2a00      	cmp	r2, #0
 800a614:	d1f6      	bne.n	800a604 <ai_layers_init_all+0x4>
 800a616:	4608      	mov	r0, r1
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop

0800a61c <ai_layers_post_init_all>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	2500      	movs	r5, #0
 800a620:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a622:	b16c      	cbz	r4, 800a640 <ai_layers_post_init_all+0x24>
 800a624:	6863      	ldr	r3, [r4, #4]
 800a626:	07db      	lsls	r3, r3, #31
 800a628:	d504      	bpl.n	800a634 <ai_layers_post_init_all+0x18>
 800a62a:	6a23      	ldr	r3, [r4, #32]
 800a62c:	4620      	mov	r0, r4
 800a62e:	b10b      	cbz	r3, 800a634 <ai_layers_post_init_all+0x18>
 800a630:	3501      	adds	r5, #1
 800a632:	4798      	blx	r3
 800a634:	6923      	ldr	r3, [r4, #16]
 800a636:	42a3      	cmp	r3, r4
 800a638:	461c      	mov	r4, r3
 800a63a:	d001      	beq.n	800a640 <ai_layers_post_init_all+0x24>
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1f0      	bne.n	800a622 <ai_layers_post_init_all+0x6>
 800a640:	4628      	mov	r0, r5
 800a642:	bd38      	pop	{r3, r4, r5, pc}

0800a644 <ai_layers_forward_all>:
 800a644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a648:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800a64a:	4604      	mov	r4, r0
 800a64c:	2f00      	cmp	r7, #0
 800a64e:	d02c      	beq.n	800a6aa <ai_layers_forward_all+0x66>
 800a650:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a652:	b1e1      	cbz	r1, 800a68e <ai_layers_forward_all+0x4a>
 800a654:	2600      	movs	r6, #0
 800a656:	6381      	str	r1, [r0, #56]	; 0x38
 800a658:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a65a:	2001      	movs	r0, #1
 800a65c:	47b8      	blx	r7
 800a65e:	46b0      	mov	r8, r6
 800a660:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a662:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a664:	2002      	movs	r0, #2
 800a666:	47b8      	blx	r7
 800a668:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a66a:	4628      	mov	r0, r5
 800a66c:	696b      	ldr	r3, [r5, #20]
 800a66e:	4798      	blx	r3
 800a670:	692b      	ldr	r3, [r5, #16]
 800a672:	2003      	movs	r0, #3
 800a674:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a676:	429d      	cmp	r5, r3
 800a678:	4619      	mov	r1, r3
 800a67a:	d00c      	beq.n	800a696 <ai_layers_forward_all+0x52>
 800a67c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a67e:	3601      	adds	r6, #1
 800a680:	47b8      	blx	r7
 800a682:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a684:	2900      	cmp	r1, #0
 800a686:	d1ec      	bne.n	800a662 <ai_layers_forward_all+0x1e>
 800a688:	4630      	mov	r0, r6
 800a68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a68e:	460e      	mov	r6, r1
 800a690:	4630      	mov	r0, r6
 800a692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a696:	2100      	movs	r1, #0
 800a698:	2003      	movs	r0, #3
 800a69a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800a69e:	3601      	adds	r6, #1
 800a6a0:	47b8      	blx	r7
 800a6a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a6a4:	2900      	cmp	r1, #0
 800a6a6:	d1dc      	bne.n	800a662 <ai_layers_forward_all+0x1e>
 800a6a8:	e7ee      	b.n	800a688 <ai_layers_forward_all+0x44>
 800a6aa:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a6ac:	b19d      	cbz	r5, 800a6d6 <ai_layers_forward_all+0x92>
 800a6ae:	463e      	mov	r6, r7
 800a6b0:	6385      	str	r5, [r0, #56]	; 0x38
 800a6b2:	e003      	b.n	800a6bc <ai_layers_forward_all+0x78>
 800a6b4:	3601      	adds	r6, #1
 800a6b6:	63a5      	str	r5, [r4, #56]	; 0x38
 800a6b8:	2d00      	cmp	r5, #0
 800a6ba:	d0e5      	beq.n	800a688 <ai_layers_forward_all+0x44>
 800a6bc:	696b      	ldr	r3, [r5, #20]
 800a6be:	4628      	mov	r0, r5
 800a6c0:	4798      	blx	r3
 800a6c2:	462b      	mov	r3, r5
 800a6c4:	692d      	ldr	r5, [r5, #16]
 800a6c6:	429d      	cmp	r5, r3
 800a6c8:	d1f4      	bne.n	800a6b4 <ai_layers_forward_all+0x70>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	3601      	adds	r6, #1
 800a6ce:	63a3      	str	r3, [r4, #56]	; 0x38
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d6:	462e      	mov	r6, r5
 800a6d8:	e7d6      	b.n	800a688 <ai_layers_forward_all+0x44>
 800a6da:	bf00      	nop

0800a6dc <ai_version_get>:
 800a6dc:	0212      	lsls	r2, r2, #8
 800a6de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a6e2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800a6e6:	4770      	bx	lr

0800a6e8 <ai_platform_version_get>:
 800a6e8:	0e01      	lsrs	r1, r0, #24
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800a6f0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800a6f4:	f361 0307 	bfi	r3, r1, #0, #8
 800a6f8:	b082      	sub	sp, #8
 800a6fa:	f362 230f 	bfi	r3, r2, #8, #8
 800a6fe:	f360 4317 	bfi	r3, r0, #16, #8
 800a702:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800a706:	b002      	add	sp, #8
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop

0800a70c <get_tensor_byte_size>:
 800a70c:	b430      	push	{r4, r5}
 800a70e:	6985      	ldr	r5, [r0, #24]
 800a710:	68c4      	ldr	r4, [r0, #12]
 800a712:	6941      	ldr	r1, [r0, #20]
 800a714:	4b06      	ldr	r3, [pc, #24]	; (800a730 <get_tensor_byte_size+0x24>)
 800a716:	6828      	ldr	r0, [r5, #0]
 800a718:	4a06      	ldr	r2, [pc, #24]	; (800a734 <get_tensor_byte_size+0x28>)
 800a71a:	4003      	ands	r3, r0
 800a71c:	68c9      	ldr	r1, [r1, #12]
 800a71e:	68e0      	ldr	r0, [r4, #12]
 800a720:	4293      	cmp	r3, r2
 800a722:	fb01 f000 	mul.w	r0, r1, r0
 800a726:	d101      	bne.n	800a72c <get_tensor_byte_size+0x20>
 800a728:	3007      	adds	r0, #7
 800a72a:	08c0      	lsrs	r0, r0, #3
 800a72c:	bc30      	pop	{r4, r5}
 800a72e:	4770      	bx	lr
 800a730:	017fffff 	.word	0x017fffff
 800a734:	000400c0 	.word	0x000400c0

0800a738 <ai_array_to_buffer_fmt>:
 800a738:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d050      	beq.n	800a7e2 <ai_array_to_buffer_fmt+0xaa>
 800a740:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800a744:	4b29      	ldr	r3, [pc, #164]	; (800a7ec <ai_array_to_buffer_fmt+0xb4>)
 800a746:	429a      	cmp	r2, r3
 800a748:	d00b      	beq.n	800a762 <ai_array_to_buffer_fmt+0x2a>
 800a74a:	dc1c      	bgt.n	800a786 <ai_array_to_buffer_fmt+0x4e>
 800a74c:	4b28      	ldr	r3, [pc, #160]	; (800a7f0 <ai_array_to_buffer_fmt+0xb8>)
 800a74e:	429a      	cmp	r2, r3
 800a750:	d007      	beq.n	800a762 <ai_array_to_buffer_fmt+0x2a>
 800a752:	dd0b      	ble.n	800a76c <ai_array_to_buffer_fmt+0x34>
 800a754:	4b27      	ldr	r3, [pc, #156]	; (800a7f4 <ai_array_to_buffer_fmt+0xbc>)
 800a756:	429a      	cmp	r2, r3
 800a758:	d003      	beq.n	800a762 <ai_array_to_buffer_fmt+0x2a>
 800a75a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800a75e:	429a      	cmp	r2, r3
 800a760:	d131      	bne.n	800a7c6 <ai_array_to_buffer_fmt+0x8e>
 800a762:	4613      	mov	r3, r2
 800a764:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a768:	4318      	orrs	r0, r3
 800a76a:	4770      	bx	lr
 800a76c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a770:	429a      	cmp	r2, r3
 800a772:	d0f6      	beq.n	800a762 <ai_array_to_buffer_fmt+0x2a>
 800a774:	dd2c      	ble.n	800a7d0 <ai_array_to_buffer_fmt+0x98>
 800a776:	4b20      	ldr	r3, [pc, #128]	; (800a7f8 <ai_array_to_buffer_fmt+0xc0>)
 800a778:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a77c:	429a      	cmp	r2, r3
 800a77e:	bf18      	it	ne
 800a780:	2340      	movne	r3, #64	; 0x40
 800a782:	4318      	orrs	r0, r3
 800a784:	4770      	bx	lr
 800a786:	4b1d      	ldr	r3, [pc, #116]	; (800a7fc <ai_array_to_buffer_fmt+0xc4>)
 800a788:	429a      	cmp	r2, r3
 800a78a:	d0ea      	beq.n	800a762 <ai_array_to_buffer_fmt+0x2a>
 800a78c:	dd0e      	ble.n	800a7ac <ai_array_to_buffer_fmt+0x74>
 800a78e:	4b1c      	ldr	r3, [pc, #112]	; (800a800 <ai_array_to_buffer_fmt+0xc8>)
 800a790:	429a      	cmp	r2, r3
 800a792:	d0e6      	beq.n	800a762 <ai_array_to_buffer_fmt+0x2a>
 800a794:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800a798:	429a      	cmp	r2, r3
 800a79a:	d0e2      	beq.n	800a762 <ai_array_to_buffer_fmt+0x2a>
 800a79c:	4b19      	ldr	r3, [pc, #100]	; (800a804 <ai_array_to_buffer_fmt+0xcc>)
 800a79e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	bf18      	it	ne
 800a7a6:	2340      	movne	r3, #64	; 0x40
 800a7a8:	4318      	orrs	r0, r3
 800a7aa:	4770      	bx	lr
 800a7ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d0d6      	beq.n	800a762 <ai_array_to_buffer_fmt+0x2a>
 800a7b4:	3307      	adds	r3, #7
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d0d3      	beq.n	800a762 <ai_array_to_buffer_fmt+0x2a>
 800a7ba:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	bf18      	it	ne
 800a7c2:	2340      	movne	r3, #64	; 0x40
 800a7c4:	e7ce      	b.n	800a764 <ai_array_to_buffer_fmt+0x2c>
 800a7c6:	4b10      	ldr	r3, [pc, #64]	; (800a808 <ai_array_to_buffer_fmt+0xd0>)
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	bf18      	it	ne
 800a7cc:	2340      	movne	r3, #64	; 0x40
 800a7ce:	e7c9      	b.n	800a764 <ai_array_to_buffer_fmt+0x2c>
 800a7d0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d0c4      	beq.n	800a762 <ai_array_to_buffer_fmt+0x2a>
 800a7d8:	3380      	adds	r3, #128	; 0x80
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	bf18      	it	ne
 800a7de:	2340      	movne	r3, #64	; 0x40
 800a7e0:	e7c0      	b.n	800a764 <ai_array_to_buffer_fmt+0x2c>
 800a7e2:	4b0a      	ldr	r3, [pc, #40]	; (800a80c <ai_array_to_buffer_fmt+0xd4>)
 800a7e4:	4003      	ands	r3, r0
 800a7e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7ea:	e7bb      	b.n	800a764 <ai_array_to_buffer_fmt+0x2c>
 800a7ec:	00840040 	.word	0x00840040
 800a7f0:	00040840 	.word	0x00040840
 800a7f4:	00041040 	.word	0x00041040
 800a7f8:	00040447 	.word	0x00040447
 800a7fc:	00840840 	.word	0x00840840
 800a800:	00841040 	.word	0x00841040
 800a804:	0084084f 	.word	0x0084084f
 800a808:	0004084f 	.word	0x0004084f
 800a80c:	00803fff 	.word	0x00803fff

0800a810 <ai_array_get_byte_size>:
 800a810:	b319      	cbz	r1, 800a85a <ai_array_get_byte_size+0x4a>
 800a812:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800a816:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800a81a:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800a81e:	11c0      	asrs	r0, r0, #7
 800a820:	fb03 f101 	mul.w	r1, r3, r1
 800a824:	2a04      	cmp	r2, #4
 800a826:	f101 0107 	add.w	r1, r1, #7
 800a82a:	f021 0107 	bic.w	r1, r1, #7
 800a82e:	fa21 f10c 	lsr.w	r1, r1, ip
 800a832:	d00b      	beq.n	800a84c <ai_array_get_byte_size+0x3c>
 800a834:	2a08      	cmp	r2, #8
 800a836:	d002      	beq.n	800a83e <ai_array_get_byte_size+0x2e>
 800a838:	3107      	adds	r1, #7
 800a83a:	08c8      	lsrs	r0, r1, #3
 800a83c:	4770      	bx	lr
 800a83e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a842:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800a846:	3107      	adds	r1, #7
 800a848:	08c8      	lsrs	r0, r1, #3
 800a84a:	4770      	bx	lr
 800a84c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a850:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800a854:	3107      	adds	r1, #7
 800a856:	08c8      	lsrs	r0, r1, #3
 800a858:	4770      	bx	lr
 800a85a:	4608      	mov	r0, r1
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop

0800a860 <ai_array_get_data_byte_size>:
 800a860:	b161      	cbz	r1, 800a87c <ai_array_get_data_byte_size+0x1c>
 800a862:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800a866:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800a86a:	fb03 f101 	mul.w	r1, r3, r1
 800a86e:	1dc8      	adds	r0, r1, #7
 800a870:	f020 0007 	bic.w	r0, r0, #7
 800a874:	40d0      	lsrs	r0, r2
 800a876:	3007      	adds	r0, #7
 800a878:	08c0      	lsrs	r0, r0, #3
 800a87a:	4770      	bx	lr
 800a87c:	4608      	mov	r0, r1
 800a87e:	4770      	bx	lr

0800a880 <__errno>:
 800a880:	4b01      	ldr	r3, [pc, #4]	; (800a888 <__errno+0x8>)
 800a882:	6818      	ldr	r0, [r3, #0]
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	20000544 	.word	0x20000544

0800a88c <__libc_init_array>:
 800a88c:	b570      	push	{r4, r5, r6, lr}
 800a88e:	4d0d      	ldr	r5, [pc, #52]	; (800a8c4 <__libc_init_array+0x38>)
 800a890:	4c0d      	ldr	r4, [pc, #52]	; (800a8c8 <__libc_init_array+0x3c>)
 800a892:	1b64      	subs	r4, r4, r5
 800a894:	10a4      	asrs	r4, r4, #2
 800a896:	2600      	movs	r6, #0
 800a898:	42a6      	cmp	r6, r4
 800a89a:	d109      	bne.n	800a8b0 <__libc_init_array+0x24>
 800a89c:	4d0b      	ldr	r5, [pc, #44]	; (800a8cc <__libc_init_array+0x40>)
 800a89e:	4c0c      	ldr	r4, [pc, #48]	; (800a8d0 <__libc_init_array+0x44>)
 800a8a0:	f004 fd2e 	bl	800f300 <_init>
 800a8a4:	1b64      	subs	r4, r4, r5
 800a8a6:	10a4      	asrs	r4, r4, #2
 800a8a8:	2600      	movs	r6, #0
 800a8aa:	42a6      	cmp	r6, r4
 800a8ac:	d105      	bne.n	800a8ba <__libc_init_array+0x2e>
 800a8ae:	bd70      	pop	{r4, r5, r6, pc}
 800a8b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b4:	4798      	blx	r3
 800a8b6:	3601      	adds	r6, #1
 800a8b8:	e7ee      	b.n	800a898 <__libc_init_array+0xc>
 800a8ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8be:	4798      	blx	r3
 800a8c0:	3601      	adds	r6, #1
 800a8c2:	e7f2      	b.n	800a8aa <__libc_init_array+0x1e>
 800a8c4:	080104c8 	.word	0x080104c8
 800a8c8:	080104c8 	.word	0x080104c8
 800a8cc:	080104c8 	.word	0x080104c8
 800a8d0:	080104cc 	.word	0x080104cc

0800a8d4 <malloc>:
 800a8d4:	4b02      	ldr	r3, [pc, #8]	; (800a8e0 <malloc+0xc>)
 800a8d6:	4601      	mov	r1, r0
 800a8d8:	6818      	ldr	r0, [r3, #0]
 800a8da:	f000 b885 	b.w	800a9e8 <_malloc_r>
 800a8de:	bf00      	nop
 800a8e0:	20000544 	.word	0x20000544

0800a8e4 <memcpy>:
 800a8e4:	440a      	add	r2, r1
 800a8e6:	4291      	cmp	r1, r2
 800a8e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8ec:	d100      	bne.n	800a8f0 <memcpy+0xc>
 800a8ee:	4770      	bx	lr
 800a8f0:	b510      	push	{r4, lr}
 800a8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8fa:	4291      	cmp	r1, r2
 800a8fc:	d1f9      	bne.n	800a8f2 <memcpy+0xe>
 800a8fe:	bd10      	pop	{r4, pc}

0800a900 <memset>:
 800a900:	4402      	add	r2, r0
 800a902:	4603      	mov	r3, r0
 800a904:	4293      	cmp	r3, r2
 800a906:	d100      	bne.n	800a90a <memset+0xa>
 800a908:	4770      	bx	lr
 800a90a:	f803 1b01 	strb.w	r1, [r3], #1
 800a90e:	e7f9      	b.n	800a904 <memset+0x4>

0800a910 <_free_r>:
 800a910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a912:	2900      	cmp	r1, #0
 800a914:	d044      	beq.n	800a9a0 <_free_r+0x90>
 800a916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a91a:	9001      	str	r0, [sp, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f1a1 0404 	sub.w	r4, r1, #4
 800a922:	bfb8      	it	lt
 800a924:	18e4      	addlt	r4, r4, r3
 800a926:	f003 fb07 	bl	800df38 <__malloc_lock>
 800a92a:	4a1e      	ldr	r2, [pc, #120]	; (800a9a4 <_free_r+0x94>)
 800a92c:	9801      	ldr	r0, [sp, #4]
 800a92e:	6813      	ldr	r3, [r2, #0]
 800a930:	b933      	cbnz	r3, 800a940 <_free_r+0x30>
 800a932:	6063      	str	r3, [r4, #4]
 800a934:	6014      	str	r4, [r2, #0]
 800a936:	b003      	add	sp, #12
 800a938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a93c:	f003 bb02 	b.w	800df44 <__malloc_unlock>
 800a940:	42a3      	cmp	r3, r4
 800a942:	d908      	bls.n	800a956 <_free_r+0x46>
 800a944:	6825      	ldr	r5, [r4, #0]
 800a946:	1961      	adds	r1, r4, r5
 800a948:	428b      	cmp	r3, r1
 800a94a:	bf01      	itttt	eq
 800a94c:	6819      	ldreq	r1, [r3, #0]
 800a94e:	685b      	ldreq	r3, [r3, #4]
 800a950:	1949      	addeq	r1, r1, r5
 800a952:	6021      	streq	r1, [r4, #0]
 800a954:	e7ed      	b.n	800a932 <_free_r+0x22>
 800a956:	461a      	mov	r2, r3
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	b10b      	cbz	r3, 800a960 <_free_r+0x50>
 800a95c:	42a3      	cmp	r3, r4
 800a95e:	d9fa      	bls.n	800a956 <_free_r+0x46>
 800a960:	6811      	ldr	r1, [r2, #0]
 800a962:	1855      	adds	r5, r2, r1
 800a964:	42a5      	cmp	r5, r4
 800a966:	d10b      	bne.n	800a980 <_free_r+0x70>
 800a968:	6824      	ldr	r4, [r4, #0]
 800a96a:	4421      	add	r1, r4
 800a96c:	1854      	adds	r4, r2, r1
 800a96e:	42a3      	cmp	r3, r4
 800a970:	6011      	str	r1, [r2, #0]
 800a972:	d1e0      	bne.n	800a936 <_free_r+0x26>
 800a974:	681c      	ldr	r4, [r3, #0]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	6053      	str	r3, [r2, #4]
 800a97a:	4421      	add	r1, r4
 800a97c:	6011      	str	r1, [r2, #0]
 800a97e:	e7da      	b.n	800a936 <_free_r+0x26>
 800a980:	d902      	bls.n	800a988 <_free_r+0x78>
 800a982:	230c      	movs	r3, #12
 800a984:	6003      	str	r3, [r0, #0]
 800a986:	e7d6      	b.n	800a936 <_free_r+0x26>
 800a988:	6825      	ldr	r5, [r4, #0]
 800a98a:	1961      	adds	r1, r4, r5
 800a98c:	428b      	cmp	r3, r1
 800a98e:	bf04      	itt	eq
 800a990:	6819      	ldreq	r1, [r3, #0]
 800a992:	685b      	ldreq	r3, [r3, #4]
 800a994:	6063      	str	r3, [r4, #4]
 800a996:	bf04      	itt	eq
 800a998:	1949      	addeq	r1, r1, r5
 800a99a:	6021      	streq	r1, [r4, #0]
 800a99c:	6054      	str	r4, [r2, #4]
 800a99e:	e7ca      	b.n	800a936 <_free_r+0x26>
 800a9a0:	b003      	add	sp, #12
 800a9a2:	bd30      	pop	{r4, r5, pc}
 800a9a4:	20000f5c 	.word	0x20000f5c

0800a9a8 <sbrk_aligned>:
 800a9a8:	b570      	push	{r4, r5, r6, lr}
 800a9aa:	4e0e      	ldr	r6, [pc, #56]	; (800a9e4 <sbrk_aligned+0x3c>)
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	6831      	ldr	r1, [r6, #0]
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	b911      	cbnz	r1, 800a9ba <sbrk_aligned+0x12>
 800a9b4:	f000 ffa0 	bl	800b8f8 <_sbrk_r>
 800a9b8:	6030      	str	r0, [r6, #0]
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	4628      	mov	r0, r5
 800a9be:	f000 ff9b 	bl	800b8f8 <_sbrk_r>
 800a9c2:	1c43      	adds	r3, r0, #1
 800a9c4:	d00a      	beq.n	800a9dc <sbrk_aligned+0x34>
 800a9c6:	1cc4      	adds	r4, r0, #3
 800a9c8:	f024 0403 	bic.w	r4, r4, #3
 800a9cc:	42a0      	cmp	r0, r4
 800a9ce:	d007      	beq.n	800a9e0 <sbrk_aligned+0x38>
 800a9d0:	1a21      	subs	r1, r4, r0
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	f000 ff90 	bl	800b8f8 <_sbrk_r>
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d101      	bne.n	800a9e0 <sbrk_aligned+0x38>
 800a9dc:	f04f 34ff 	mov.w	r4, #4294967295
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	bd70      	pop	{r4, r5, r6, pc}
 800a9e4:	20000f60 	.word	0x20000f60

0800a9e8 <_malloc_r>:
 800a9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ec:	1ccd      	adds	r5, r1, #3
 800a9ee:	f025 0503 	bic.w	r5, r5, #3
 800a9f2:	3508      	adds	r5, #8
 800a9f4:	2d0c      	cmp	r5, #12
 800a9f6:	bf38      	it	cc
 800a9f8:	250c      	movcc	r5, #12
 800a9fa:	2d00      	cmp	r5, #0
 800a9fc:	4607      	mov	r7, r0
 800a9fe:	db01      	blt.n	800aa04 <_malloc_r+0x1c>
 800aa00:	42a9      	cmp	r1, r5
 800aa02:	d905      	bls.n	800aa10 <_malloc_r+0x28>
 800aa04:	230c      	movs	r3, #12
 800aa06:	603b      	str	r3, [r7, #0]
 800aa08:	2600      	movs	r6, #0
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa10:	4e2e      	ldr	r6, [pc, #184]	; (800aacc <_malloc_r+0xe4>)
 800aa12:	f003 fa91 	bl	800df38 <__malloc_lock>
 800aa16:	6833      	ldr	r3, [r6, #0]
 800aa18:	461c      	mov	r4, r3
 800aa1a:	bb34      	cbnz	r4, 800aa6a <_malloc_r+0x82>
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	4638      	mov	r0, r7
 800aa20:	f7ff ffc2 	bl	800a9a8 <sbrk_aligned>
 800aa24:	1c43      	adds	r3, r0, #1
 800aa26:	4604      	mov	r4, r0
 800aa28:	d14d      	bne.n	800aac6 <_malloc_r+0xde>
 800aa2a:	6834      	ldr	r4, [r6, #0]
 800aa2c:	4626      	mov	r6, r4
 800aa2e:	2e00      	cmp	r6, #0
 800aa30:	d140      	bne.n	800aab4 <_malloc_r+0xcc>
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	4631      	mov	r1, r6
 800aa36:	4638      	mov	r0, r7
 800aa38:	eb04 0803 	add.w	r8, r4, r3
 800aa3c:	f000 ff5c 	bl	800b8f8 <_sbrk_r>
 800aa40:	4580      	cmp	r8, r0
 800aa42:	d13a      	bne.n	800aaba <_malloc_r+0xd2>
 800aa44:	6821      	ldr	r1, [r4, #0]
 800aa46:	3503      	adds	r5, #3
 800aa48:	1a6d      	subs	r5, r5, r1
 800aa4a:	f025 0503 	bic.w	r5, r5, #3
 800aa4e:	3508      	adds	r5, #8
 800aa50:	2d0c      	cmp	r5, #12
 800aa52:	bf38      	it	cc
 800aa54:	250c      	movcc	r5, #12
 800aa56:	4629      	mov	r1, r5
 800aa58:	4638      	mov	r0, r7
 800aa5a:	f7ff ffa5 	bl	800a9a8 <sbrk_aligned>
 800aa5e:	3001      	adds	r0, #1
 800aa60:	d02b      	beq.n	800aaba <_malloc_r+0xd2>
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	442b      	add	r3, r5
 800aa66:	6023      	str	r3, [r4, #0]
 800aa68:	e00e      	b.n	800aa88 <_malloc_r+0xa0>
 800aa6a:	6822      	ldr	r2, [r4, #0]
 800aa6c:	1b52      	subs	r2, r2, r5
 800aa6e:	d41e      	bmi.n	800aaae <_malloc_r+0xc6>
 800aa70:	2a0b      	cmp	r2, #11
 800aa72:	d916      	bls.n	800aaa2 <_malloc_r+0xba>
 800aa74:	1961      	adds	r1, r4, r5
 800aa76:	42a3      	cmp	r3, r4
 800aa78:	6025      	str	r5, [r4, #0]
 800aa7a:	bf18      	it	ne
 800aa7c:	6059      	strne	r1, [r3, #4]
 800aa7e:	6863      	ldr	r3, [r4, #4]
 800aa80:	bf08      	it	eq
 800aa82:	6031      	streq	r1, [r6, #0]
 800aa84:	5162      	str	r2, [r4, r5]
 800aa86:	604b      	str	r3, [r1, #4]
 800aa88:	4638      	mov	r0, r7
 800aa8a:	f104 060b 	add.w	r6, r4, #11
 800aa8e:	f003 fa59 	bl	800df44 <__malloc_unlock>
 800aa92:	f026 0607 	bic.w	r6, r6, #7
 800aa96:	1d23      	adds	r3, r4, #4
 800aa98:	1af2      	subs	r2, r6, r3
 800aa9a:	d0b6      	beq.n	800aa0a <_malloc_r+0x22>
 800aa9c:	1b9b      	subs	r3, r3, r6
 800aa9e:	50a3      	str	r3, [r4, r2]
 800aaa0:	e7b3      	b.n	800aa0a <_malloc_r+0x22>
 800aaa2:	6862      	ldr	r2, [r4, #4]
 800aaa4:	42a3      	cmp	r3, r4
 800aaa6:	bf0c      	ite	eq
 800aaa8:	6032      	streq	r2, [r6, #0]
 800aaaa:	605a      	strne	r2, [r3, #4]
 800aaac:	e7ec      	b.n	800aa88 <_malloc_r+0xa0>
 800aaae:	4623      	mov	r3, r4
 800aab0:	6864      	ldr	r4, [r4, #4]
 800aab2:	e7b2      	b.n	800aa1a <_malloc_r+0x32>
 800aab4:	4634      	mov	r4, r6
 800aab6:	6876      	ldr	r6, [r6, #4]
 800aab8:	e7b9      	b.n	800aa2e <_malloc_r+0x46>
 800aaba:	230c      	movs	r3, #12
 800aabc:	603b      	str	r3, [r7, #0]
 800aabe:	4638      	mov	r0, r7
 800aac0:	f003 fa40 	bl	800df44 <__malloc_unlock>
 800aac4:	e7a1      	b.n	800aa0a <_malloc_r+0x22>
 800aac6:	6025      	str	r5, [r4, #0]
 800aac8:	e7de      	b.n	800aa88 <_malloc_r+0xa0>
 800aaca:	bf00      	nop
 800aacc:	20000f5c 	.word	0x20000f5c

0800aad0 <__cvt>:
 800aad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aad2:	ed2d 8b02 	vpush	{d8}
 800aad6:	eeb0 8b40 	vmov.f64	d8, d0
 800aada:	b085      	sub	sp, #20
 800aadc:	4617      	mov	r7, r2
 800aade:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800aae0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aae2:	ee18 2a90 	vmov	r2, s17
 800aae6:	f025 0520 	bic.w	r5, r5, #32
 800aaea:	2a00      	cmp	r2, #0
 800aaec:	bfb6      	itet	lt
 800aaee:	222d      	movlt	r2, #45	; 0x2d
 800aaf0:	2200      	movge	r2, #0
 800aaf2:	eeb1 8b40 	vneglt.f64	d8, d0
 800aaf6:	2d46      	cmp	r5, #70	; 0x46
 800aaf8:	460c      	mov	r4, r1
 800aafa:	701a      	strb	r2, [r3, #0]
 800aafc:	d004      	beq.n	800ab08 <__cvt+0x38>
 800aafe:	2d45      	cmp	r5, #69	; 0x45
 800ab00:	d100      	bne.n	800ab04 <__cvt+0x34>
 800ab02:	3401      	adds	r4, #1
 800ab04:	2102      	movs	r1, #2
 800ab06:	e000      	b.n	800ab0a <__cvt+0x3a>
 800ab08:	2103      	movs	r1, #3
 800ab0a:	ab03      	add	r3, sp, #12
 800ab0c:	9301      	str	r3, [sp, #4]
 800ab0e:	ab02      	add	r3, sp, #8
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	4622      	mov	r2, r4
 800ab14:	4633      	mov	r3, r6
 800ab16:	eeb0 0b48 	vmov.f64	d0, d8
 800ab1a:	f001 fee9 	bl	800c8f0 <_dtoa_r>
 800ab1e:	2d47      	cmp	r5, #71	; 0x47
 800ab20:	d101      	bne.n	800ab26 <__cvt+0x56>
 800ab22:	07fb      	lsls	r3, r7, #31
 800ab24:	d51a      	bpl.n	800ab5c <__cvt+0x8c>
 800ab26:	2d46      	cmp	r5, #70	; 0x46
 800ab28:	eb00 0204 	add.w	r2, r0, r4
 800ab2c:	d10c      	bne.n	800ab48 <__cvt+0x78>
 800ab2e:	7803      	ldrb	r3, [r0, #0]
 800ab30:	2b30      	cmp	r3, #48	; 0x30
 800ab32:	d107      	bne.n	800ab44 <__cvt+0x74>
 800ab34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ab38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab3c:	bf1c      	itt	ne
 800ab3e:	f1c4 0401 	rsbne	r4, r4, #1
 800ab42:	6034      	strne	r4, [r6, #0]
 800ab44:	6833      	ldr	r3, [r6, #0]
 800ab46:	441a      	add	r2, r3
 800ab48:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ab4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab50:	bf08      	it	eq
 800ab52:	9203      	streq	r2, [sp, #12]
 800ab54:	2130      	movs	r1, #48	; 0x30
 800ab56:	9b03      	ldr	r3, [sp, #12]
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d307      	bcc.n	800ab6c <__cvt+0x9c>
 800ab5c:	9b03      	ldr	r3, [sp, #12]
 800ab5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab60:	1a1b      	subs	r3, r3, r0
 800ab62:	6013      	str	r3, [r2, #0]
 800ab64:	b005      	add	sp, #20
 800ab66:	ecbd 8b02 	vpop	{d8}
 800ab6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab6c:	1c5c      	adds	r4, r3, #1
 800ab6e:	9403      	str	r4, [sp, #12]
 800ab70:	7019      	strb	r1, [r3, #0]
 800ab72:	e7f0      	b.n	800ab56 <__cvt+0x86>

0800ab74 <__exponent>:
 800ab74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab76:	4603      	mov	r3, r0
 800ab78:	2900      	cmp	r1, #0
 800ab7a:	bfb8      	it	lt
 800ab7c:	4249      	neglt	r1, r1
 800ab7e:	f803 2b02 	strb.w	r2, [r3], #2
 800ab82:	bfb4      	ite	lt
 800ab84:	222d      	movlt	r2, #45	; 0x2d
 800ab86:	222b      	movge	r2, #43	; 0x2b
 800ab88:	2909      	cmp	r1, #9
 800ab8a:	7042      	strb	r2, [r0, #1]
 800ab8c:	dd2a      	ble.n	800abe4 <__exponent+0x70>
 800ab8e:	f10d 0407 	add.w	r4, sp, #7
 800ab92:	46a4      	mov	ip, r4
 800ab94:	270a      	movs	r7, #10
 800ab96:	46a6      	mov	lr, r4
 800ab98:	460a      	mov	r2, r1
 800ab9a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ab9e:	fb07 1516 	mls	r5, r7, r6, r1
 800aba2:	3530      	adds	r5, #48	; 0x30
 800aba4:	2a63      	cmp	r2, #99	; 0x63
 800aba6:	f104 34ff 	add.w	r4, r4, #4294967295
 800abaa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800abae:	4631      	mov	r1, r6
 800abb0:	dcf1      	bgt.n	800ab96 <__exponent+0x22>
 800abb2:	3130      	adds	r1, #48	; 0x30
 800abb4:	f1ae 0502 	sub.w	r5, lr, #2
 800abb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800abbc:	1c44      	adds	r4, r0, #1
 800abbe:	4629      	mov	r1, r5
 800abc0:	4561      	cmp	r1, ip
 800abc2:	d30a      	bcc.n	800abda <__exponent+0x66>
 800abc4:	f10d 0209 	add.w	r2, sp, #9
 800abc8:	eba2 020e 	sub.w	r2, r2, lr
 800abcc:	4565      	cmp	r5, ip
 800abce:	bf88      	it	hi
 800abd0:	2200      	movhi	r2, #0
 800abd2:	4413      	add	r3, r2
 800abd4:	1a18      	subs	r0, r3, r0
 800abd6:	b003      	add	sp, #12
 800abd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abde:	f804 2f01 	strb.w	r2, [r4, #1]!
 800abe2:	e7ed      	b.n	800abc0 <__exponent+0x4c>
 800abe4:	2330      	movs	r3, #48	; 0x30
 800abe6:	3130      	adds	r1, #48	; 0x30
 800abe8:	7083      	strb	r3, [r0, #2]
 800abea:	70c1      	strb	r1, [r0, #3]
 800abec:	1d03      	adds	r3, r0, #4
 800abee:	e7f1      	b.n	800abd4 <__exponent+0x60>

0800abf0 <_printf_float>:
 800abf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	b08b      	sub	sp, #44	; 0x2c
 800abf6:	460c      	mov	r4, r1
 800abf8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800abfc:	4616      	mov	r6, r2
 800abfe:	461f      	mov	r7, r3
 800ac00:	4605      	mov	r5, r0
 800ac02:	f003 f91b 	bl	800de3c <_localeconv_r>
 800ac06:	f8d0 b000 	ldr.w	fp, [r0]
 800ac0a:	4658      	mov	r0, fp
 800ac0c:	f7f5 fb18 	bl	8000240 <strlen>
 800ac10:	2300      	movs	r3, #0
 800ac12:	9308      	str	r3, [sp, #32]
 800ac14:	f8d8 3000 	ldr.w	r3, [r8]
 800ac18:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ac1c:	6822      	ldr	r2, [r4, #0]
 800ac1e:	3307      	adds	r3, #7
 800ac20:	f023 0307 	bic.w	r3, r3, #7
 800ac24:	f103 0108 	add.w	r1, r3, #8
 800ac28:	f8c8 1000 	str.w	r1, [r8]
 800ac2c:	4682      	mov	sl, r0
 800ac2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac32:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ac36:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ae98 <_printf_float+0x2a8>
 800ac3a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ac3e:	eeb0 6bc0 	vabs.f64	d6, d0
 800ac42:	eeb4 6b47 	vcmp.f64	d6, d7
 800ac46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac4a:	dd24      	ble.n	800ac96 <_printf_float+0xa6>
 800ac4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ac50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac54:	d502      	bpl.n	800ac5c <_printf_float+0x6c>
 800ac56:	232d      	movs	r3, #45	; 0x2d
 800ac58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac5c:	4b90      	ldr	r3, [pc, #576]	; (800aea0 <_printf_float+0x2b0>)
 800ac5e:	4891      	ldr	r0, [pc, #580]	; (800aea4 <_printf_float+0x2b4>)
 800ac60:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ac64:	bf94      	ite	ls
 800ac66:	4698      	movls	r8, r3
 800ac68:	4680      	movhi	r8, r0
 800ac6a:	2303      	movs	r3, #3
 800ac6c:	6123      	str	r3, [r4, #16]
 800ac6e:	f022 0204 	bic.w	r2, r2, #4
 800ac72:	2300      	movs	r3, #0
 800ac74:	6022      	str	r2, [r4, #0]
 800ac76:	9304      	str	r3, [sp, #16]
 800ac78:	9700      	str	r7, [sp, #0]
 800ac7a:	4633      	mov	r3, r6
 800ac7c:	aa09      	add	r2, sp, #36	; 0x24
 800ac7e:	4621      	mov	r1, r4
 800ac80:	4628      	mov	r0, r5
 800ac82:	f000 f9d3 	bl	800b02c <_printf_common>
 800ac86:	3001      	adds	r0, #1
 800ac88:	f040 808a 	bne.w	800ada0 <_printf_float+0x1b0>
 800ac8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac90:	b00b      	add	sp, #44	; 0x2c
 800ac92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac96:	eeb4 0b40 	vcmp.f64	d0, d0
 800ac9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac9e:	d709      	bvc.n	800acb4 <_printf_float+0xc4>
 800aca0:	ee10 3a90 	vmov	r3, s1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	bfbc      	itt	lt
 800aca8:	232d      	movlt	r3, #45	; 0x2d
 800acaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800acae:	487e      	ldr	r0, [pc, #504]	; (800aea8 <_printf_float+0x2b8>)
 800acb0:	4b7e      	ldr	r3, [pc, #504]	; (800aeac <_printf_float+0x2bc>)
 800acb2:	e7d5      	b.n	800ac60 <_printf_float+0x70>
 800acb4:	6863      	ldr	r3, [r4, #4]
 800acb6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800acba:	9104      	str	r1, [sp, #16]
 800acbc:	1c59      	adds	r1, r3, #1
 800acbe:	d13c      	bne.n	800ad3a <_printf_float+0x14a>
 800acc0:	2306      	movs	r3, #6
 800acc2:	6063      	str	r3, [r4, #4]
 800acc4:	2300      	movs	r3, #0
 800acc6:	9303      	str	r3, [sp, #12]
 800acc8:	ab08      	add	r3, sp, #32
 800acca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800acce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800acd2:	ab07      	add	r3, sp, #28
 800acd4:	6861      	ldr	r1, [r4, #4]
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	6022      	str	r2, [r4, #0]
 800acda:	f10d 031b 	add.w	r3, sp, #27
 800acde:	4628      	mov	r0, r5
 800ace0:	f7ff fef6 	bl	800aad0 <__cvt>
 800ace4:	9b04      	ldr	r3, [sp, #16]
 800ace6:	9907      	ldr	r1, [sp, #28]
 800ace8:	2b47      	cmp	r3, #71	; 0x47
 800acea:	4680      	mov	r8, r0
 800acec:	d108      	bne.n	800ad00 <_printf_float+0x110>
 800acee:	1cc8      	adds	r0, r1, #3
 800acf0:	db02      	blt.n	800acf8 <_printf_float+0x108>
 800acf2:	6863      	ldr	r3, [r4, #4]
 800acf4:	4299      	cmp	r1, r3
 800acf6:	dd41      	ble.n	800ad7c <_printf_float+0x18c>
 800acf8:	f1a9 0902 	sub.w	r9, r9, #2
 800acfc:	fa5f f989 	uxtb.w	r9, r9
 800ad00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ad04:	d820      	bhi.n	800ad48 <_printf_float+0x158>
 800ad06:	3901      	subs	r1, #1
 800ad08:	464a      	mov	r2, r9
 800ad0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad0e:	9107      	str	r1, [sp, #28]
 800ad10:	f7ff ff30 	bl	800ab74 <__exponent>
 800ad14:	9a08      	ldr	r2, [sp, #32]
 800ad16:	9004      	str	r0, [sp, #16]
 800ad18:	1813      	adds	r3, r2, r0
 800ad1a:	2a01      	cmp	r2, #1
 800ad1c:	6123      	str	r3, [r4, #16]
 800ad1e:	dc02      	bgt.n	800ad26 <_printf_float+0x136>
 800ad20:	6822      	ldr	r2, [r4, #0]
 800ad22:	07d2      	lsls	r2, r2, #31
 800ad24:	d501      	bpl.n	800ad2a <_printf_float+0x13a>
 800ad26:	3301      	adds	r3, #1
 800ad28:	6123      	str	r3, [r4, #16]
 800ad2a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0a2      	beq.n	800ac78 <_printf_float+0x88>
 800ad32:	232d      	movs	r3, #45	; 0x2d
 800ad34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad38:	e79e      	b.n	800ac78 <_printf_float+0x88>
 800ad3a:	9904      	ldr	r1, [sp, #16]
 800ad3c:	2947      	cmp	r1, #71	; 0x47
 800ad3e:	d1c1      	bne.n	800acc4 <_printf_float+0xd4>
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1bf      	bne.n	800acc4 <_printf_float+0xd4>
 800ad44:	2301      	movs	r3, #1
 800ad46:	e7bc      	b.n	800acc2 <_printf_float+0xd2>
 800ad48:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ad4c:	d118      	bne.n	800ad80 <_printf_float+0x190>
 800ad4e:	2900      	cmp	r1, #0
 800ad50:	6863      	ldr	r3, [r4, #4]
 800ad52:	dd0b      	ble.n	800ad6c <_printf_float+0x17c>
 800ad54:	6121      	str	r1, [r4, #16]
 800ad56:	b913      	cbnz	r3, 800ad5e <_printf_float+0x16e>
 800ad58:	6822      	ldr	r2, [r4, #0]
 800ad5a:	07d0      	lsls	r0, r2, #31
 800ad5c:	d502      	bpl.n	800ad64 <_printf_float+0x174>
 800ad5e:	3301      	adds	r3, #1
 800ad60:	440b      	add	r3, r1
 800ad62:	6123      	str	r3, [r4, #16]
 800ad64:	2300      	movs	r3, #0
 800ad66:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad68:	9304      	str	r3, [sp, #16]
 800ad6a:	e7de      	b.n	800ad2a <_printf_float+0x13a>
 800ad6c:	b913      	cbnz	r3, 800ad74 <_printf_float+0x184>
 800ad6e:	6822      	ldr	r2, [r4, #0]
 800ad70:	07d2      	lsls	r2, r2, #31
 800ad72:	d501      	bpl.n	800ad78 <_printf_float+0x188>
 800ad74:	3302      	adds	r3, #2
 800ad76:	e7f4      	b.n	800ad62 <_printf_float+0x172>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e7f2      	b.n	800ad62 <_printf_float+0x172>
 800ad7c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ad80:	9b08      	ldr	r3, [sp, #32]
 800ad82:	4299      	cmp	r1, r3
 800ad84:	db05      	blt.n	800ad92 <_printf_float+0x1a2>
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	6121      	str	r1, [r4, #16]
 800ad8a:	07d8      	lsls	r0, r3, #31
 800ad8c:	d5ea      	bpl.n	800ad64 <_printf_float+0x174>
 800ad8e:	1c4b      	adds	r3, r1, #1
 800ad90:	e7e7      	b.n	800ad62 <_printf_float+0x172>
 800ad92:	2900      	cmp	r1, #0
 800ad94:	bfd4      	ite	le
 800ad96:	f1c1 0202 	rsble	r2, r1, #2
 800ad9a:	2201      	movgt	r2, #1
 800ad9c:	4413      	add	r3, r2
 800ad9e:	e7e0      	b.n	800ad62 <_printf_float+0x172>
 800ada0:	6823      	ldr	r3, [r4, #0]
 800ada2:	055a      	lsls	r2, r3, #21
 800ada4:	d407      	bmi.n	800adb6 <_printf_float+0x1c6>
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	4642      	mov	r2, r8
 800adaa:	4631      	mov	r1, r6
 800adac:	4628      	mov	r0, r5
 800adae:	47b8      	blx	r7
 800adb0:	3001      	adds	r0, #1
 800adb2:	d12a      	bne.n	800ae0a <_printf_float+0x21a>
 800adb4:	e76a      	b.n	800ac8c <_printf_float+0x9c>
 800adb6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800adba:	f240 80e2 	bls.w	800af82 <_printf_float+0x392>
 800adbe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800adc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800adc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adca:	d133      	bne.n	800ae34 <_printf_float+0x244>
 800adcc:	4a38      	ldr	r2, [pc, #224]	; (800aeb0 <_printf_float+0x2c0>)
 800adce:	2301      	movs	r3, #1
 800add0:	4631      	mov	r1, r6
 800add2:	4628      	mov	r0, r5
 800add4:	47b8      	blx	r7
 800add6:	3001      	adds	r0, #1
 800add8:	f43f af58 	beq.w	800ac8c <_printf_float+0x9c>
 800addc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	db02      	blt.n	800adea <_printf_float+0x1fa>
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	07d8      	lsls	r0, r3, #31
 800ade8:	d50f      	bpl.n	800ae0a <_printf_float+0x21a>
 800adea:	4653      	mov	r3, sl
 800adec:	465a      	mov	r2, fp
 800adee:	4631      	mov	r1, r6
 800adf0:	4628      	mov	r0, r5
 800adf2:	47b8      	blx	r7
 800adf4:	3001      	adds	r0, #1
 800adf6:	f43f af49 	beq.w	800ac8c <_printf_float+0x9c>
 800adfa:	f04f 0800 	mov.w	r8, #0
 800adfe:	f104 091a 	add.w	r9, r4, #26
 800ae02:	9b08      	ldr	r3, [sp, #32]
 800ae04:	3b01      	subs	r3, #1
 800ae06:	4543      	cmp	r3, r8
 800ae08:	dc09      	bgt.n	800ae1e <_printf_float+0x22e>
 800ae0a:	6823      	ldr	r3, [r4, #0]
 800ae0c:	079b      	lsls	r3, r3, #30
 800ae0e:	f100 8108 	bmi.w	800b022 <_printf_float+0x432>
 800ae12:	68e0      	ldr	r0, [r4, #12]
 800ae14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae16:	4298      	cmp	r0, r3
 800ae18:	bfb8      	it	lt
 800ae1a:	4618      	movlt	r0, r3
 800ae1c:	e738      	b.n	800ac90 <_printf_float+0xa0>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	464a      	mov	r2, r9
 800ae22:	4631      	mov	r1, r6
 800ae24:	4628      	mov	r0, r5
 800ae26:	47b8      	blx	r7
 800ae28:	3001      	adds	r0, #1
 800ae2a:	f43f af2f 	beq.w	800ac8c <_printf_float+0x9c>
 800ae2e:	f108 0801 	add.w	r8, r8, #1
 800ae32:	e7e6      	b.n	800ae02 <_printf_float+0x212>
 800ae34:	9b07      	ldr	r3, [sp, #28]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	dc3c      	bgt.n	800aeb4 <_printf_float+0x2c4>
 800ae3a:	4a1d      	ldr	r2, [pc, #116]	; (800aeb0 <_printf_float+0x2c0>)
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4628      	mov	r0, r5
 800ae42:	47b8      	blx	r7
 800ae44:	3001      	adds	r0, #1
 800ae46:	f43f af21 	beq.w	800ac8c <_printf_float+0x9c>
 800ae4a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	d102      	bne.n	800ae58 <_printf_float+0x268>
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	07d9      	lsls	r1, r3, #31
 800ae56:	d5d8      	bpl.n	800ae0a <_printf_float+0x21a>
 800ae58:	4653      	mov	r3, sl
 800ae5a:	465a      	mov	r2, fp
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4628      	mov	r0, r5
 800ae60:	47b8      	blx	r7
 800ae62:	3001      	adds	r0, #1
 800ae64:	f43f af12 	beq.w	800ac8c <_printf_float+0x9c>
 800ae68:	f04f 0900 	mov.w	r9, #0
 800ae6c:	f104 0a1a 	add.w	sl, r4, #26
 800ae70:	9b07      	ldr	r3, [sp, #28]
 800ae72:	425b      	negs	r3, r3
 800ae74:	454b      	cmp	r3, r9
 800ae76:	dc01      	bgt.n	800ae7c <_printf_float+0x28c>
 800ae78:	9b08      	ldr	r3, [sp, #32]
 800ae7a:	e795      	b.n	800ada8 <_printf_float+0x1b8>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	4652      	mov	r2, sl
 800ae80:	4631      	mov	r1, r6
 800ae82:	4628      	mov	r0, r5
 800ae84:	47b8      	blx	r7
 800ae86:	3001      	adds	r0, #1
 800ae88:	f43f af00 	beq.w	800ac8c <_printf_float+0x9c>
 800ae8c:	f109 0901 	add.w	r9, r9, #1
 800ae90:	e7ee      	b.n	800ae70 <_printf_float+0x280>
 800ae92:	bf00      	nop
 800ae94:	f3af 8000 	nop.w
 800ae98:	ffffffff 	.word	0xffffffff
 800ae9c:	7fefffff 	.word	0x7fefffff
 800aea0:	0800fe7c 	.word	0x0800fe7c
 800aea4:	0800fe80 	.word	0x0800fe80
 800aea8:	0800fe88 	.word	0x0800fe88
 800aeac:	0800fe84 	.word	0x0800fe84
 800aeb0:	0800fe8c 	.word	0x0800fe8c
 800aeb4:	9a08      	ldr	r2, [sp, #32]
 800aeb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	bfa8      	it	ge
 800aebc:	461a      	movge	r2, r3
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	4691      	mov	r9, r2
 800aec2:	dc38      	bgt.n	800af36 <_printf_float+0x346>
 800aec4:	2300      	movs	r3, #0
 800aec6:	9305      	str	r3, [sp, #20]
 800aec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aecc:	f104 021a 	add.w	r2, r4, #26
 800aed0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aed2:	9905      	ldr	r1, [sp, #20]
 800aed4:	9304      	str	r3, [sp, #16]
 800aed6:	eba3 0309 	sub.w	r3, r3, r9
 800aeda:	428b      	cmp	r3, r1
 800aedc:	dc33      	bgt.n	800af46 <_printf_float+0x356>
 800aede:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	db3c      	blt.n	800af60 <_printf_float+0x370>
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	07da      	lsls	r2, r3, #31
 800aeea:	d439      	bmi.n	800af60 <_printf_float+0x370>
 800aeec:	9b08      	ldr	r3, [sp, #32]
 800aeee:	9a04      	ldr	r2, [sp, #16]
 800aef0:	9907      	ldr	r1, [sp, #28]
 800aef2:	1a9a      	subs	r2, r3, r2
 800aef4:	eba3 0901 	sub.w	r9, r3, r1
 800aef8:	4591      	cmp	r9, r2
 800aefa:	bfa8      	it	ge
 800aefc:	4691      	movge	r9, r2
 800aefe:	f1b9 0f00 	cmp.w	r9, #0
 800af02:	dc35      	bgt.n	800af70 <_printf_float+0x380>
 800af04:	f04f 0800 	mov.w	r8, #0
 800af08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af0c:	f104 0a1a 	add.w	sl, r4, #26
 800af10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800af14:	1a9b      	subs	r3, r3, r2
 800af16:	eba3 0309 	sub.w	r3, r3, r9
 800af1a:	4543      	cmp	r3, r8
 800af1c:	f77f af75 	ble.w	800ae0a <_printf_float+0x21a>
 800af20:	2301      	movs	r3, #1
 800af22:	4652      	mov	r2, sl
 800af24:	4631      	mov	r1, r6
 800af26:	4628      	mov	r0, r5
 800af28:	47b8      	blx	r7
 800af2a:	3001      	adds	r0, #1
 800af2c:	f43f aeae 	beq.w	800ac8c <_printf_float+0x9c>
 800af30:	f108 0801 	add.w	r8, r8, #1
 800af34:	e7ec      	b.n	800af10 <_printf_float+0x320>
 800af36:	4613      	mov	r3, r2
 800af38:	4631      	mov	r1, r6
 800af3a:	4642      	mov	r2, r8
 800af3c:	4628      	mov	r0, r5
 800af3e:	47b8      	blx	r7
 800af40:	3001      	adds	r0, #1
 800af42:	d1bf      	bne.n	800aec4 <_printf_float+0x2d4>
 800af44:	e6a2      	b.n	800ac8c <_printf_float+0x9c>
 800af46:	2301      	movs	r3, #1
 800af48:	4631      	mov	r1, r6
 800af4a:	4628      	mov	r0, r5
 800af4c:	9204      	str	r2, [sp, #16]
 800af4e:	47b8      	blx	r7
 800af50:	3001      	adds	r0, #1
 800af52:	f43f ae9b 	beq.w	800ac8c <_printf_float+0x9c>
 800af56:	9b05      	ldr	r3, [sp, #20]
 800af58:	9a04      	ldr	r2, [sp, #16]
 800af5a:	3301      	adds	r3, #1
 800af5c:	9305      	str	r3, [sp, #20]
 800af5e:	e7b7      	b.n	800aed0 <_printf_float+0x2e0>
 800af60:	4653      	mov	r3, sl
 800af62:	465a      	mov	r2, fp
 800af64:	4631      	mov	r1, r6
 800af66:	4628      	mov	r0, r5
 800af68:	47b8      	blx	r7
 800af6a:	3001      	adds	r0, #1
 800af6c:	d1be      	bne.n	800aeec <_printf_float+0x2fc>
 800af6e:	e68d      	b.n	800ac8c <_printf_float+0x9c>
 800af70:	9a04      	ldr	r2, [sp, #16]
 800af72:	464b      	mov	r3, r9
 800af74:	4442      	add	r2, r8
 800af76:	4631      	mov	r1, r6
 800af78:	4628      	mov	r0, r5
 800af7a:	47b8      	blx	r7
 800af7c:	3001      	adds	r0, #1
 800af7e:	d1c1      	bne.n	800af04 <_printf_float+0x314>
 800af80:	e684      	b.n	800ac8c <_printf_float+0x9c>
 800af82:	9a08      	ldr	r2, [sp, #32]
 800af84:	2a01      	cmp	r2, #1
 800af86:	dc01      	bgt.n	800af8c <_printf_float+0x39c>
 800af88:	07db      	lsls	r3, r3, #31
 800af8a:	d537      	bpl.n	800affc <_printf_float+0x40c>
 800af8c:	2301      	movs	r3, #1
 800af8e:	4642      	mov	r2, r8
 800af90:	4631      	mov	r1, r6
 800af92:	4628      	mov	r0, r5
 800af94:	47b8      	blx	r7
 800af96:	3001      	adds	r0, #1
 800af98:	f43f ae78 	beq.w	800ac8c <_printf_float+0x9c>
 800af9c:	4653      	mov	r3, sl
 800af9e:	465a      	mov	r2, fp
 800afa0:	4631      	mov	r1, r6
 800afa2:	4628      	mov	r0, r5
 800afa4:	47b8      	blx	r7
 800afa6:	3001      	adds	r0, #1
 800afa8:	f43f ae70 	beq.w	800ac8c <_printf_float+0x9c>
 800afac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800afb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800afb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afb8:	d01b      	beq.n	800aff2 <_printf_float+0x402>
 800afba:	9b08      	ldr	r3, [sp, #32]
 800afbc:	f108 0201 	add.w	r2, r8, #1
 800afc0:	3b01      	subs	r3, #1
 800afc2:	4631      	mov	r1, r6
 800afc4:	4628      	mov	r0, r5
 800afc6:	47b8      	blx	r7
 800afc8:	3001      	adds	r0, #1
 800afca:	d10e      	bne.n	800afea <_printf_float+0x3fa>
 800afcc:	e65e      	b.n	800ac8c <_printf_float+0x9c>
 800afce:	2301      	movs	r3, #1
 800afd0:	464a      	mov	r2, r9
 800afd2:	4631      	mov	r1, r6
 800afd4:	4628      	mov	r0, r5
 800afd6:	47b8      	blx	r7
 800afd8:	3001      	adds	r0, #1
 800afda:	f43f ae57 	beq.w	800ac8c <_printf_float+0x9c>
 800afde:	f108 0801 	add.w	r8, r8, #1
 800afe2:	9b08      	ldr	r3, [sp, #32]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	4543      	cmp	r3, r8
 800afe8:	dcf1      	bgt.n	800afce <_printf_float+0x3de>
 800afea:	9b04      	ldr	r3, [sp, #16]
 800afec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aff0:	e6db      	b.n	800adaa <_printf_float+0x1ba>
 800aff2:	f04f 0800 	mov.w	r8, #0
 800aff6:	f104 091a 	add.w	r9, r4, #26
 800affa:	e7f2      	b.n	800afe2 <_printf_float+0x3f2>
 800affc:	2301      	movs	r3, #1
 800affe:	4642      	mov	r2, r8
 800b000:	e7df      	b.n	800afc2 <_printf_float+0x3d2>
 800b002:	2301      	movs	r3, #1
 800b004:	464a      	mov	r2, r9
 800b006:	4631      	mov	r1, r6
 800b008:	4628      	mov	r0, r5
 800b00a:	47b8      	blx	r7
 800b00c:	3001      	adds	r0, #1
 800b00e:	f43f ae3d 	beq.w	800ac8c <_printf_float+0x9c>
 800b012:	f108 0801 	add.w	r8, r8, #1
 800b016:	68e3      	ldr	r3, [r4, #12]
 800b018:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b01a:	1a5b      	subs	r3, r3, r1
 800b01c:	4543      	cmp	r3, r8
 800b01e:	dcf0      	bgt.n	800b002 <_printf_float+0x412>
 800b020:	e6f7      	b.n	800ae12 <_printf_float+0x222>
 800b022:	f04f 0800 	mov.w	r8, #0
 800b026:	f104 0919 	add.w	r9, r4, #25
 800b02a:	e7f4      	b.n	800b016 <_printf_float+0x426>

0800b02c <_printf_common>:
 800b02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b030:	4616      	mov	r6, r2
 800b032:	4699      	mov	r9, r3
 800b034:	688a      	ldr	r2, [r1, #8]
 800b036:	690b      	ldr	r3, [r1, #16]
 800b038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	bfb8      	it	lt
 800b040:	4613      	movlt	r3, r2
 800b042:	6033      	str	r3, [r6, #0]
 800b044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b048:	4607      	mov	r7, r0
 800b04a:	460c      	mov	r4, r1
 800b04c:	b10a      	cbz	r2, 800b052 <_printf_common+0x26>
 800b04e:	3301      	adds	r3, #1
 800b050:	6033      	str	r3, [r6, #0]
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	0699      	lsls	r1, r3, #26
 800b056:	bf42      	ittt	mi
 800b058:	6833      	ldrmi	r3, [r6, #0]
 800b05a:	3302      	addmi	r3, #2
 800b05c:	6033      	strmi	r3, [r6, #0]
 800b05e:	6825      	ldr	r5, [r4, #0]
 800b060:	f015 0506 	ands.w	r5, r5, #6
 800b064:	d106      	bne.n	800b074 <_printf_common+0x48>
 800b066:	f104 0a19 	add.w	sl, r4, #25
 800b06a:	68e3      	ldr	r3, [r4, #12]
 800b06c:	6832      	ldr	r2, [r6, #0]
 800b06e:	1a9b      	subs	r3, r3, r2
 800b070:	42ab      	cmp	r3, r5
 800b072:	dc26      	bgt.n	800b0c2 <_printf_common+0x96>
 800b074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b078:	1e13      	subs	r3, r2, #0
 800b07a:	6822      	ldr	r2, [r4, #0]
 800b07c:	bf18      	it	ne
 800b07e:	2301      	movne	r3, #1
 800b080:	0692      	lsls	r2, r2, #26
 800b082:	d42b      	bmi.n	800b0dc <_printf_common+0xb0>
 800b084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b088:	4649      	mov	r1, r9
 800b08a:	4638      	mov	r0, r7
 800b08c:	47c0      	blx	r8
 800b08e:	3001      	adds	r0, #1
 800b090:	d01e      	beq.n	800b0d0 <_printf_common+0xa4>
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	68e5      	ldr	r5, [r4, #12]
 800b096:	6832      	ldr	r2, [r6, #0]
 800b098:	f003 0306 	and.w	r3, r3, #6
 800b09c:	2b04      	cmp	r3, #4
 800b09e:	bf08      	it	eq
 800b0a0:	1aad      	subeq	r5, r5, r2
 800b0a2:	68a3      	ldr	r3, [r4, #8]
 800b0a4:	6922      	ldr	r2, [r4, #16]
 800b0a6:	bf0c      	ite	eq
 800b0a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0ac:	2500      	movne	r5, #0
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	bfc4      	itt	gt
 800b0b2:	1a9b      	subgt	r3, r3, r2
 800b0b4:	18ed      	addgt	r5, r5, r3
 800b0b6:	2600      	movs	r6, #0
 800b0b8:	341a      	adds	r4, #26
 800b0ba:	42b5      	cmp	r5, r6
 800b0bc:	d11a      	bne.n	800b0f4 <_printf_common+0xc8>
 800b0be:	2000      	movs	r0, #0
 800b0c0:	e008      	b.n	800b0d4 <_printf_common+0xa8>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	4652      	mov	r2, sl
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	47c0      	blx	r8
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d103      	bne.n	800b0d8 <_printf_common+0xac>
 800b0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d8:	3501      	adds	r5, #1
 800b0da:	e7c6      	b.n	800b06a <_printf_common+0x3e>
 800b0dc:	18e1      	adds	r1, r4, r3
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	2030      	movs	r0, #48	; 0x30
 800b0e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0e6:	4422      	add	r2, r4
 800b0e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0f0:	3302      	adds	r3, #2
 800b0f2:	e7c7      	b.n	800b084 <_printf_common+0x58>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	47c0      	blx	r8
 800b0fe:	3001      	adds	r0, #1
 800b100:	d0e6      	beq.n	800b0d0 <_printf_common+0xa4>
 800b102:	3601      	adds	r6, #1
 800b104:	e7d9      	b.n	800b0ba <_printf_common+0x8e>
	...

0800b108 <_printf_i>:
 800b108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b10c:	7e0f      	ldrb	r7, [r1, #24]
 800b10e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b110:	2f78      	cmp	r7, #120	; 0x78
 800b112:	4691      	mov	r9, r2
 800b114:	4680      	mov	r8, r0
 800b116:	460c      	mov	r4, r1
 800b118:	469a      	mov	sl, r3
 800b11a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b11e:	d807      	bhi.n	800b130 <_printf_i+0x28>
 800b120:	2f62      	cmp	r7, #98	; 0x62
 800b122:	d80a      	bhi.n	800b13a <_printf_i+0x32>
 800b124:	2f00      	cmp	r7, #0
 800b126:	f000 80d8 	beq.w	800b2da <_printf_i+0x1d2>
 800b12a:	2f58      	cmp	r7, #88	; 0x58
 800b12c:	f000 80a3 	beq.w	800b276 <_printf_i+0x16e>
 800b130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b138:	e03a      	b.n	800b1b0 <_printf_i+0xa8>
 800b13a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b13e:	2b15      	cmp	r3, #21
 800b140:	d8f6      	bhi.n	800b130 <_printf_i+0x28>
 800b142:	a101      	add	r1, pc, #4	; (adr r1, 800b148 <_printf_i+0x40>)
 800b144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b148:	0800b1a1 	.word	0x0800b1a1
 800b14c:	0800b1b5 	.word	0x0800b1b5
 800b150:	0800b131 	.word	0x0800b131
 800b154:	0800b131 	.word	0x0800b131
 800b158:	0800b131 	.word	0x0800b131
 800b15c:	0800b131 	.word	0x0800b131
 800b160:	0800b1b5 	.word	0x0800b1b5
 800b164:	0800b131 	.word	0x0800b131
 800b168:	0800b131 	.word	0x0800b131
 800b16c:	0800b131 	.word	0x0800b131
 800b170:	0800b131 	.word	0x0800b131
 800b174:	0800b2c1 	.word	0x0800b2c1
 800b178:	0800b1e5 	.word	0x0800b1e5
 800b17c:	0800b2a3 	.word	0x0800b2a3
 800b180:	0800b131 	.word	0x0800b131
 800b184:	0800b131 	.word	0x0800b131
 800b188:	0800b2e3 	.word	0x0800b2e3
 800b18c:	0800b131 	.word	0x0800b131
 800b190:	0800b1e5 	.word	0x0800b1e5
 800b194:	0800b131 	.word	0x0800b131
 800b198:	0800b131 	.word	0x0800b131
 800b19c:	0800b2ab 	.word	0x0800b2ab
 800b1a0:	682b      	ldr	r3, [r5, #0]
 800b1a2:	1d1a      	adds	r2, r3, #4
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	602a      	str	r2, [r5, #0]
 800b1a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e0a3      	b.n	800b2fc <_printf_i+0x1f4>
 800b1b4:	6820      	ldr	r0, [r4, #0]
 800b1b6:	6829      	ldr	r1, [r5, #0]
 800b1b8:	0606      	lsls	r6, r0, #24
 800b1ba:	f101 0304 	add.w	r3, r1, #4
 800b1be:	d50a      	bpl.n	800b1d6 <_printf_i+0xce>
 800b1c0:	680e      	ldr	r6, [r1, #0]
 800b1c2:	602b      	str	r3, [r5, #0]
 800b1c4:	2e00      	cmp	r6, #0
 800b1c6:	da03      	bge.n	800b1d0 <_printf_i+0xc8>
 800b1c8:	232d      	movs	r3, #45	; 0x2d
 800b1ca:	4276      	negs	r6, r6
 800b1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1d0:	485e      	ldr	r0, [pc, #376]	; (800b34c <_printf_i+0x244>)
 800b1d2:	230a      	movs	r3, #10
 800b1d4:	e019      	b.n	800b20a <_printf_i+0x102>
 800b1d6:	680e      	ldr	r6, [r1, #0]
 800b1d8:	602b      	str	r3, [r5, #0]
 800b1da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1de:	bf18      	it	ne
 800b1e0:	b236      	sxthne	r6, r6
 800b1e2:	e7ef      	b.n	800b1c4 <_printf_i+0xbc>
 800b1e4:	682b      	ldr	r3, [r5, #0]
 800b1e6:	6820      	ldr	r0, [r4, #0]
 800b1e8:	1d19      	adds	r1, r3, #4
 800b1ea:	6029      	str	r1, [r5, #0]
 800b1ec:	0601      	lsls	r1, r0, #24
 800b1ee:	d501      	bpl.n	800b1f4 <_printf_i+0xec>
 800b1f0:	681e      	ldr	r6, [r3, #0]
 800b1f2:	e002      	b.n	800b1fa <_printf_i+0xf2>
 800b1f4:	0646      	lsls	r6, r0, #25
 800b1f6:	d5fb      	bpl.n	800b1f0 <_printf_i+0xe8>
 800b1f8:	881e      	ldrh	r6, [r3, #0]
 800b1fa:	4854      	ldr	r0, [pc, #336]	; (800b34c <_printf_i+0x244>)
 800b1fc:	2f6f      	cmp	r7, #111	; 0x6f
 800b1fe:	bf0c      	ite	eq
 800b200:	2308      	moveq	r3, #8
 800b202:	230a      	movne	r3, #10
 800b204:	2100      	movs	r1, #0
 800b206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b20a:	6865      	ldr	r5, [r4, #4]
 800b20c:	60a5      	str	r5, [r4, #8]
 800b20e:	2d00      	cmp	r5, #0
 800b210:	bfa2      	ittt	ge
 800b212:	6821      	ldrge	r1, [r4, #0]
 800b214:	f021 0104 	bicge.w	r1, r1, #4
 800b218:	6021      	strge	r1, [r4, #0]
 800b21a:	b90e      	cbnz	r6, 800b220 <_printf_i+0x118>
 800b21c:	2d00      	cmp	r5, #0
 800b21e:	d04d      	beq.n	800b2bc <_printf_i+0x1b4>
 800b220:	4615      	mov	r5, r2
 800b222:	fbb6 f1f3 	udiv	r1, r6, r3
 800b226:	fb03 6711 	mls	r7, r3, r1, r6
 800b22a:	5dc7      	ldrb	r7, [r0, r7]
 800b22c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b230:	4637      	mov	r7, r6
 800b232:	42bb      	cmp	r3, r7
 800b234:	460e      	mov	r6, r1
 800b236:	d9f4      	bls.n	800b222 <_printf_i+0x11a>
 800b238:	2b08      	cmp	r3, #8
 800b23a:	d10b      	bne.n	800b254 <_printf_i+0x14c>
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	07de      	lsls	r6, r3, #31
 800b240:	d508      	bpl.n	800b254 <_printf_i+0x14c>
 800b242:	6923      	ldr	r3, [r4, #16]
 800b244:	6861      	ldr	r1, [r4, #4]
 800b246:	4299      	cmp	r1, r3
 800b248:	bfde      	ittt	le
 800b24a:	2330      	movle	r3, #48	; 0x30
 800b24c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b250:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b254:	1b52      	subs	r2, r2, r5
 800b256:	6122      	str	r2, [r4, #16]
 800b258:	f8cd a000 	str.w	sl, [sp]
 800b25c:	464b      	mov	r3, r9
 800b25e:	aa03      	add	r2, sp, #12
 800b260:	4621      	mov	r1, r4
 800b262:	4640      	mov	r0, r8
 800b264:	f7ff fee2 	bl	800b02c <_printf_common>
 800b268:	3001      	adds	r0, #1
 800b26a:	d14c      	bne.n	800b306 <_printf_i+0x1fe>
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295
 800b270:	b004      	add	sp, #16
 800b272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b276:	4835      	ldr	r0, [pc, #212]	; (800b34c <_printf_i+0x244>)
 800b278:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b27c:	6829      	ldr	r1, [r5, #0]
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	f851 6b04 	ldr.w	r6, [r1], #4
 800b284:	6029      	str	r1, [r5, #0]
 800b286:	061d      	lsls	r5, r3, #24
 800b288:	d514      	bpl.n	800b2b4 <_printf_i+0x1ac>
 800b28a:	07df      	lsls	r7, r3, #31
 800b28c:	bf44      	itt	mi
 800b28e:	f043 0320 	orrmi.w	r3, r3, #32
 800b292:	6023      	strmi	r3, [r4, #0]
 800b294:	b91e      	cbnz	r6, 800b29e <_printf_i+0x196>
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	f023 0320 	bic.w	r3, r3, #32
 800b29c:	6023      	str	r3, [r4, #0]
 800b29e:	2310      	movs	r3, #16
 800b2a0:	e7b0      	b.n	800b204 <_printf_i+0xfc>
 800b2a2:	6823      	ldr	r3, [r4, #0]
 800b2a4:	f043 0320 	orr.w	r3, r3, #32
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	2378      	movs	r3, #120	; 0x78
 800b2ac:	4828      	ldr	r0, [pc, #160]	; (800b350 <_printf_i+0x248>)
 800b2ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2b2:	e7e3      	b.n	800b27c <_printf_i+0x174>
 800b2b4:	0659      	lsls	r1, r3, #25
 800b2b6:	bf48      	it	mi
 800b2b8:	b2b6      	uxthmi	r6, r6
 800b2ba:	e7e6      	b.n	800b28a <_printf_i+0x182>
 800b2bc:	4615      	mov	r5, r2
 800b2be:	e7bb      	b.n	800b238 <_printf_i+0x130>
 800b2c0:	682b      	ldr	r3, [r5, #0]
 800b2c2:	6826      	ldr	r6, [r4, #0]
 800b2c4:	6961      	ldr	r1, [r4, #20]
 800b2c6:	1d18      	adds	r0, r3, #4
 800b2c8:	6028      	str	r0, [r5, #0]
 800b2ca:	0635      	lsls	r5, r6, #24
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	d501      	bpl.n	800b2d4 <_printf_i+0x1cc>
 800b2d0:	6019      	str	r1, [r3, #0]
 800b2d2:	e002      	b.n	800b2da <_printf_i+0x1d2>
 800b2d4:	0670      	lsls	r0, r6, #25
 800b2d6:	d5fb      	bpl.n	800b2d0 <_printf_i+0x1c8>
 800b2d8:	8019      	strh	r1, [r3, #0]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	6123      	str	r3, [r4, #16]
 800b2de:	4615      	mov	r5, r2
 800b2e0:	e7ba      	b.n	800b258 <_printf_i+0x150>
 800b2e2:	682b      	ldr	r3, [r5, #0]
 800b2e4:	1d1a      	adds	r2, r3, #4
 800b2e6:	602a      	str	r2, [r5, #0]
 800b2e8:	681d      	ldr	r5, [r3, #0]
 800b2ea:	6862      	ldr	r2, [r4, #4]
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f7f4 ffae 	bl	8000250 <memchr>
 800b2f4:	b108      	cbz	r0, 800b2fa <_printf_i+0x1f2>
 800b2f6:	1b40      	subs	r0, r0, r5
 800b2f8:	6060      	str	r0, [r4, #4]
 800b2fa:	6863      	ldr	r3, [r4, #4]
 800b2fc:	6123      	str	r3, [r4, #16]
 800b2fe:	2300      	movs	r3, #0
 800b300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b304:	e7a8      	b.n	800b258 <_printf_i+0x150>
 800b306:	6923      	ldr	r3, [r4, #16]
 800b308:	462a      	mov	r2, r5
 800b30a:	4649      	mov	r1, r9
 800b30c:	4640      	mov	r0, r8
 800b30e:	47d0      	blx	sl
 800b310:	3001      	adds	r0, #1
 800b312:	d0ab      	beq.n	800b26c <_printf_i+0x164>
 800b314:	6823      	ldr	r3, [r4, #0]
 800b316:	079b      	lsls	r3, r3, #30
 800b318:	d413      	bmi.n	800b342 <_printf_i+0x23a>
 800b31a:	68e0      	ldr	r0, [r4, #12]
 800b31c:	9b03      	ldr	r3, [sp, #12]
 800b31e:	4298      	cmp	r0, r3
 800b320:	bfb8      	it	lt
 800b322:	4618      	movlt	r0, r3
 800b324:	e7a4      	b.n	800b270 <_printf_i+0x168>
 800b326:	2301      	movs	r3, #1
 800b328:	4632      	mov	r2, r6
 800b32a:	4649      	mov	r1, r9
 800b32c:	4640      	mov	r0, r8
 800b32e:	47d0      	blx	sl
 800b330:	3001      	adds	r0, #1
 800b332:	d09b      	beq.n	800b26c <_printf_i+0x164>
 800b334:	3501      	adds	r5, #1
 800b336:	68e3      	ldr	r3, [r4, #12]
 800b338:	9903      	ldr	r1, [sp, #12]
 800b33a:	1a5b      	subs	r3, r3, r1
 800b33c:	42ab      	cmp	r3, r5
 800b33e:	dcf2      	bgt.n	800b326 <_printf_i+0x21e>
 800b340:	e7eb      	b.n	800b31a <_printf_i+0x212>
 800b342:	2500      	movs	r5, #0
 800b344:	f104 0619 	add.w	r6, r4, #25
 800b348:	e7f5      	b.n	800b336 <_printf_i+0x22e>
 800b34a:	bf00      	nop
 800b34c:	0800fe8e 	.word	0x0800fe8e
 800b350:	0800fe9f 	.word	0x0800fe9f

0800b354 <_scanf_float>:
 800b354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b358:	b087      	sub	sp, #28
 800b35a:	4617      	mov	r7, r2
 800b35c:	9303      	str	r3, [sp, #12]
 800b35e:	688b      	ldr	r3, [r1, #8]
 800b360:	1e5a      	subs	r2, r3, #1
 800b362:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b366:	bf83      	ittte	hi
 800b368:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b36c:	195b      	addhi	r3, r3, r5
 800b36e:	9302      	strhi	r3, [sp, #8]
 800b370:	2300      	movls	r3, #0
 800b372:	bf86      	itte	hi
 800b374:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b378:	608b      	strhi	r3, [r1, #8]
 800b37a:	9302      	strls	r3, [sp, #8]
 800b37c:	680b      	ldr	r3, [r1, #0]
 800b37e:	468b      	mov	fp, r1
 800b380:	2500      	movs	r5, #0
 800b382:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b386:	f84b 3b1c 	str.w	r3, [fp], #28
 800b38a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b38e:	4680      	mov	r8, r0
 800b390:	460c      	mov	r4, r1
 800b392:	465e      	mov	r6, fp
 800b394:	46aa      	mov	sl, r5
 800b396:	46a9      	mov	r9, r5
 800b398:	9501      	str	r5, [sp, #4]
 800b39a:	68a2      	ldr	r2, [r4, #8]
 800b39c:	b152      	cbz	r2, 800b3b4 <_scanf_float+0x60>
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	2b4e      	cmp	r3, #78	; 0x4e
 800b3a4:	d864      	bhi.n	800b470 <_scanf_float+0x11c>
 800b3a6:	2b40      	cmp	r3, #64	; 0x40
 800b3a8:	d83c      	bhi.n	800b424 <_scanf_float+0xd0>
 800b3aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b3ae:	b2c8      	uxtb	r0, r1
 800b3b0:	280e      	cmp	r0, #14
 800b3b2:	d93a      	bls.n	800b42a <_scanf_float+0xd6>
 800b3b4:	f1b9 0f00 	cmp.w	r9, #0
 800b3b8:	d003      	beq.n	800b3c2 <_scanf_float+0x6e>
 800b3ba:	6823      	ldr	r3, [r4, #0]
 800b3bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3c0:	6023      	str	r3, [r4, #0]
 800b3c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3c6:	f1ba 0f01 	cmp.w	sl, #1
 800b3ca:	f200 8113 	bhi.w	800b5f4 <_scanf_float+0x2a0>
 800b3ce:	455e      	cmp	r6, fp
 800b3d0:	f200 8105 	bhi.w	800b5de <_scanf_float+0x28a>
 800b3d4:	2501      	movs	r5, #1
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	b007      	add	sp, #28
 800b3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b3e2:	2a0d      	cmp	r2, #13
 800b3e4:	d8e6      	bhi.n	800b3b4 <_scanf_float+0x60>
 800b3e6:	a101      	add	r1, pc, #4	; (adr r1, 800b3ec <_scanf_float+0x98>)
 800b3e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b3ec:	0800b52b 	.word	0x0800b52b
 800b3f0:	0800b3b5 	.word	0x0800b3b5
 800b3f4:	0800b3b5 	.word	0x0800b3b5
 800b3f8:	0800b3b5 	.word	0x0800b3b5
 800b3fc:	0800b58b 	.word	0x0800b58b
 800b400:	0800b563 	.word	0x0800b563
 800b404:	0800b3b5 	.word	0x0800b3b5
 800b408:	0800b3b5 	.word	0x0800b3b5
 800b40c:	0800b539 	.word	0x0800b539
 800b410:	0800b3b5 	.word	0x0800b3b5
 800b414:	0800b3b5 	.word	0x0800b3b5
 800b418:	0800b3b5 	.word	0x0800b3b5
 800b41c:	0800b3b5 	.word	0x0800b3b5
 800b420:	0800b4f1 	.word	0x0800b4f1
 800b424:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b428:	e7db      	b.n	800b3e2 <_scanf_float+0x8e>
 800b42a:	290e      	cmp	r1, #14
 800b42c:	d8c2      	bhi.n	800b3b4 <_scanf_float+0x60>
 800b42e:	a001      	add	r0, pc, #4	; (adr r0, 800b434 <_scanf_float+0xe0>)
 800b430:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b434:	0800b4e3 	.word	0x0800b4e3
 800b438:	0800b3b5 	.word	0x0800b3b5
 800b43c:	0800b4e3 	.word	0x0800b4e3
 800b440:	0800b577 	.word	0x0800b577
 800b444:	0800b3b5 	.word	0x0800b3b5
 800b448:	0800b491 	.word	0x0800b491
 800b44c:	0800b4cd 	.word	0x0800b4cd
 800b450:	0800b4cd 	.word	0x0800b4cd
 800b454:	0800b4cd 	.word	0x0800b4cd
 800b458:	0800b4cd 	.word	0x0800b4cd
 800b45c:	0800b4cd 	.word	0x0800b4cd
 800b460:	0800b4cd 	.word	0x0800b4cd
 800b464:	0800b4cd 	.word	0x0800b4cd
 800b468:	0800b4cd 	.word	0x0800b4cd
 800b46c:	0800b4cd 	.word	0x0800b4cd
 800b470:	2b6e      	cmp	r3, #110	; 0x6e
 800b472:	d809      	bhi.n	800b488 <_scanf_float+0x134>
 800b474:	2b60      	cmp	r3, #96	; 0x60
 800b476:	d8b2      	bhi.n	800b3de <_scanf_float+0x8a>
 800b478:	2b54      	cmp	r3, #84	; 0x54
 800b47a:	d077      	beq.n	800b56c <_scanf_float+0x218>
 800b47c:	2b59      	cmp	r3, #89	; 0x59
 800b47e:	d199      	bne.n	800b3b4 <_scanf_float+0x60>
 800b480:	2d07      	cmp	r5, #7
 800b482:	d197      	bne.n	800b3b4 <_scanf_float+0x60>
 800b484:	2508      	movs	r5, #8
 800b486:	e029      	b.n	800b4dc <_scanf_float+0x188>
 800b488:	2b74      	cmp	r3, #116	; 0x74
 800b48a:	d06f      	beq.n	800b56c <_scanf_float+0x218>
 800b48c:	2b79      	cmp	r3, #121	; 0x79
 800b48e:	e7f6      	b.n	800b47e <_scanf_float+0x12a>
 800b490:	6821      	ldr	r1, [r4, #0]
 800b492:	05c8      	lsls	r0, r1, #23
 800b494:	d51a      	bpl.n	800b4cc <_scanf_float+0x178>
 800b496:	9b02      	ldr	r3, [sp, #8]
 800b498:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b49c:	6021      	str	r1, [r4, #0]
 800b49e:	f109 0901 	add.w	r9, r9, #1
 800b4a2:	b11b      	cbz	r3, 800b4ac <_scanf_float+0x158>
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	3201      	adds	r2, #1
 800b4a8:	9302      	str	r3, [sp, #8]
 800b4aa:	60a2      	str	r2, [r4, #8]
 800b4ac:	68a3      	ldr	r3, [r4, #8]
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	60a3      	str	r3, [r4, #8]
 800b4b2:	6923      	ldr	r3, [r4, #16]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	6123      	str	r3, [r4, #16]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	3b01      	subs	r3, #1
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	607b      	str	r3, [r7, #4]
 800b4c0:	f340 8084 	ble.w	800b5cc <_scanf_float+0x278>
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	603b      	str	r3, [r7, #0]
 800b4ca:	e766      	b.n	800b39a <_scanf_float+0x46>
 800b4cc:	eb1a 0f05 	cmn.w	sl, r5
 800b4d0:	f47f af70 	bne.w	800b3b4 <_scanf_float+0x60>
 800b4d4:	6822      	ldr	r2, [r4, #0]
 800b4d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b4da:	6022      	str	r2, [r4, #0]
 800b4dc:	f806 3b01 	strb.w	r3, [r6], #1
 800b4e0:	e7e4      	b.n	800b4ac <_scanf_float+0x158>
 800b4e2:	6822      	ldr	r2, [r4, #0]
 800b4e4:	0610      	lsls	r0, r2, #24
 800b4e6:	f57f af65 	bpl.w	800b3b4 <_scanf_float+0x60>
 800b4ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4ee:	e7f4      	b.n	800b4da <_scanf_float+0x186>
 800b4f0:	f1ba 0f00 	cmp.w	sl, #0
 800b4f4:	d10e      	bne.n	800b514 <_scanf_float+0x1c0>
 800b4f6:	f1b9 0f00 	cmp.w	r9, #0
 800b4fa:	d10e      	bne.n	800b51a <_scanf_float+0x1c6>
 800b4fc:	6822      	ldr	r2, [r4, #0]
 800b4fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b502:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b506:	d108      	bne.n	800b51a <_scanf_float+0x1c6>
 800b508:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b50c:	6022      	str	r2, [r4, #0]
 800b50e:	f04f 0a01 	mov.w	sl, #1
 800b512:	e7e3      	b.n	800b4dc <_scanf_float+0x188>
 800b514:	f1ba 0f02 	cmp.w	sl, #2
 800b518:	d055      	beq.n	800b5c6 <_scanf_float+0x272>
 800b51a:	2d01      	cmp	r5, #1
 800b51c:	d002      	beq.n	800b524 <_scanf_float+0x1d0>
 800b51e:	2d04      	cmp	r5, #4
 800b520:	f47f af48 	bne.w	800b3b4 <_scanf_float+0x60>
 800b524:	3501      	adds	r5, #1
 800b526:	b2ed      	uxtb	r5, r5
 800b528:	e7d8      	b.n	800b4dc <_scanf_float+0x188>
 800b52a:	f1ba 0f01 	cmp.w	sl, #1
 800b52e:	f47f af41 	bne.w	800b3b4 <_scanf_float+0x60>
 800b532:	f04f 0a02 	mov.w	sl, #2
 800b536:	e7d1      	b.n	800b4dc <_scanf_float+0x188>
 800b538:	b97d      	cbnz	r5, 800b55a <_scanf_float+0x206>
 800b53a:	f1b9 0f00 	cmp.w	r9, #0
 800b53e:	f47f af3c 	bne.w	800b3ba <_scanf_float+0x66>
 800b542:	6822      	ldr	r2, [r4, #0]
 800b544:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b548:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b54c:	f47f af39 	bne.w	800b3c2 <_scanf_float+0x6e>
 800b550:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b554:	6022      	str	r2, [r4, #0]
 800b556:	2501      	movs	r5, #1
 800b558:	e7c0      	b.n	800b4dc <_scanf_float+0x188>
 800b55a:	2d03      	cmp	r5, #3
 800b55c:	d0e2      	beq.n	800b524 <_scanf_float+0x1d0>
 800b55e:	2d05      	cmp	r5, #5
 800b560:	e7de      	b.n	800b520 <_scanf_float+0x1cc>
 800b562:	2d02      	cmp	r5, #2
 800b564:	f47f af26 	bne.w	800b3b4 <_scanf_float+0x60>
 800b568:	2503      	movs	r5, #3
 800b56a:	e7b7      	b.n	800b4dc <_scanf_float+0x188>
 800b56c:	2d06      	cmp	r5, #6
 800b56e:	f47f af21 	bne.w	800b3b4 <_scanf_float+0x60>
 800b572:	2507      	movs	r5, #7
 800b574:	e7b2      	b.n	800b4dc <_scanf_float+0x188>
 800b576:	6822      	ldr	r2, [r4, #0]
 800b578:	0591      	lsls	r1, r2, #22
 800b57a:	f57f af1b 	bpl.w	800b3b4 <_scanf_float+0x60>
 800b57e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b582:	6022      	str	r2, [r4, #0]
 800b584:	f8cd 9004 	str.w	r9, [sp, #4]
 800b588:	e7a8      	b.n	800b4dc <_scanf_float+0x188>
 800b58a:	6822      	ldr	r2, [r4, #0]
 800b58c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b590:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b594:	d006      	beq.n	800b5a4 <_scanf_float+0x250>
 800b596:	0550      	lsls	r0, r2, #21
 800b598:	f57f af0c 	bpl.w	800b3b4 <_scanf_float+0x60>
 800b59c:	f1b9 0f00 	cmp.w	r9, #0
 800b5a0:	f43f af0f 	beq.w	800b3c2 <_scanf_float+0x6e>
 800b5a4:	0591      	lsls	r1, r2, #22
 800b5a6:	bf58      	it	pl
 800b5a8:	9901      	ldrpl	r1, [sp, #4]
 800b5aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b5ae:	bf58      	it	pl
 800b5b0:	eba9 0101 	subpl.w	r1, r9, r1
 800b5b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b5b8:	bf58      	it	pl
 800b5ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b5be:	6022      	str	r2, [r4, #0]
 800b5c0:	f04f 0900 	mov.w	r9, #0
 800b5c4:	e78a      	b.n	800b4dc <_scanf_float+0x188>
 800b5c6:	f04f 0a03 	mov.w	sl, #3
 800b5ca:	e787      	b.n	800b4dc <_scanf_float+0x188>
 800b5cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b5d0:	4639      	mov	r1, r7
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	4798      	blx	r3
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	f43f aedf 	beq.w	800b39a <_scanf_float+0x46>
 800b5dc:	e6ea      	b.n	800b3b4 <_scanf_float+0x60>
 800b5de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b5e6:	463a      	mov	r2, r7
 800b5e8:	4640      	mov	r0, r8
 800b5ea:	4798      	blx	r3
 800b5ec:	6923      	ldr	r3, [r4, #16]
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	6123      	str	r3, [r4, #16]
 800b5f2:	e6ec      	b.n	800b3ce <_scanf_float+0x7a>
 800b5f4:	1e6b      	subs	r3, r5, #1
 800b5f6:	2b06      	cmp	r3, #6
 800b5f8:	d825      	bhi.n	800b646 <_scanf_float+0x2f2>
 800b5fa:	2d02      	cmp	r5, #2
 800b5fc:	d836      	bhi.n	800b66c <_scanf_float+0x318>
 800b5fe:	455e      	cmp	r6, fp
 800b600:	f67f aee8 	bls.w	800b3d4 <_scanf_float+0x80>
 800b604:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b608:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b60c:	463a      	mov	r2, r7
 800b60e:	4640      	mov	r0, r8
 800b610:	4798      	blx	r3
 800b612:	6923      	ldr	r3, [r4, #16]
 800b614:	3b01      	subs	r3, #1
 800b616:	6123      	str	r3, [r4, #16]
 800b618:	e7f1      	b.n	800b5fe <_scanf_float+0x2aa>
 800b61a:	9802      	ldr	r0, [sp, #8]
 800b61c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b620:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b624:	9002      	str	r0, [sp, #8]
 800b626:	463a      	mov	r2, r7
 800b628:	4640      	mov	r0, r8
 800b62a:	4798      	blx	r3
 800b62c:	6923      	ldr	r3, [r4, #16]
 800b62e:	3b01      	subs	r3, #1
 800b630:	6123      	str	r3, [r4, #16]
 800b632:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b636:	fa5f fa8a 	uxtb.w	sl, sl
 800b63a:	f1ba 0f02 	cmp.w	sl, #2
 800b63e:	d1ec      	bne.n	800b61a <_scanf_float+0x2c6>
 800b640:	3d03      	subs	r5, #3
 800b642:	b2ed      	uxtb	r5, r5
 800b644:	1b76      	subs	r6, r6, r5
 800b646:	6823      	ldr	r3, [r4, #0]
 800b648:	05da      	lsls	r2, r3, #23
 800b64a:	d52f      	bpl.n	800b6ac <_scanf_float+0x358>
 800b64c:	055b      	lsls	r3, r3, #21
 800b64e:	d510      	bpl.n	800b672 <_scanf_float+0x31e>
 800b650:	455e      	cmp	r6, fp
 800b652:	f67f aebf 	bls.w	800b3d4 <_scanf_float+0x80>
 800b656:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b65a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b65e:	463a      	mov	r2, r7
 800b660:	4640      	mov	r0, r8
 800b662:	4798      	blx	r3
 800b664:	6923      	ldr	r3, [r4, #16]
 800b666:	3b01      	subs	r3, #1
 800b668:	6123      	str	r3, [r4, #16]
 800b66a:	e7f1      	b.n	800b650 <_scanf_float+0x2fc>
 800b66c:	46aa      	mov	sl, r5
 800b66e:	9602      	str	r6, [sp, #8]
 800b670:	e7df      	b.n	800b632 <_scanf_float+0x2de>
 800b672:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b676:	6923      	ldr	r3, [r4, #16]
 800b678:	2965      	cmp	r1, #101	; 0x65
 800b67a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b67e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b682:	6123      	str	r3, [r4, #16]
 800b684:	d00c      	beq.n	800b6a0 <_scanf_float+0x34c>
 800b686:	2945      	cmp	r1, #69	; 0x45
 800b688:	d00a      	beq.n	800b6a0 <_scanf_float+0x34c>
 800b68a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b68e:	463a      	mov	r2, r7
 800b690:	4640      	mov	r0, r8
 800b692:	4798      	blx	r3
 800b694:	6923      	ldr	r3, [r4, #16]
 800b696:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b69a:	3b01      	subs	r3, #1
 800b69c:	1eb5      	subs	r5, r6, #2
 800b69e:	6123      	str	r3, [r4, #16]
 800b6a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b6a4:	463a      	mov	r2, r7
 800b6a6:	4640      	mov	r0, r8
 800b6a8:	4798      	blx	r3
 800b6aa:	462e      	mov	r6, r5
 800b6ac:	6825      	ldr	r5, [r4, #0]
 800b6ae:	f015 0510 	ands.w	r5, r5, #16
 800b6b2:	d14e      	bne.n	800b752 <_scanf_float+0x3fe>
 800b6b4:	7035      	strb	r5, [r6, #0]
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b6bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6c0:	d119      	bne.n	800b6f6 <_scanf_float+0x3a2>
 800b6c2:	9b01      	ldr	r3, [sp, #4]
 800b6c4:	454b      	cmp	r3, r9
 800b6c6:	eba3 0209 	sub.w	r2, r3, r9
 800b6ca:	d121      	bne.n	800b710 <_scanf_float+0x3bc>
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	4659      	mov	r1, fp
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	f000 ff17 	bl	800c504 <_strtod_r>
 800b6d6:	6822      	ldr	r2, [r4, #0]
 800b6d8:	9b03      	ldr	r3, [sp, #12]
 800b6da:	f012 0f02 	tst.w	r2, #2
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	d021      	beq.n	800b726 <_scanf_float+0x3d2>
 800b6e2:	9903      	ldr	r1, [sp, #12]
 800b6e4:	1d1a      	adds	r2, r3, #4
 800b6e6:	600a      	str	r2, [r1, #0]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	ed83 0b00 	vstr	d0, [r3]
 800b6ee:	68e3      	ldr	r3, [r4, #12]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	60e3      	str	r3, [r4, #12]
 800b6f4:	e66f      	b.n	800b3d6 <_scanf_float+0x82>
 800b6f6:	9b04      	ldr	r3, [sp, #16]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d0e7      	beq.n	800b6cc <_scanf_float+0x378>
 800b6fc:	9905      	ldr	r1, [sp, #20]
 800b6fe:	230a      	movs	r3, #10
 800b700:	462a      	mov	r2, r5
 800b702:	3101      	adds	r1, #1
 800b704:	4640      	mov	r0, r8
 800b706:	f000 ff85 	bl	800c614 <_strtol_r>
 800b70a:	9b04      	ldr	r3, [sp, #16]
 800b70c:	9e05      	ldr	r6, [sp, #20]
 800b70e:	1ac2      	subs	r2, r0, r3
 800b710:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b714:	429e      	cmp	r6, r3
 800b716:	bf28      	it	cs
 800b718:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b71c:	490e      	ldr	r1, [pc, #56]	; (800b758 <_scanf_float+0x404>)
 800b71e:	4630      	mov	r0, r6
 800b720:	f000 f900 	bl	800b924 <siprintf>
 800b724:	e7d2      	b.n	800b6cc <_scanf_float+0x378>
 800b726:	9903      	ldr	r1, [sp, #12]
 800b728:	f012 0f04 	tst.w	r2, #4
 800b72c:	f103 0204 	add.w	r2, r3, #4
 800b730:	600a      	str	r2, [r1, #0]
 800b732:	d1d9      	bne.n	800b6e8 <_scanf_float+0x394>
 800b734:	eeb4 0b40 	vcmp.f64	d0, d0
 800b738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b73c:	681e      	ldr	r6, [r3, #0]
 800b73e:	d705      	bvc.n	800b74c <_scanf_float+0x3f8>
 800b740:	4806      	ldr	r0, [pc, #24]	; (800b75c <_scanf_float+0x408>)
 800b742:	f000 f8e9 	bl	800b918 <nanf>
 800b746:	ed86 0a00 	vstr	s0, [r6]
 800b74a:	e7d0      	b.n	800b6ee <_scanf_float+0x39a>
 800b74c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b750:	e7f9      	b.n	800b746 <_scanf_float+0x3f2>
 800b752:	2500      	movs	r5, #0
 800b754:	e63f      	b.n	800b3d6 <_scanf_float+0x82>
 800b756:	bf00      	nop
 800b758:	0800feb0 	.word	0x0800feb0
 800b75c:	0800ffb3 	.word	0x0800ffb3

0800b760 <iprintf>:
 800b760:	b40f      	push	{r0, r1, r2, r3}
 800b762:	4b0a      	ldr	r3, [pc, #40]	; (800b78c <iprintf+0x2c>)
 800b764:	b513      	push	{r0, r1, r4, lr}
 800b766:	681c      	ldr	r4, [r3, #0]
 800b768:	b124      	cbz	r4, 800b774 <iprintf+0x14>
 800b76a:	69a3      	ldr	r3, [r4, #24]
 800b76c:	b913      	cbnz	r3, 800b774 <iprintf+0x14>
 800b76e:	4620      	mov	r0, r4
 800b770:	f001 ff46 	bl	800d600 <__sinit>
 800b774:	ab05      	add	r3, sp, #20
 800b776:	9a04      	ldr	r2, [sp, #16]
 800b778:	68a1      	ldr	r1, [r4, #8]
 800b77a:	9301      	str	r3, [sp, #4]
 800b77c:	4620      	mov	r0, r4
 800b77e:	f003 fa6f 	bl	800ec60 <_vfiprintf_r>
 800b782:	b002      	add	sp, #8
 800b784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b788:	b004      	add	sp, #16
 800b78a:	4770      	bx	lr
 800b78c:	20000544 	.word	0x20000544

0800b790 <_puts_r>:
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	460e      	mov	r6, r1
 800b794:	4605      	mov	r5, r0
 800b796:	b118      	cbz	r0, 800b7a0 <_puts_r+0x10>
 800b798:	6983      	ldr	r3, [r0, #24]
 800b79a:	b90b      	cbnz	r3, 800b7a0 <_puts_r+0x10>
 800b79c:	f001 ff30 	bl	800d600 <__sinit>
 800b7a0:	69ab      	ldr	r3, [r5, #24]
 800b7a2:	68ac      	ldr	r4, [r5, #8]
 800b7a4:	b913      	cbnz	r3, 800b7ac <_puts_r+0x1c>
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f001 ff2a 	bl	800d600 <__sinit>
 800b7ac:	4b2c      	ldr	r3, [pc, #176]	; (800b860 <_puts_r+0xd0>)
 800b7ae:	429c      	cmp	r4, r3
 800b7b0:	d120      	bne.n	800b7f4 <_puts_r+0x64>
 800b7b2:	686c      	ldr	r4, [r5, #4]
 800b7b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7b6:	07db      	lsls	r3, r3, #31
 800b7b8:	d405      	bmi.n	800b7c6 <_puts_r+0x36>
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	0598      	lsls	r0, r3, #22
 800b7be:	d402      	bmi.n	800b7c6 <_puts_r+0x36>
 800b7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7c2:	f002 fb40 	bl	800de46 <__retarget_lock_acquire_recursive>
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	0719      	lsls	r1, r3, #28
 800b7ca:	d51d      	bpl.n	800b808 <_puts_r+0x78>
 800b7cc:	6923      	ldr	r3, [r4, #16]
 800b7ce:	b1db      	cbz	r3, 800b808 <_puts_r+0x78>
 800b7d0:	3e01      	subs	r6, #1
 800b7d2:	68a3      	ldr	r3, [r4, #8]
 800b7d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	60a3      	str	r3, [r4, #8]
 800b7dc:	bb39      	cbnz	r1, 800b82e <_puts_r+0x9e>
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	da38      	bge.n	800b854 <_puts_r+0xc4>
 800b7e2:	4622      	mov	r2, r4
 800b7e4:	210a      	movs	r1, #10
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	f000 ff16 	bl	800c618 <__swbuf_r>
 800b7ec:	3001      	adds	r0, #1
 800b7ee:	d011      	beq.n	800b814 <_puts_r+0x84>
 800b7f0:	250a      	movs	r5, #10
 800b7f2:	e011      	b.n	800b818 <_puts_r+0x88>
 800b7f4:	4b1b      	ldr	r3, [pc, #108]	; (800b864 <_puts_r+0xd4>)
 800b7f6:	429c      	cmp	r4, r3
 800b7f8:	d101      	bne.n	800b7fe <_puts_r+0x6e>
 800b7fa:	68ac      	ldr	r4, [r5, #8]
 800b7fc:	e7da      	b.n	800b7b4 <_puts_r+0x24>
 800b7fe:	4b1a      	ldr	r3, [pc, #104]	; (800b868 <_puts_r+0xd8>)
 800b800:	429c      	cmp	r4, r3
 800b802:	bf08      	it	eq
 800b804:	68ec      	ldreq	r4, [r5, #12]
 800b806:	e7d5      	b.n	800b7b4 <_puts_r+0x24>
 800b808:	4621      	mov	r1, r4
 800b80a:	4628      	mov	r0, r5
 800b80c:	f000 ff56 	bl	800c6bc <__swsetup_r>
 800b810:	2800      	cmp	r0, #0
 800b812:	d0dd      	beq.n	800b7d0 <_puts_r+0x40>
 800b814:	f04f 35ff 	mov.w	r5, #4294967295
 800b818:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b81a:	07da      	lsls	r2, r3, #31
 800b81c:	d405      	bmi.n	800b82a <_puts_r+0x9a>
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	059b      	lsls	r3, r3, #22
 800b822:	d402      	bmi.n	800b82a <_puts_r+0x9a>
 800b824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b826:	f002 fb0f 	bl	800de48 <__retarget_lock_release_recursive>
 800b82a:	4628      	mov	r0, r5
 800b82c:	bd70      	pop	{r4, r5, r6, pc}
 800b82e:	2b00      	cmp	r3, #0
 800b830:	da04      	bge.n	800b83c <_puts_r+0xac>
 800b832:	69a2      	ldr	r2, [r4, #24]
 800b834:	429a      	cmp	r2, r3
 800b836:	dc06      	bgt.n	800b846 <_puts_r+0xb6>
 800b838:	290a      	cmp	r1, #10
 800b83a:	d004      	beq.n	800b846 <_puts_r+0xb6>
 800b83c:	6823      	ldr	r3, [r4, #0]
 800b83e:	1c5a      	adds	r2, r3, #1
 800b840:	6022      	str	r2, [r4, #0]
 800b842:	7019      	strb	r1, [r3, #0]
 800b844:	e7c5      	b.n	800b7d2 <_puts_r+0x42>
 800b846:	4622      	mov	r2, r4
 800b848:	4628      	mov	r0, r5
 800b84a:	f000 fee5 	bl	800c618 <__swbuf_r>
 800b84e:	3001      	adds	r0, #1
 800b850:	d1bf      	bne.n	800b7d2 <_puts_r+0x42>
 800b852:	e7df      	b.n	800b814 <_puts_r+0x84>
 800b854:	6823      	ldr	r3, [r4, #0]
 800b856:	250a      	movs	r5, #10
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	6022      	str	r2, [r4, #0]
 800b85c:	701d      	strb	r5, [r3, #0]
 800b85e:	e7db      	b.n	800b818 <_puts_r+0x88>
 800b860:	08010150 	.word	0x08010150
 800b864:	08010170 	.word	0x08010170
 800b868:	08010130 	.word	0x08010130

0800b86c <puts>:
 800b86c:	4b02      	ldr	r3, [pc, #8]	; (800b878 <puts+0xc>)
 800b86e:	4601      	mov	r1, r0
 800b870:	6818      	ldr	r0, [r3, #0]
 800b872:	f7ff bf8d 	b.w	800b790 <_puts_r>
 800b876:	bf00      	nop
 800b878:	20000544 	.word	0x20000544

0800b87c <rand>:
 800b87c:	4b16      	ldr	r3, [pc, #88]	; (800b8d8 <rand+0x5c>)
 800b87e:	b510      	push	{r4, lr}
 800b880:	681c      	ldr	r4, [r3, #0]
 800b882:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b884:	b9b3      	cbnz	r3, 800b8b4 <rand+0x38>
 800b886:	2018      	movs	r0, #24
 800b888:	f7ff f824 	bl	800a8d4 <malloc>
 800b88c:	63a0      	str	r0, [r4, #56]	; 0x38
 800b88e:	b928      	cbnz	r0, 800b89c <rand+0x20>
 800b890:	4602      	mov	r2, r0
 800b892:	4b12      	ldr	r3, [pc, #72]	; (800b8dc <rand+0x60>)
 800b894:	4812      	ldr	r0, [pc, #72]	; (800b8e0 <rand+0x64>)
 800b896:	214e      	movs	r1, #78	; 0x4e
 800b898:	f000 ff7e 	bl	800c798 <__assert_func>
 800b89c:	4a11      	ldr	r2, [pc, #68]	; (800b8e4 <rand+0x68>)
 800b89e:	4b12      	ldr	r3, [pc, #72]	; (800b8e8 <rand+0x6c>)
 800b8a0:	e9c0 2300 	strd	r2, r3, [r0]
 800b8a4:	4b11      	ldr	r3, [pc, #68]	; (800b8ec <rand+0x70>)
 800b8a6:	6083      	str	r3, [r0, #8]
 800b8a8:	230b      	movs	r3, #11
 800b8aa:	8183      	strh	r3, [r0, #12]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b8b4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800b8b6:	4a0e      	ldr	r2, [pc, #56]	; (800b8f0 <rand+0x74>)
 800b8b8:	6920      	ldr	r0, [r4, #16]
 800b8ba:	6963      	ldr	r3, [r4, #20]
 800b8bc:	490d      	ldr	r1, [pc, #52]	; (800b8f4 <rand+0x78>)
 800b8be:	4342      	muls	r2, r0
 800b8c0:	fb01 2203 	mla	r2, r1, r3, r2
 800b8c4:	fba0 0101 	umull	r0, r1, r0, r1
 800b8c8:	1c43      	adds	r3, r0, #1
 800b8ca:	eb42 0001 	adc.w	r0, r2, r1
 800b8ce:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800b8d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b8d6:	bd10      	pop	{r4, pc}
 800b8d8:	20000544 	.word	0x20000544
 800b8dc:	0800feb5 	.word	0x0800feb5
 800b8e0:	0800fecc 	.word	0x0800fecc
 800b8e4:	abcd330e 	.word	0xabcd330e
 800b8e8:	e66d1234 	.word	0xe66d1234
 800b8ec:	0005deec 	.word	0x0005deec
 800b8f0:	5851f42d 	.word	0x5851f42d
 800b8f4:	4c957f2d 	.word	0x4c957f2d

0800b8f8 <_sbrk_r>:
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	4d06      	ldr	r5, [pc, #24]	; (800b914 <_sbrk_r+0x1c>)
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	4604      	mov	r4, r0
 800b900:	4608      	mov	r0, r1
 800b902:	602b      	str	r3, [r5, #0]
 800b904:	f7f6 fb42 	bl	8001f8c <_sbrk>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	d102      	bne.n	800b912 <_sbrk_r+0x1a>
 800b90c:	682b      	ldr	r3, [r5, #0]
 800b90e:	b103      	cbz	r3, 800b912 <_sbrk_r+0x1a>
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	20000f68 	.word	0x20000f68

0800b918 <nanf>:
 800b918:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b920 <nanf+0x8>
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	7fc00000 	.word	0x7fc00000

0800b924 <siprintf>:
 800b924:	b40e      	push	{r1, r2, r3}
 800b926:	b500      	push	{lr}
 800b928:	b09c      	sub	sp, #112	; 0x70
 800b92a:	ab1d      	add	r3, sp, #116	; 0x74
 800b92c:	9002      	str	r0, [sp, #8]
 800b92e:	9006      	str	r0, [sp, #24]
 800b930:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b934:	4809      	ldr	r0, [pc, #36]	; (800b95c <siprintf+0x38>)
 800b936:	9107      	str	r1, [sp, #28]
 800b938:	9104      	str	r1, [sp, #16]
 800b93a:	4909      	ldr	r1, [pc, #36]	; (800b960 <siprintf+0x3c>)
 800b93c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b940:	9105      	str	r1, [sp, #20]
 800b942:	6800      	ldr	r0, [r0, #0]
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	a902      	add	r1, sp, #8
 800b948:	f003 f860 	bl	800ea0c <_svfiprintf_r>
 800b94c:	9b02      	ldr	r3, [sp, #8]
 800b94e:	2200      	movs	r2, #0
 800b950:	701a      	strb	r2, [r3, #0]
 800b952:	b01c      	add	sp, #112	; 0x70
 800b954:	f85d eb04 	ldr.w	lr, [sp], #4
 800b958:	b003      	add	sp, #12
 800b95a:	4770      	bx	lr
 800b95c:	20000544 	.word	0x20000544
 800b960:	ffff0208 	.word	0xffff0208

0800b964 <sulp>:
 800b964:	b570      	push	{r4, r5, r6, lr}
 800b966:	4604      	mov	r4, r0
 800b968:	460d      	mov	r5, r1
 800b96a:	4616      	mov	r6, r2
 800b96c:	ec45 4b10 	vmov	d0, r4, r5
 800b970:	f002 fe60 	bl	800e634 <__ulp>
 800b974:	b17e      	cbz	r6, 800b996 <sulp+0x32>
 800b976:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b97a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b97e:	2b00      	cmp	r3, #0
 800b980:	dd09      	ble.n	800b996 <sulp+0x32>
 800b982:	051b      	lsls	r3, r3, #20
 800b984:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800b988:	2000      	movs	r0, #0
 800b98a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800b98e:	ec41 0b17 	vmov	d7, r0, r1
 800b992:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b996:	bd70      	pop	{r4, r5, r6, pc}

0800b998 <_strtod_l>:
 800b998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99c:	ed2d 8b0e 	vpush	{d8-d14}
 800b9a0:	b097      	sub	sp, #92	; 0x5c
 800b9a2:	461f      	mov	r7, r3
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	9312      	str	r3, [sp, #72]	; 0x48
 800b9a8:	4ba1      	ldr	r3, [pc, #644]	; (800bc30 <_strtod_l+0x298>)
 800b9aa:	920d      	str	r2, [sp, #52]	; 0x34
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	9307      	str	r3, [sp, #28]
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	468b      	mov	fp, r1
 800b9b6:	f7f4 fc43 	bl	8000240 <strlen>
 800b9ba:	f04f 0800 	mov.w	r8, #0
 800b9be:	4605      	mov	r5, r0
 800b9c0:	f04f 0900 	mov.w	r9, #0
 800b9c4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b9c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b9ca:	7813      	ldrb	r3, [r2, #0]
 800b9cc:	2b2b      	cmp	r3, #43	; 0x2b
 800b9ce:	d04d      	beq.n	800ba6c <_strtod_l+0xd4>
 800b9d0:	d83a      	bhi.n	800ba48 <_strtod_l+0xb0>
 800b9d2:	2b0d      	cmp	r3, #13
 800b9d4:	d833      	bhi.n	800ba3e <_strtod_l+0xa6>
 800b9d6:	2b08      	cmp	r3, #8
 800b9d8:	d833      	bhi.n	800ba42 <_strtod_l+0xaa>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d03d      	beq.n	800ba5a <_strtod_l+0xc2>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	9308      	str	r3, [sp, #32]
 800b9e2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800b9e4:	7833      	ldrb	r3, [r6, #0]
 800b9e6:	2b30      	cmp	r3, #48	; 0x30
 800b9e8:	f040 80b0 	bne.w	800bb4c <_strtod_l+0x1b4>
 800b9ec:	7873      	ldrb	r3, [r6, #1]
 800b9ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b9f2:	2b58      	cmp	r3, #88	; 0x58
 800b9f4:	d167      	bne.n	800bac6 <_strtod_l+0x12e>
 800b9f6:	9b08      	ldr	r3, [sp, #32]
 800b9f8:	9301      	str	r3, [sp, #4]
 800b9fa:	ab12      	add	r3, sp, #72	; 0x48
 800b9fc:	9702      	str	r7, [sp, #8]
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	4a8c      	ldr	r2, [pc, #560]	; (800bc34 <_strtod_l+0x29c>)
 800ba02:	ab13      	add	r3, sp, #76	; 0x4c
 800ba04:	a911      	add	r1, sp, #68	; 0x44
 800ba06:	4620      	mov	r0, r4
 800ba08:	f001 ff10 	bl	800d82c <__gethex>
 800ba0c:	f010 0507 	ands.w	r5, r0, #7
 800ba10:	4607      	mov	r7, r0
 800ba12:	d005      	beq.n	800ba20 <_strtod_l+0x88>
 800ba14:	2d06      	cmp	r5, #6
 800ba16:	d12b      	bne.n	800ba70 <_strtod_l+0xd8>
 800ba18:	3601      	adds	r6, #1
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	9611      	str	r6, [sp, #68]	; 0x44
 800ba1e:	9308      	str	r3, [sp, #32]
 800ba20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f040 854e 	bne.w	800c4c4 <_strtod_l+0xb2c>
 800ba28:	9b08      	ldr	r3, [sp, #32]
 800ba2a:	b1e3      	cbz	r3, 800ba66 <_strtod_l+0xce>
 800ba2c:	ec49 8b17 	vmov	d7, r8, r9
 800ba30:	eeb1 0b47 	vneg.f64	d0, d7
 800ba34:	b017      	add	sp, #92	; 0x5c
 800ba36:	ecbd 8b0e 	vpop	{d8-d14}
 800ba3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba3e:	2b20      	cmp	r3, #32
 800ba40:	d1cd      	bne.n	800b9de <_strtod_l+0x46>
 800ba42:	3201      	adds	r2, #1
 800ba44:	9211      	str	r2, [sp, #68]	; 0x44
 800ba46:	e7bf      	b.n	800b9c8 <_strtod_l+0x30>
 800ba48:	2b2d      	cmp	r3, #45	; 0x2d
 800ba4a:	d1c8      	bne.n	800b9de <_strtod_l+0x46>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	9308      	str	r3, [sp, #32]
 800ba50:	1c53      	adds	r3, r2, #1
 800ba52:	9311      	str	r3, [sp, #68]	; 0x44
 800ba54:	7853      	ldrb	r3, [r2, #1]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1c3      	bne.n	800b9e2 <_strtod_l+0x4a>
 800ba5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba5c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f040 852d 	bne.w	800c4c0 <_strtod_l+0xb28>
 800ba66:	ec49 8b10 	vmov	d0, r8, r9
 800ba6a:	e7e3      	b.n	800ba34 <_strtod_l+0x9c>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	e7ee      	b.n	800ba4e <_strtod_l+0xb6>
 800ba70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba72:	b13a      	cbz	r2, 800ba84 <_strtod_l+0xec>
 800ba74:	2135      	movs	r1, #53	; 0x35
 800ba76:	a814      	add	r0, sp, #80	; 0x50
 800ba78:	f002 fee4 	bl	800e844 <__copybits>
 800ba7c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f002 faa6 	bl	800dfd0 <_Bfree>
 800ba84:	3d01      	subs	r5, #1
 800ba86:	2d04      	cmp	r5, #4
 800ba88:	d806      	bhi.n	800ba98 <_strtod_l+0x100>
 800ba8a:	e8df f005 	tbb	[pc, r5]
 800ba8e:	030a      	.short	0x030a
 800ba90:	1714      	.short	0x1714
 800ba92:	0a          	.byte	0x0a
 800ba93:	00          	.byte	0x00
 800ba94:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800ba98:	073f      	lsls	r7, r7, #28
 800ba9a:	d5c1      	bpl.n	800ba20 <_strtod_l+0x88>
 800ba9c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800baa0:	e7be      	b.n	800ba20 <_strtod_l+0x88>
 800baa2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800baa6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800baa8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800baac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bab0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bab4:	e7f0      	b.n	800ba98 <_strtod_l+0x100>
 800bab6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800bc38 <_strtod_l+0x2a0>
 800baba:	e7ed      	b.n	800ba98 <_strtod_l+0x100>
 800babc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bac0:	f04f 38ff 	mov.w	r8, #4294967295
 800bac4:	e7e8      	b.n	800ba98 <_strtod_l+0x100>
 800bac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bac8:	1c5a      	adds	r2, r3, #1
 800baca:	9211      	str	r2, [sp, #68]	; 0x44
 800bacc:	785b      	ldrb	r3, [r3, #1]
 800bace:	2b30      	cmp	r3, #48	; 0x30
 800bad0:	d0f9      	beq.n	800bac6 <_strtod_l+0x12e>
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d0a4      	beq.n	800ba20 <_strtod_l+0x88>
 800bad6:	2301      	movs	r3, #1
 800bad8:	f04f 0a00 	mov.w	sl, #0
 800badc:	9304      	str	r3, [sp, #16]
 800bade:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bae0:	930a      	str	r3, [sp, #40]	; 0x28
 800bae2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bae6:	f8cd a018 	str.w	sl, [sp, #24]
 800baea:	220a      	movs	r2, #10
 800baec:	9811      	ldr	r0, [sp, #68]	; 0x44
 800baee:	7807      	ldrb	r7, [r0, #0]
 800baf0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800baf4:	b2d9      	uxtb	r1, r3
 800baf6:	2909      	cmp	r1, #9
 800baf8:	d92a      	bls.n	800bb50 <_strtod_l+0x1b8>
 800bafa:	9907      	ldr	r1, [sp, #28]
 800bafc:	462a      	mov	r2, r5
 800bafe:	f003 fa2a 	bl	800ef56 <strncmp>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	d033      	beq.n	800bb6e <_strtod_l+0x1d6>
 800bb06:	2000      	movs	r0, #0
 800bb08:	9b06      	ldr	r3, [sp, #24]
 800bb0a:	463a      	mov	r2, r7
 800bb0c:	4601      	mov	r1, r0
 800bb0e:	4607      	mov	r7, r0
 800bb10:	2a65      	cmp	r2, #101	; 0x65
 800bb12:	d001      	beq.n	800bb18 <_strtod_l+0x180>
 800bb14:	2a45      	cmp	r2, #69	; 0x45
 800bb16:	d117      	bne.n	800bb48 <_strtod_l+0x1b0>
 800bb18:	b91b      	cbnz	r3, 800bb22 <_strtod_l+0x18a>
 800bb1a:	9b04      	ldr	r3, [sp, #16]
 800bb1c:	4303      	orrs	r3, r0
 800bb1e:	d09c      	beq.n	800ba5a <_strtod_l+0xc2>
 800bb20:	2300      	movs	r3, #0
 800bb22:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800bb26:	f10b 0201 	add.w	r2, fp, #1
 800bb2a:	9211      	str	r2, [sp, #68]	; 0x44
 800bb2c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800bb30:	2a2b      	cmp	r2, #43	; 0x2b
 800bb32:	d071      	beq.n	800bc18 <_strtod_l+0x280>
 800bb34:	2a2d      	cmp	r2, #45	; 0x2d
 800bb36:	d077      	beq.n	800bc28 <_strtod_l+0x290>
 800bb38:	f04f 0e00 	mov.w	lr, #0
 800bb3c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800bb40:	2d09      	cmp	r5, #9
 800bb42:	d97f      	bls.n	800bc44 <_strtod_l+0x2ac>
 800bb44:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800bb48:	2500      	movs	r5, #0
 800bb4a:	e09b      	b.n	800bc84 <_strtod_l+0x2ec>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	e7c3      	b.n	800bad8 <_strtod_l+0x140>
 800bb50:	9906      	ldr	r1, [sp, #24]
 800bb52:	2908      	cmp	r1, #8
 800bb54:	bfdd      	ittte	le
 800bb56:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bb58:	fb02 3301 	mlale	r3, r2, r1, r3
 800bb5c:	9309      	strle	r3, [sp, #36]	; 0x24
 800bb5e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bb62:	9b06      	ldr	r3, [sp, #24]
 800bb64:	3001      	adds	r0, #1
 800bb66:	3301      	adds	r3, #1
 800bb68:	9306      	str	r3, [sp, #24]
 800bb6a:	9011      	str	r0, [sp, #68]	; 0x44
 800bb6c:	e7be      	b.n	800baec <_strtod_l+0x154>
 800bb6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb70:	195a      	adds	r2, r3, r5
 800bb72:	9211      	str	r2, [sp, #68]	; 0x44
 800bb74:	5d5a      	ldrb	r2, [r3, r5]
 800bb76:	9b06      	ldr	r3, [sp, #24]
 800bb78:	b3a3      	cbz	r3, 800bbe4 <_strtod_l+0x24c>
 800bb7a:	4607      	mov	r7, r0
 800bb7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bb80:	2909      	cmp	r1, #9
 800bb82:	d912      	bls.n	800bbaa <_strtod_l+0x212>
 800bb84:	2101      	movs	r1, #1
 800bb86:	e7c3      	b.n	800bb10 <_strtod_l+0x178>
 800bb88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb8a:	1c5a      	adds	r2, r3, #1
 800bb8c:	9211      	str	r2, [sp, #68]	; 0x44
 800bb8e:	785a      	ldrb	r2, [r3, #1]
 800bb90:	3001      	adds	r0, #1
 800bb92:	2a30      	cmp	r2, #48	; 0x30
 800bb94:	d0f8      	beq.n	800bb88 <_strtod_l+0x1f0>
 800bb96:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bb9a:	2b08      	cmp	r3, #8
 800bb9c:	f200 8497 	bhi.w	800c4ce <_strtod_l+0xb36>
 800bba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bba2:	930a      	str	r3, [sp, #40]	; 0x28
 800bba4:	4607      	mov	r7, r0
 800bba6:	2000      	movs	r0, #0
 800bba8:	4603      	mov	r3, r0
 800bbaa:	3a30      	subs	r2, #48	; 0x30
 800bbac:	f100 0101 	add.w	r1, r0, #1
 800bbb0:	d012      	beq.n	800bbd8 <_strtod_l+0x240>
 800bbb2:	440f      	add	r7, r1
 800bbb4:	eb00 0c03 	add.w	ip, r0, r3
 800bbb8:	4619      	mov	r1, r3
 800bbba:	250a      	movs	r5, #10
 800bbbc:	4561      	cmp	r1, ip
 800bbbe:	d113      	bne.n	800bbe8 <_strtod_l+0x250>
 800bbc0:	1819      	adds	r1, r3, r0
 800bbc2:	2908      	cmp	r1, #8
 800bbc4:	f103 0301 	add.w	r3, r3, #1
 800bbc8:	4403      	add	r3, r0
 800bbca:	dc1c      	bgt.n	800bc06 <_strtod_l+0x26e>
 800bbcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbce:	210a      	movs	r1, #10
 800bbd0:	fb01 2200 	mla	r2, r1, r0, r2
 800bbd4:	9209      	str	r2, [sp, #36]	; 0x24
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bbda:	1c50      	adds	r0, r2, #1
 800bbdc:	9011      	str	r0, [sp, #68]	; 0x44
 800bbde:	7852      	ldrb	r2, [r2, #1]
 800bbe0:	4608      	mov	r0, r1
 800bbe2:	e7cb      	b.n	800bb7c <_strtod_l+0x1e4>
 800bbe4:	9806      	ldr	r0, [sp, #24]
 800bbe6:	e7d4      	b.n	800bb92 <_strtod_l+0x1fa>
 800bbe8:	2908      	cmp	r1, #8
 800bbea:	dc04      	bgt.n	800bbf6 <_strtod_l+0x25e>
 800bbec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bbee:	436e      	muls	r6, r5
 800bbf0:	9609      	str	r6, [sp, #36]	; 0x24
 800bbf2:	3101      	adds	r1, #1
 800bbf4:	e7e2      	b.n	800bbbc <_strtod_l+0x224>
 800bbf6:	f101 0e01 	add.w	lr, r1, #1
 800bbfa:	f1be 0f10 	cmp.w	lr, #16
 800bbfe:	bfd8      	it	le
 800bc00:	fb05 fa0a 	mulle.w	sl, r5, sl
 800bc04:	e7f5      	b.n	800bbf2 <_strtod_l+0x25a>
 800bc06:	2b10      	cmp	r3, #16
 800bc08:	bfdc      	itt	le
 800bc0a:	210a      	movle	r1, #10
 800bc0c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800bc10:	e7e1      	b.n	800bbd6 <_strtod_l+0x23e>
 800bc12:	2700      	movs	r7, #0
 800bc14:	2101      	movs	r1, #1
 800bc16:	e780      	b.n	800bb1a <_strtod_l+0x182>
 800bc18:	f04f 0e00 	mov.w	lr, #0
 800bc1c:	f10b 0202 	add.w	r2, fp, #2
 800bc20:	9211      	str	r2, [sp, #68]	; 0x44
 800bc22:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800bc26:	e789      	b.n	800bb3c <_strtod_l+0x1a4>
 800bc28:	f04f 0e01 	mov.w	lr, #1
 800bc2c:	e7f6      	b.n	800bc1c <_strtod_l+0x284>
 800bc2e:	bf00      	nop
 800bc30:	080101f8 	.word	0x080101f8
 800bc34:	0800ff28 	.word	0x0800ff28
 800bc38:	7ff00000 	.word	0x7ff00000
 800bc3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc3e:	1c55      	adds	r5, r2, #1
 800bc40:	9511      	str	r5, [sp, #68]	; 0x44
 800bc42:	7852      	ldrb	r2, [r2, #1]
 800bc44:	2a30      	cmp	r2, #48	; 0x30
 800bc46:	d0f9      	beq.n	800bc3c <_strtod_l+0x2a4>
 800bc48:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800bc4c:	2d08      	cmp	r5, #8
 800bc4e:	f63f af7b 	bhi.w	800bb48 <_strtod_l+0x1b0>
 800bc52:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800bc56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc58:	9207      	str	r2, [sp, #28]
 800bc5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc5c:	1c55      	adds	r5, r2, #1
 800bc5e:	9511      	str	r5, [sp, #68]	; 0x44
 800bc60:	7852      	ldrb	r2, [r2, #1]
 800bc62:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bc66:	2e09      	cmp	r6, #9
 800bc68:	d937      	bls.n	800bcda <_strtod_l+0x342>
 800bc6a:	9e07      	ldr	r6, [sp, #28]
 800bc6c:	1bad      	subs	r5, r5, r6
 800bc6e:	2d08      	cmp	r5, #8
 800bc70:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800bc74:	dc02      	bgt.n	800bc7c <_strtod_l+0x2e4>
 800bc76:	4565      	cmp	r5, ip
 800bc78:	bfa8      	it	ge
 800bc7a:	4665      	movge	r5, ip
 800bc7c:	f1be 0f00 	cmp.w	lr, #0
 800bc80:	d000      	beq.n	800bc84 <_strtod_l+0x2ec>
 800bc82:	426d      	negs	r5, r5
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d14d      	bne.n	800bd24 <_strtod_l+0x38c>
 800bc88:	9b04      	ldr	r3, [sp, #16]
 800bc8a:	4303      	orrs	r3, r0
 800bc8c:	f47f aec8 	bne.w	800ba20 <_strtod_l+0x88>
 800bc90:	2900      	cmp	r1, #0
 800bc92:	f47f aee2 	bne.w	800ba5a <_strtod_l+0xc2>
 800bc96:	2a69      	cmp	r2, #105	; 0x69
 800bc98:	d027      	beq.n	800bcea <_strtod_l+0x352>
 800bc9a:	dc24      	bgt.n	800bce6 <_strtod_l+0x34e>
 800bc9c:	2a49      	cmp	r2, #73	; 0x49
 800bc9e:	d024      	beq.n	800bcea <_strtod_l+0x352>
 800bca0:	2a4e      	cmp	r2, #78	; 0x4e
 800bca2:	f47f aeda 	bne.w	800ba5a <_strtod_l+0xc2>
 800bca6:	4996      	ldr	r1, [pc, #600]	; (800bf00 <_strtod_l+0x568>)
 800bca8:	a811      	add	r0, sp, #68	; 0x44
 800bcaa:	f002 f817 	bl	800dcdc <__match>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	f43f aed3 	beq.w	800ba5a <_strtod_l+0xc2>
 800bcb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	2b28      	cmp	r3, #40	; 0x28
 800bcba:	d12d      	bne.n	800bd18 <_strtod_l+0x380>
 800bcbc:	4991      	ldr	r1, [pc, #580]	; (800bf04 <_strtod_l+0x56c>)
 800bcbe:	aa14      	add	r2, sp, #80	; 0x50
 800bcc0:	a811      	add	r0, sp, #68	; 0x44
 800bcc2:	f002 f81f 	bl	800dd04 <__hexnan>
 800bcc6:	2805      	cmp	r0, #5
 800bcc8:	d126      	bne.n	800bd18 <_strtod_l+0x380>
 800bcca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bccc:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800bcd0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bcd4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bcd8:	e6a2      	b.n	800ba20 <_strtod_l+0x88>
 800bcda:	250a      	movs	r5, #10
 800bcdc:	fb05 250c 	mla	r5, r5, ip, r2
 800bce0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800bce4:	e7b9      	b.n	800bc5a <_strtod_l+0x2c2>
 800bce6:	2a6e      	cmp	r2, #110	; 0x6e
 800bce8:	e7db      	b.n	800bca2 <_strtod_l+0x30a>
 800bcea:	4987      	ldr	r1, [pc, #540]	; (800bf08 <_strtod_l+0x570>)
 800bcec:	a811      	add	r0, sp, #68	; 0x44
 800bcee:	f001 fff5 	bl	800dcdc <__match>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	f43f aeb1 	beq.w	800ba5a <_strtod_l+0xc2>
 800bcf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcfa:	4984      	ldr	r1, [pc, #528]	; (800bf0c <_strtod_l+0x574>)
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	a811      	add	r0, sp, #68	; 0x44
 800bd00:	9311      	str	r3, [sp, #68]	; 0x44
 800bd02:	f001 ffeb 	bl	800dcdc <__match>
 800bd06:	b910      	cbnz	r0, 800bd0e <_strtod_l+0x376>
 800bd08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	9311      	str	r3, [sp, #68]	; 0x44
 800bd0e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800bf20 <_strtod_l+0x588>
 800bd12:	f04f 0800 	mov.w	r8, #0
 800bd16:	e683      	b.n	800ba20 <_strtod_l+0x88>
 800bd18:	487d      	ldr	r0, [pc, #500]	; (800bf10 <_strtod_l+0x578>)
 800bd1a:	f003 f8d1 	bl	800eec0 <nan>
 800bd1e:	ec59 8b10 	vmov	r8, r9, d0
 800bd22:	e67d      	b.n	800ba20 <_strtod_l+0x88>
 800bd24:	1bea      	subs	r2, r5, r7
 800bd26:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800bd2a:	9207      	str	r2, [sp, #28]
 800bd2c:	9a06      	ldr	r2, [sp, #24]
 800bd2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bd32:	2a00      	cmp	r2, #0
 800bd34:	bf08      	it	eq
 800bd36:	461a      	moveq	r2, r3
 800bd38:	2b10      	cmp	r3, #16
 800bd3a:	9206      	str	r2, [sp, #24]
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	bfa8      	it	ge
 800bd40:	2210      	movge	r2, #16
 800bd42:	2b09      	cmp	r3, #9
 800bd44:	ec59 8b17 	vmov	r8, r9, d7
 800bd48:	dd0c      	ble.n	800bd64 <_strtod_l+0x3cc>
 800bd4a:	4972      	ldr	r1, [pc, #456]	; (800bf14 <_strtod_l+0x57c>)
 800bd4c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bd50:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800bd54:	ee06 aa90 	vmov	s13, sl
 800bd58:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800bd5c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bd60:	ec59 8b16 	vmov	r8, r9, d6
 800bd64:	2b0f      	cmp	r3, #15
 800bd66:	dc36      	bgt.n	800bdd6 <_strtod_l+0x43e>
 800bd68:	9907      	ldr	r1, [sp, #28]
 800bd6a:	2900      	cmp	r1, #0
 800bd6c:	f43f ae58 	beq.w	800ba20 <_strtod_l+0x88>
 800bd70:	dd23      	ble.n	800bdba <_strtod_l+0x422>
 800bd72:	2916      	cmp	r1, #22
 800bd74:	dc0b      	bgt.n	800bd8e <_strtod_l+0x3f6>
 800bd76:	4b67      	ldr	r3, [pc, #412]	; (800bf14 <_strtod_l+0x57c>)
 800bd78:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800bd7c:	ed93 7b00 	vldr	d7, [r3]
 800bd80:	ec49 8b16 	vmov	d6, r8, r9
 800bd84:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd88:	ec59 8b17 	vmov	r8, r9, d7
 800bd8c:	e648      	b.n	800ba20 <_strtod_l+0x88>
 800bd8e:	9807      	ldr	r0, [sp, #28]
 800bd90:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800bd94:	4281      	cmp	r1, r0
 800bd96:	db1e      	blt.n	800bdd6 <_strtod_l+0x43e>
 800bd98:	4a5e      	ldr	r2, [pc, #376]	; (800bf14 <_strtod_l+0x57c>)
 800bd9a:	f1c3 030f 	rsb	r3, r3, #15
 800bd9e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800bda2:	ed91 7b00 	vldr	d7, [r1]
 800bda6:	ec49 8b16 	vmov	d6, r8, r9
 800bdaa:	1ac3      	subs	r3, r0, r3
 800bdac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bdb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bdb4:	ed92 6b00 	vldr	d6, [r2]
 800bdb8:	e7e4      	b.n	800bd84 <_strtod_l+0x3ec>
 800bdba:	9907      	ldr	r1, [sp, #28]
 800bdbc:	3116      	adds	r1, #22
 800bdbe:	db0a      	blt.n	800bdd6 <_strtod_l+0x43e>
 800bdc0:	4b54      	ldr	r3, [pc, #336]	; (800bf14 <_strtod_l+0x57c>)
 800bdc2:	1b7d      	subs	r5, r7, r5
 800bdc4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bdc8:	ed95 7b00 	vldr	d7, [r5]
 800bdcc:	ec49 8b16 	vmov	d6, r8, r9
 800bdd0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bdd4:	e7d8      	b.n	800bd88 <_strtod_l+0x3f0>
 800bdd6:	9907      	ldr	r1, [sp, #28]
 800bdd8:	1a9a      	subs	r2, r3, r2
 800bdda:	440a      	add	r2, r1
 800bddc:	2a00      	cmp	r2, #0
 800bdde:	dd6f      	ble.n	800bec0 <_strtod_l+0x528>
 800bde0:	f012 000f 	ands.w	r0, r2, #15
 800bde4:	d00a      	beq.n	800bdfc <_strtod_l+0x464>
 800bde6:	494b      	ldr	r1, [pc, #300]	; (800bf14 <_strtod_l+0x57c>)
 800bde8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bdec:	ed91 7b00 	vldr	d7, [r1]
 800bdf0:	ec49 8b16 	vmov	d6, r8, r9
 800bdf4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bdf8:	ec59 8b17 	vmov	r8, r9, d7
 800bdfc:	f032 020f 	bics.w	r2, r2, #15
 800be00:	d04f      	beq.n	800bea2 <_strtod_l+0x50a>
 800be02:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800be06:	dd22      	ble.n	800be4e <_strtod_l+0x4b6>
 800be08:	2500      	movs	r5, #0
 800be0a:	462e      	mov	r6, r5
 800be0c:	9506      	str	r5, [sp, #24]
 800be0e:	462f      	mov	r7, r5
 800be10:	2322      	movs	r3, #34	; 0x22
 800be12:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800bf20 <_strtod_l+0x588>
 800be16:	6023      	str	r3, [r4, #0]
 800be18:	f04f 0800 	mov.w	r8, #0
 800be1c:	9b06      	ldr	r3, [sp, #24]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	f43f adfe 	beq.w	800ba20 <_strtod_l+0x88>
 800be24:	9912      	ldr	r1, [sp, #72]	; 0x48
 800be26:	4620      	mov	r0, r4
 800be28:	f002 f8d2 	bl	800dfd0 <_Bfree>
 800be2c:	4639      	mov	r1, r7
 800be2e:	4620      	mov	r0, r4
 800be30:	f002 f8ce 	bl	800dfd0 <_Bfree>
 800be34:	4631      	mov	r1, r6
 800be36:	4620      	mov	r0, r4
 800be38:	f002 f8ca 	bl	800dfd0 <_Bfree>
 800be3c:	9906      	ldr	r1, [sp, #24]
 800be3e:	4620      	mov	r0, r4
 800be40:	f002 f8c6 	bl	800dfd0 <_Bfree>
 800be44:	4629      	mov	r1, r5
 800be46:	4620      	mov	r0, r4
 800be48:	f002 f8c2 	bl	800dfd0 <_Bfree>
 800be4c:	e5e8      	b.n	800ba20 <_strtod_l+0x88>
 800be4e:	2000      	movs	r0, #0
 800be50:	ec49 8b17 	vmov	d7, r8, r9
 800be54:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800bf18 <_strtod_l+0x580>
 800be58:	1112      	asrs	r2, r2, #4
 800be5a:	4601      	mov	r1, r0
 800be5c:	2a01      	cmp	r2, #1
 800be5e:	dc23      	bgt.n	800bea8 <_strtod_l+0x510>
 800be60:	b108      	cbz	r0, 800be66 <_strtod_l+0x4ce>
 800be62:	ec59 8b17 	vmov	r8, r9, d7
 800be66:	4a2c      	ldr	r2, [pc, #176]	; (800bf18 <_strtod_l+0x580>)
 800be68:	482c      	ldr	r0, [pc, #176]	; (800bf1c <_strtod_l+0x584>)
 800be6a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800be6e:	ed92 7b00 	vldr	d7, [r2]
 800be72:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800be76:	ec49 8b16 	vmov	d6, r8, r9
 800be7a:	4a29      	ldr	r2, [pc, #164]	; (800bf20 <_strtod_l+0x588>)
 800be7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be80:	ee17 1a90 	vmov	r1, s15
 800be84:	400a      	ands	r2, r1
 800be86:	4282      	cmp	r2, r0
 800be88:	ec59 8b17 	vmov	r8, r9, d7
 800be8c:	d8bc      	bhi.n	800be08 <_strtod_l+0x470>
 800be8e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800be92:	4282      	cmp	r2, r0
 800be94:	bf86      	itte	hi
 800be96:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800bf24 <_strtod_l+0x58c>
 800be9a:	f04f 38ff 	movhi.w	r8, #4294967295
 800be9e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800bea2:	2200      	movs	r2, #0
 800bea4:	9204      	str	r2, [sp, #16]
 800bea6:	e078      	b.n	800bf9a <_strtod_l+0x602>
 800bea8:	07d6      	lsls	r6, r2, #31
 800beaa:	d504      	bpl.n	800beb6 <_strtod_l+0x51e>
 800beac:	ed9c 6b00 	vldr	d6, [ip]
 800beb0:	2001      	movs	r0, #1
 800beb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800beb6:	3101      	adds	r1, #1
 800beb8:	1052      	asrs	r2, r2, #1
 800beba:	f10c 0c08 	add.w	ip, ip, #8
 800bebe:	e7cd      	b.n	800be5c <_strtod_l+0x4c4>
 800bec0:	d0ef      	beq.n	800bea2 <_strtod_l+0x50a>
 800bec2:	4252      	negs	r2, r2
 800bec4:	f012 000f 	ands.w	r0, r2, #15
 800bec8:	d00a      	beq.n	800bee0 <_strtod_l+0x548>
 800beca:	4912      	ldr	r1, [pc, #72]	; (800bf14 <_strtod_l+0x57c>)
 800becc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bed0:	ed91 7b00 	vldr	d7, [r1]
 800bed4:	ec49 8b16 	vmov	d6, r8, r9
 800bed8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bedc:	ec59 8b17 	vmov	r8, r9, d7
 800bee0:	1112      	asrs	r2, r2, #4
 800bee2:	d0de      	beq.n	800bea2 <_strtod_l+0x50a>
 800bee4:	2a1f      	cmp	r2, #31
 800bee6:	dd1f      	ble.n	800bf28 <_strtod_l+0x590>
 800bee8:	2500      	movs	r5, #0
 800beea:	462e      	mov	r6, r5
 800beec:	9506      	str	r5, [sp, #24]
 800beee:	462f      	mov	r7, r5
 800bef0:	2322      	movs	r3, #34	; 0x22
 800bef2:	f04f 0800 	mov.w	r8, #0
 800bef6:	f04f 0900 	mov.w	r9, #0
 800befa:	6023      	str	r3, [r4, #0]
 800befc:	e78e      	b.n	800be1c <_strtod_l+0x484>
 800befe:	bf00      	nop
 800bf00:	0800fe89 	.word	0x0800fe89
 800bf04:	0800ff3c 	.word	0x0800ff3c
 800bf08:	0800fe81 	.word	0x0800fe81
 800bf0c:	080100b8 	.word	0x080100b8
 800bf10:	0800ffb3 	.word	0x0800ffb3
 800bf14:	08010290 	.word	0x08010290
 800bf18:	08010268 	.word	0x08010268
 800bf1c:	7ca00000 	.word	0x7ca00000
 800bf20:	7ff00000 	.word	0x7ff00000
 800bf24:	7fefffff 	.word	0x7fefffff
 800bf28:	f012 0110 	ands.w	r1, r2, #16
 800bf2c:	bf18      	it	ne
 800bf2e:	216a      	movne	r1, #106	; 0x6a
 800bf30:	9104      	str	r1, [sp, #16]
 800bf32:	ec49 8b17 	vmov	d7, r8, r9
 800bf36:	49be      	ldr	r1, [pc, #760]	; (800c230 <_strtod_l+0x898>)
 800bf38:	2000      	movs	r0, #0
 800bf3a:	07d6      	lsls	r6, r2, #31
 800bf3c:	d504      	bpl.n	800bf48 <_strtod_l+0x5b0>
 800bf3e:	ed91 6b00 	vldr	d6, [r1]
 800bf42:	2001      	movs	r0, #1
 800bf44:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf48:	1052      	asrs	r2, r2, #1
 800bf4a:	f101 0108 	add.w	r1, r1, #8
 800bf4e:	d1f4      	bne.n	800bf3a <_strtod_l+0x5a2>
 800bf50:	b108      	cbz	r0, 800bf56 <_strtod_l+0x5be>
 800bf52:	ec59 8b17 	vmov	r8, r9, d7
 800bf56:	9a04      	ldr	r2, [sp, #16]
 800bf58:	b1c2      	cbz	r2, 800bf8c <_strtod_l+0x5f4>
 800bf5a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800bf5e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800bf62:	2a00      	cmp	r2, #0
 800bf64:	4648      	mov	r0, r9
 800bf66:	dd11      	ble.n	800bf8c <_strtod_l+0x5f4>
 800bf68:	2a1f      	cmp	r2, #31
 800bf6a:	f340 812e 	ble.w	800c1ca <_strtod_l+0x832>
 800bf6e:	2a34      	cmp	r2, #52	; 0x34
 800bf70:	bfde      	ittt	le
 800bf72:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800bf76:	f04f 32ff 	movle.w	r2, #4294967295
 800bf7a:	fa02 f101 	lslle.w	r1, r2, r1
 800bf7e:	f04f 0800 	mov.w	r8, #0
 800bf82:	bfcc      	ite	gt
 800bf84:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bf88:	ea01 0900 	andle.w	r9, r1, r0
 800bf8c:	ec49 8b17 	vmov	d7, r8, r9
 800bf90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bf94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf98:	d0a6      	beq.n	800bee8 <_strtod_l+0x550>
 800bf9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf9c:	9200      	str	r2, [sp, #0]
 800bf9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bfa0:	9a06      	ldr	r2, [sp, #24]
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f002 f87c 	bl	800e0a0 <__s2b>
 800bfa8:	9006      	str	r0, [sp, #24]
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	f43f af2c 	beq.w	800be08 <_strtod_l+0x470>
 800bfb0:	9b07      	ldr	r3, [sp, #28]
 800bfb2:	1b7d      	subs	r5, r7, r5
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	bfb4      	ite	lt
 800bfb8:	462b      	movlt	r3, r5
 800bfba:	2300      	movge	r3, #0
 800bfbc:	9309      	str	r3, [sp, #36]	; 0x24
 800bfbe:	9b07      	ldr	r3, [sp, #28]
 800bfc0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800c210 <_strtod_l+0x878>
 800bfc4:	ed9f ab94 	vldr	d10, [pc, #592]	; 800c218 <_strtod_l+0x880>
 800bfc8:	ed9f bb95 	vldr	d11, [pc, #596]	; 800c220 <_strtod_l+0x888>
 800bfcc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bfd0:	2500      	movs	r5, #0
 800bfd2:	930c      	str	r3, [sp, #48]	; 0x30
 800bfd4:	462e      	mov	r6, r5
 800bfd6:	9b06      	ldr	r3, [sp, #24]
 800bfd8:	4620      	mov	r0, r4
 800bfda:	6859      	ldr	r1, [r3, #4]
 800bfdc:	f001 ffb8 	bl	800df50 <_Balloc>
 800bfe0:	4607      	mov	r7, r0
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	f43f af14 	beq.w	800be10 <_strtod_l+0x478>
 800bfe8:	9b06      	ldr	r3, [sp, #24]
 800bfea:	691a      	ldr	r2, [r3, #16]
 800bfec:	3202      	adds	r2, #2
 800bfee:	f103 010c 	add.w	r1, r3, #12
 800bff2:	0092      	lsls	r2, r2, #2
 800bff4:	300c      	adds	r0, #12
 800bff6:	f7fe fc75 	bl	800a8e4 <memcpy>
 800bffa:	ec49 8b10 	vmov	d0, r8, r9
 800bffe:	aa14      	add	r2, sp, #80	; 0x50
 800c000:	a913      	add	r1, sp, #76	; 0x4c
 800c002:	4620      	mov	r0, r4
 800c004:	f002 fb92 	bl	800e72c <__d2b>
 800c008:	ec49 8b18 	vmov	d8, r8, r9
 800c00c:	9012      	str	r0, [sp, #72]	; 0x48
 800c00e:	2800      	cmp	r0, #0
 800c010:	f43f aefe 	beq.w	800be10 <_strtod_l+0x478>
 800c014:	2101      	movs	r1, #1
 800c016:	4620      	mov	r0, r4
 800c018:	f002 f8dc 	bl	800e1d4 <__i2b>
 800c01c:	4606      	mov	r6, r0
 800c01e:	2800      	cmp	r0, #0
 800c020:	f43f aef6 	beq.w	800be10 <_strtod_l+0x478>
 800c024:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c026:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c028:	2b00      	cmp	r3, #0
 800c02a:	bfab      	itete	ge
 800c02c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800c02e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800c030:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800c034:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800c038:	bfac      	ite	ge
 800c03a:	eb03 0b02 	addge.w	fp, r3, r2
 800c03e:	eba2 0a03 	sublt.w	sl, r2, r3
 800c042:	9a04      	ldr	r2, [sp, #16]
 800c044:	1a9b      	subs	r3, r3, r2
 800c046:	440b      	add	r3, r1
 800c048:	4a7a      	ldr	r2, [pc, #488]	; (800c234 <_strtod_l+0x89c>)
 800c04a:	3b01      	subs	r3, #1
 800c04c:	4293      	cmp	r3, r2
 800c04e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800c052:	f280 80cd 	bge.w	800c1f0 <_strtod_l+0x858>
 800c056:	1ad2      	subs	r2, r2, r3
 800c058:	2a1f      	cmp	r2, #31
 800c05a:	eba1 0102 	sub.w	r1, r1, r2
 800c05e:	f04f 0001 	mov.w	r0, #1
 800c062:	f300 80b9 	bgt.w	800c1d8 <_strtod_l+0x840>
 800c066:	fa00 f302 	lsl.w	r3, r0, r2
 800c06a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c06c:	2300      	movs	r3, #0
 800c06e:	930a      	str	r3, [sp, #40]	; 0x28
 800c070:	eb0b 0301 	add.w	r3, fp, r1
 800c074:	9a04      	ldr	r2, [sp, #16]
 800c076:	459b      	cmp	fp, r3
 800c078:	448a      	add	sl, r1
 800c07a:	4492      	add	sl, r2
 800c07c:	465a      	mov	r2, fp
 800c07e:	bfa8      	it	ge
 800c080:	461a      	movge	r2, r3
 800c082:	4552      	cmp	r2, sl
 800c084:	bfa8      	it	ge
 800c086:	4652      	movge	r2, sl
 800c088:	2a00      	cmp	r2, #0
 800c08a:	bfc2      	ittt	gt
 800c08c:	1a9b      	subgt	r3, r3, r2
 800c08e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800c092:	ebab 0b02 	subgt.w	fp, fp, r2
 800c096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c098:	2a00      	cmp	r2, #0
 800c09a:	dd18      	ble.n	800c0ce <_strtod_l+0x736>
 800c09c:	4631      	mov	r1, r6
 800c09e:	4620      	mov	r0, r4
 800c0a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0a2:	f002 f957 	bl	800e354 <__pow5mult>
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	f43f aeb1 	beq.w	800be10 <_strtod_l+0x478>
 800c0ae:	4601      	mov	r1, r0
 800c0b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f002 f8a4 	bl	800e200 <__multiply>
 800c0b8:	900e      	str	r0, [sp, #56]	; 0x38
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	f43f aea8 	beq.w	800be10 <_strtod_l+0x478>
 800c0c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f001 ff84 	bl	800dfd0 <_Bfree>
 800c0c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0cc:	9212      	str	r2, [sp, #72]	; 0x48
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f300 8093 	bgt.w	800c1fa <_strtod_l+0x862>
 800c0d4:	9b07      	ldr	r3, [sp, #28]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	dd08      	ble.n	800c0ec <_strtod_l+0x754>
 800c0da:	4639      	mov	r1, r7
 800c0dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f002 f938 	bl	800e354 <__pow5mult>
 800c0e4:	4607      	mov	r7, r0
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	f43f ae92 	beq.w	800be10 <_strtod_l+0x478>
 800c0ec:	f1ba 0f00 	cmp.w	sl, #0
 800c0f0:	dd08      	ble.n	800c104 <_strtod_l+0x76c>
 800c0f2:	4639      	mov	r1, r7
 800c0f4:	4652      	mov	r2, sl
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f002 f986 	bl	800e408 <__lshift>
 800c0fc:	4607      	mov	r7, r0
 800c0fe:	2800      	cmp	r0, #0
 800c100:	f43f ae86 	beq.w	800be10 <_strtod_l+0x478>
 800c104:	f1bb 0f00 	cmp.w	fp, #0
 800c108:	dd08      	ble.n	800c11c <_strtod_l+0x784>
 800c10a:	4631      	mov	r1, r6
 800c10c:	465a      	mov	r2, fp
 800c10e:	4620      	mov	r0, r4
 800c110:	f002 f97a 	bl	800e408 <__lshift>
 800c114:	4606      	mov	r6, r0
 800c116:	2800      	cmp	r0, #0
 800c118:	f43f ae7a 	beq.w	800be10 <_strtod_l+0x478>
 800c11c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c11e:	463a      	mov	r2, r7
 800c120:	4620      	mov	r0, r4
 800c122:	f002 f9fd 	bl	800e520 <__mdiff>
 800c126:	4605      	mov	r5, r0
 800c128:	2800      	cmp	r0, #0
 800c12a:	f43f ae71 	beq.w	800be10 <_strtod_l+0x478>
 800c12e:	2300      	movs	r3, #0
 800c130:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800c134:	60c3      	str	r3, [r0, #12]
 800c136:	4631      	mov	r1, r6
 800c138:	f002 f9d6 	bl	800e4e8 <__mcmp>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	da7d      	bge.n	800c23c <_strtod_l+0x8a4>
 800c140:	ea5a 0308 	orrs.w	r3, sl, r8
 800c144:	f040 80a3 	bne.w	800c28e <_strtod_l+0x8f6>
 800c148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f040 809e 	bne.w	800c28e <_strtod_l+0x8f6>
 800c152:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c156:	0d1b      	lsrs	r3, r3, #20
 800c158:	051b      	lsls	r3, r3, #20
 800c15a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c15e:	f240 8096 	bls.w	800c28e <_strtod_l+0x8f6>
 800c162:	696b      	ldr	r3, [r5, #20]
 800c164:	b91b      	cbnz	r3, 800c16e <_strtod_l+0x7d6>
 800c166:	692b      	ldr	r3, [r5, #16]
 800c168:	2b01      	cmp	r3, #1
 800c16a:	f340 8090 	ble.w	800c28e <_strtod_l+0x8f6>
 800c16e:	4629      	mov	r1, r5
 800c170:	2201      	movs	r2, #1
 800c172:	4620      	mov	r0, r4
 800c174:	f002 f948 	bl	800e408 <__lshift>
 800c178:	4631      	mov	r1, r6
 800c17a:	4605      	mov	r5, r0
 800c17c:	f002 f9b4 	bl	800e4e8 <__mcmp>
 800c180:	2800      	cmp	r0, #0
 800c182:	f340 8084 	ble.w	800c28e <_strtod_l+0x8f6>
 800c186:	9904      	ldr	r1, [sp, #16]
 800c188:	4a2b      	ldr	r2, [pc, #172]	; (800c238 <_strtod_l+0x8a0>)
 800c18a:	464b      	mov	r3, r9
 800c18c:	2900      	cmp	r1, #0
 800c18e:	f000 809d 	beq.w	800c2cc <_strtod_l+0x934>
 800c192:	ea02 0109 	and.w	r1, r2, r9
 800c196:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c19a:	f300 8097 	bgt.w	800c2cc <_strtod_l+0x934>
 800c19e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c1a2:	f77f aea5 	ble.w	800bef0 <_strtod_l+0x558>
 800c1a6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c228 <_strtod_l+0x890>
 800c1aa:	ec49 8b16 	vmov	d6, r8, r9
 800c1ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c1b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c1b6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	bf08      	it	eq
 800c1be:	2322      	moveq	r3, #34	; 0x22
 800c1c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c1c4:	bf08      	it	eq
 800c1c6:	6023      	streq	r3, [r4, #0]
 800c1c8:	e62c      	b.n	800be24 <_strtod_l+0x48c>
 800c1ca:	f04f 31ff 	mov.w	r1, #4294967295
 800c1ce:	fa01 f202 	lsl.w	r2, r1, r2
 800c1d2:	ea02 0808 	and.w	r8, r2, r8
 800c1d6:	e6d9      	b.n	800bf8c <_strtod_l+0x5f4>
 800c1d8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800c1dc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c1e0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800c1e4:	33e2      	adds	r3, #226	; 0xe2
 800c1e6:	fa00 f303 	lsl.w	r3, r0, r3
 800c1ea:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800c1ee:	e73f      	b.n	800c070 <_strtod_l+0x6d8>
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c1f8:	e73a      	b.n	800c070 <_strtod_l+0x6d8>
 800c1fa:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	4620      	mov	r0, r4
 800c200:	f002 f902 	bl	800e408 <__lshift>
 800c204:	9012      	str	r0, [sp, #72]	; 0x48
 800c206:	2800      	cmp	r0, #0
 800c208:	f47f af64 	bne.w	800c0d4 <_strtod_l+0x73c>
 800c20c:	e600      	b.n	800be10 <_strtod_l+0x478>
 800c20e:	bf00      	nop
 800c210:	94a03595 	.word	0x94a03595
 800c214:	3fcfffff 	.word	0x3fcfffff
 800c218:	94a03595 	.word	0x94a03595
 800c21c:	3fdfffff 	.word	0x3fdfffff
 800c220:	35afe535 	.word	0x35afe535
 800c224:	3fe00000 	.word	0x3fe00000
 800c228:	00000000 	.word	0x00000000
 800c22c:	39500000 	.word	0x39500000
 800c230:	0800ff50 	.word	0x0800ff50
 800c234:	fffffc02 	.word	0xfffffc02
 800c238:	7ff00000 	.word	0x7ff00000
 800c23c:	46cb      	mov	fp, r9
 800c23e:	d15f      	bne.n	800c300 <_strtod_l+0x968>
 800c240:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c244:	f1ba 0f00 	cmp.w	sl, #0
 800c248:	d02a      	beq.n	800c2a0 <_strtod_l+0x908>
 800c24a:	4aa7      	ldr	r2, [pc, #668]	; (800c4e8 <_strtod_l+0xb50>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d12b      	bne.n	800c2a8 <_strtod_l+0x910>
 800c250:	9b04      	ldr	r3, [sp, #16]
 800c252:	4642      	mov	r2, r8
 800c254:	b1fb      	cbz	r3, 800c296 <_strtod_l+0x8fe>
 800c256:	4ba5      	ldr	r3, [pc, #660]	; (800c4ec <_strtod_l+0xb54>)
 800c258:	ea09 0303 	and.w	r3, r9, r3
 800c25c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c260:	f04f 31ff 	mov.w	r1, #4294967295
 800c264:	d81a      	bhi.n	800c29c <_strtod_l+0x904>
 800c266:	0d1b      	lsrs	r3, r3, #20
 800c268:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c26c:	fa01 f303 	lsl.w	r3, r1, r3
 800c270:	429a      	cmp	r2, r3
 800c272:	d119      	bne.n	800c2a8 <_strtod_l+0x910>
 800c274:	4b9e      	ldr	r3, [pc, #632]	; (800c4f0 <_strtod_l+0xb58>)
 800c276:	459b      	cmp	fp, r3
 800c278:	d102      	bne.n	800c280 <_strtod_l+0x8e8>
 800c27a:	3201      	adds	r2, #1
 800c27c:	f43f adc8 	beq.w	800be10 <_strtod_l+0x478>
 800c280:	4b9a      	ldr	r3, [pc, #616]	; (800c4ec <_strtod_l+0xb54>)
 800c282:	ea0b 0303 	and.w	r3, fp, r3
 800c286:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c28a:	f04f 0800 	mov.w	r8, #0
 800c28e:	9b04      	ldr	r3, [sp, #16]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d188      	bne.n	800c1a6 <_strtod_l+0x80e>
 800c294:	e5c6      	b.n	800be24 <_strtod_l+0x48c>
 800c296:	f04f 33ff 	mov.w	r3, #4294967295
 800c29a:	e7e9      	b.n	800c270 <_strtod_l+0x8d8>
 800c29c:	460b      	mov	r3, r1
 800c29e:	e7e7      	b.n	800c270 <_strtod_l+0x8d8>
 800c2a0:	ea53 0308 	orrs.w	r3, r3, r8
 800c2a4:	f43f af6f 	beq.w	800c186 <_strtod_l+0x7ee>
 800c2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2aa:	b1cb      	cbz	r3, 800c2e0 <_strtod_l+0x948>
 800c2ac:	ea13 0f0b 	tst.w	r3, fp
 800c2b0:	d0ed      	beq.n	800c28e <_strtod_l+0x8f6>
 800c2b2:	9a04      	ldr	r2, [sp, #16]
 800c2b4:	4640      	mov	r0, r8
 800c2b6:	4649      	mov	r1, r9
 800c2b8:	f1ba 0f00 	cmp.w	sl, #0
 800c2bc:	d014      	beq.n	800c2e8 <_strtod_l+0x950>
 800c2be:	f7ff fb51 	bl	800b964 <sulp>
 800c2c2:	ee38 7b00 	vadd.f64	d7, d8, d0
 800c2c6:	ec59 8b17 	vmov	r8, r9, d7
 800c2ca:	e7e0      	b.n	800c28e <_strtod_l+0x8f6>
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c2d2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c2d6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c2da:	f04f 38ff 	mov.w	r8, #4294967295
 800c2de:	e7d6      	b.n	800c28e <_strtod_l+0x8f6>
 800c2e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2e2:	ea13 0f08 	tst.w	r3, r8
 800c2e6:	e7e3      	b.n	800c2b0 <_strtod_l+0x918>
 800c2e8:	f7ff fb3c 	bl	800b964 <sulp>
 800c2ec:	ee38 0b40 	vsub.f64	d0, d8, d0
 800c2f0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f8:	ec59 8b10 	vmov	r8, r9, d0
 800c2fc:	d1c7      	bne.n	800c28e <_strtod_l+0x8f6>
 800c2fe:	e5f7      	b.n	800bef0 <_strtod_l+0x558>
 800c300:	4631      	mov	r1, r6
 800c302:	4628      	mov	r0, r5
 800c304:	f002 fa6e 	bl	800e7e4 <__ratio>
 800c308:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c30c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c314:	d865      	bhi.n	800c3e2 <_strtod_l+0xa4a>
 800c316:	f1ba 0f00 	cmp.w	sl, #0
 800c31a:	d042      	beq.n	800c3a2 <_strtod_l+0xa0a>
 800c31c:	4b75      	ldr	r3, [pc, #468]	; (800c4f4 <_strtod_l+0xb5c>)
 800c31e:	2200      	movs	r2, #0
 800c320:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c324:	4871      	ldr	r0, [pc, #452]	; (800c4ec <_strtod_l+0xb54>)
 800c326:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800c500 <_strtod_l+0xb68>
 800c32a:	ea0b 0100 	and.w	r1, fp, r0
 800c32e:	4561      	cmp	r1, ip
 800c330:	f040 808e 	bne.w	800c450 <_strtod_l+0xab8>
 800c334:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800c338:	ec49 8b10 	vmov	d0, r8, r9
 800c33c:	ec43 2b1c 	vmov	d12, r2, r3
 800c340:	910a      	str	r1, [sp, #40]	; 0x28
 800c342:	f002 f977 	bl	800e634 <__ulp>
 800c346:	ec49 8b1e 	vmov	d14, r8, r9
 800c34a:	4868      	ldr	r0, [pc, #416]	; (800c4ec <_strtod_l+0xb54>)
 800c34c:	eeac eb00 	vfma.f64	d14, d12, d0
 800c350:	ee1e 3a90 	vmov	r3, s29
 800c354:	4a68      	ldr	r2, [pc, #416]	; (800c4f8 <_strtod_l+0xb60>)
 800c356:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c358:	4018      	ands	r0, r3
 800c35a:	4290      	cmp	r0, r2
 800c35c:	ec59 8b1e 	vmov	r8, r9, d14
 800c360:	d94e      	bls.n	800c400 <_strtod_l+0xa68>
 800c362:	ee18 3a90 	vmov	r3, s17
 800c366:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d104      	bne.n	800c378 <_strtod_l+0x9e0>
 800c36e:	ee18 3a10 	vmov	r3, s16
 800c372:	3301      	adds	r3, #1
 800c374:	f43f ad4c 	beq.w	800be10 <_strtod_l+0x478>
 800c378:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800c4f0 <_strtod_l+0xb58>
 800c37c:	f04f 38ff 	mov.w	r8, #4294967295
 800c380:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c382:	4620      	mov	r0, r4
 800c384:	f001 fe24 	bl	800dfd0 <_Bfree>
 800c388:	4639      	mov	r1, r7
 800c38a:	4620      	mov	r0, r4
 800c38c:	f001 fe20 	bl	800dfd0 <_Bfree>
 800c390:	4631      	mov	r1, r6
 800c392:	4620      	mov	r0, r4
 800c394:	f001 fe1c 	bl	800dfd0 <_Bfree>
 800c398:	4629      	mov	r1, r5
 800c39a:	4620      	mov	r0, r4
 800c39c:	f001 fe18 	bl	800dfd0 <_Bfree>
 800c3a0:	e619      	b.n	800bfd6 <_strtod_l+0x63e>
 800c3a2:	f1b8 0f00 	cmp.w	r8, #0
 800c3a6:	d112      	bne.n	800c3ce <_strtod_l+0xa36>
 800c3a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3ac:	b9b3      	cbnz	r3, 800c3dc <_strtod_l+0xa44>
 800c3ae:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c3b2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ba:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c3be:	bf58      	it	pl
 800c3c0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800c3c4:	eeb1 7b4d 	vneg.f64	d7, d13
 800c3c8:	ec53 2b17 	vmov	r2, r3, d7
 800c3cc:	e7aa      	b.n	800c324 <_strtod_l+0x98c>
 800c3ce:	f1b8 0f01 	cmp.w	r8, #1
 800c3d2:	d103      	bne.n	800c3dc <_strtod_l+0xa44>
 800c3d4:	f1b9 0f00 	cmp.w	r9, #0
 800c3d8:	f43f ad8a 	beq.w	800bef0 <_strtod_l+0x558>
 800c3dc:	4b47      	ldr	r3, [pc, #284]	; (800c4fc <_strtod_l+0xb64>)
 800c3de:	2200      	movs	r2, #0
 800c3e0:	e79e      	b.n	800c320 <_strtod_l+0x988>
 800c3e2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c3e6:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c3ea:	f1ba 0f00 	cmp.w	sl, #0
 800c3ee:	d104      	bne.n	800c3fa <_strtod_l+0xa62>
 800c3f0:	eeb1 7b4d 	vneg.f64	d7, d13
 800c3f4:	ec53 2b17 	vmov	r2, r3, d7
 800c3f8:	e794      	b.n	800c324 <_strtod_l+0x98c>
 800c3fa:	eeb0 7b4d 	vmov.f64	d7, d13
 800c3fe:	e7f9      	b.n	800c3f4 <_strtod_l+0xa5c>
 800c400:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c404:	9b04      	ldr	r3, [sp, #16]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1ba      	bne.n	800c380 <_strtod_l+0x9e8>
 800c40a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c40e:	0d1b      	lsrs	r3, r3, #20
 800c410:	051b      	lsls	r3, r3, #20
 800c412:	4299      	cmp	r1, r3
 800c414:	d1b4      	bne.n	800c380 <_strtod_l+0x9e8>
 800c416:	ec51 0b1d 	vmov	r0, r1, d13
 800c41a:	f7f4 f93d 	bl	8000698 <__aeabi_d2lz>
 800c41e:	f7f4 f8f5 	bl	800060c <__aeabi_l2d>
 800c422:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c426:	ec41 0b17 	vmov	d7, r0, r1
 800c42a:	ea43 0308 	orr.w	r3, r3, r8
 800c42e:	ea53 030a 	orrs.w	r3, r3, sl
 800c432:	ee3d db47 	vsub.f64	d13, d13, d7
 800c436:	d03c      	beq.n	800c4b2 <_strtod_l+0xb1a>
 800c438:	eeb4 dbca 	vcmpe.f64	d13, d10
 800c43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c440:	f53f acf0 	bmi.w	800be24 <_strtod_l+0x48c>
 800c444:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800c448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c44c:	dd98      	ble.n	800c380 <_strtod_l+0x9e8>
 800c44e:	e4e9      	b.n	800be24 <_strtod_l+0x48c>
 800c450:	9804      	ldr	r0, [sp, #16]
 800c452:	b1f0      	cbz	r0, 800c492 <_strtod_l+0xafa>
 800c454:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800c458:	d81b      	bhi.n	800c492 <_strtod_l+0xafa>
 800c45a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800c4e0 <_strtod_l+0xb48>
 800c45e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800c462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c466:	d811      	bhi.n	800c48c <_strtod_l+0xaf4>
 800c468:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800c46c:	ee1d 3a10 	vmov	r3, s26
 800c470:	2b01      	cmp	r3, #1
 800c472:	bf38      	it	cc
 800c474:	2301      	movcc	r3, #1
 800c476:	ee0d 3a10 	vmov	s26, r3
 800c47a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800c47e:	f1ba 0f00 	cmp.w	sl, #0
 800c482:	d113      	bne.n	800c4ac <_strtod_l+0xb14>
 800c484:	eeb1 7b4d 	vneg.f64	d7, d13
 800c488:	ec53 2b17 	vmov	r2, r3, d7
 800c48c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800c490:	1a43      	subs	r3, r0, r1
 800c492:	eeb0 0b48 	vmov.f64	d0, d8
 800c496:	ec43 2b1c 	vmov	d12, r2, r3
 800c49a:	910a      	str	r1, [sp, #40]	; 0x28
 800c49c:	f002 f8ca 	bl	800e634 <__ulp>
 800c4a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c4a2:	eeac 8b00 	vfma.f64	d8, d12, d0
 800c4a6:	ec59 8b18 	vmov	r8, r9, d8
 800c4aa:	e7ab      	b.n	800c404 <_strtod_l+0xa6c>
 800c4ac:	eeb0 7b4d 	vmov.f64	d7, d13
 800c4b0:	e7ea      	b.n	800c488 <_strtod_l+0xaf0>
 800c4b2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800c4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ba:	f57f af61 	bpl.w	800c380 <_strtod_l+0x9e8>
 800c4be:	e4b1      	b.n	800be24 <_strtod_l+0x48c>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	9308      	str	r3, [sp, #32]
 800c4c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c4c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	f7ff baad 	b.w	800ba28 <_strtod_l+0x90>
 800c4ce:	2a65      	cmp	r2, #101	; 0x65
 800c4d0:	f43f ab9f 	beq.w	800bc12 <_strtod_l+0x27a>
 800c4d4:	2a45      	cmp	r2, #69	; 0x45
 800c4d6:	f43f ab9c 	beq.w	800bc12 <_strtod_l+0x27a>
 800c4da:	2101      	movs	r1, #1
 800c4dc:	f7ff bbd4 	b.w	800bc88 <_strtod_l+0x2f0>
 800c4e0:	ffc00000 	.word	0xffc00000
 800c4e4:	41dfffff 	.word	0x41dfffff
 800c4e8:	000fffff 	.word	0x000fffff
 800c4ec:	7ff00000 	.word	0x7ff00000
 800c4f0:	7fefffff 	.word	0x7fefffff
 800c4f4:	3ff00000 	.word	0x3ff00000
 800c4f8:	7c9fffff 	.word	0x7c9fffff
 800c4fc:	bff00000 	.word	0xbff00000
 800c500:	7fe00000 	.word	0x7fe00000

0800c504 <_strtod_r>:
 800c504:	4b01      	ldr	r3, [pc, #4]	; (800c50c <_strtod_r+0x8>)
 800c506:	f7ff ba47 	b.w	800b998 <_strtod_l>
 800c50a:	bf00      	nop
 800c50c:	200005ac 	.word	0x200005ac

0800c510 <_strtol_l.constprop.0>:
 800c510:	2b01      	cmp	r3, #1
 800c512:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c516:	d001      	beq.n	800c51c <_strtol_l.constprop.0+0xc>
 800c518:	2b24      	cmp	r3, #36	; 0x24
 800c51a:	d906      	bls.n	800c52a <_strtol_l.constprop.0+0x1a>
 800c51c:	f7fe f9b0 	bl	800a880 <__errno>
 800c520:	2316      	movs	r3, #22
 800c522:	6003      	str	r3, [r0, #0]
 800c524:	2000      	movs	r0, #0
 800c526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c52a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c610 <_strtol_l.constprop.0+0x100>
 800c52e:	460d      	mov	r5, r1
 800c530:	462e      	mov	r6, r5
 800c532:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c536:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c53a:	f017 0708 	ands.w	r7, r7, #8
 800c53e:	d1f7      	bne.n	800c530 <_strtol_l.constprop.0+0x20>
 800c540:	2c2d      	cmp	r4, #45	; 0x2d
 800c542:	d132      	bne.n	800c5aa <_strtol_l.constprop.0+0x9a>
 800c544:	782c      	ldrb	r4, [r5, #0]
 800c546:	2701      	movs	r7, #1
 800c548:	1cb5      	adds	r5, r6, #2
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d05b      	beq.n	800c606 <_strtol_l.constprop.0+0xf6>
 800c54e:	2b10      	cmp	r3, #16
 800c550:	d109      	bne.n	800c566 <_strtol_l.constprop.0+0x56>
 800c552:	2c30      	cmp	r4, #48	; 0x30
 800c554:	d107      	bne.n	800c566 <_strtol_l.constprop.0+0x56>
 800c556:	782c      	ldrb	r4, [r5, #0]
 800c558:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c55c:	2c58      	cmp	r4, #88	; 0x58
 800c55e:	d14d      	bne.n	800c5fc <_strtol_l.constprop.0+0xec>
 800c560:	786c      	ldrb	r4, [r5, #1]
 800c562:	2310      	movs	r3, #16
 800c564:	3502      	adds	r5, #2
 800c566:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c56a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c56e:	f04f 0c00 	mov.w	ip, #0
 800c572:	fbb8 f9f3 	udiv	r9, r8, r3
 800c576:	4666      	mov	r6, ip
 800c578:	fb03 8a19 	mls	sl, r3, r9, r8
 800c57c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c580:	f1be 0f09 	cmp.w	lr, #9
 800c584:	d816      	bhi.n	800c5b4 <_strtol_l.constprop.0+0xa4>
 800c586:	4674      	mov	r4, lr
 800c588:	42a3      	cmp	r3, r4
 800c58a:	dd24      	ble.n	800c5d6 <_strtol_l.constprop.0+0xc6>
 800c58c:	f1bc 0f00 	cmp.w	ip, #0
 800c590:	db1e      	blt.n	800c5d0 <_strtol_l.constprop.0+0xc0>
 800c592:	45b1      	cmp	r9, r6
 800c594:	d31c      	bcc.n	800c5d0 <_strtol_l.constprop.0+0xc0>
 800c596:	d101      	bne.n	800c59c <_strtol_l.constprop.0+0x8c>
 800c598:	45a2      	cmp	sl, r4
 800c59a:	db19      	blt.n	800c5d0 <_strtol_l.constprop.0+0xc0>
 800c59c:	fb06 4603 	mla	r6, r6, r3, r4
 800c5a0:	f04f 0c01 	mov.w	ip, #1
 800c5a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c5a8:	e7e8      	b.n	800c57c <_strtol_l.constprop.0+0x6c>
 800c5aa:	2c2b      	cmp	r4, #43	; 0x2b
 800c5ac:	bf04      	itt	eq
 800c5ae:	782c      	ldrbeq	r4, [r5, #0]
 800c5b0:	1cb5      	addeq	r5, r6, #2
 800c5b2:	e7ca      	b.n	800c54a <_strtol_l.constprop.0+0x3a>
 800c5b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c5b8:	f1be 0f19 	cmp.w	lr, #25
 800c5bc:	d801      	bhi.n	800c5c2 <_strtol_l.constprop.0+0xb2>
 800c5be:	3c37      	subs	r4, #55	; 0x37
 800c5c0:	e7e2      	b.n	800c588 <_strtol_l.constprop.0+0x78>
 800c5c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c5c6:	f1be 0f19 	cmp.w	lr, #25
 800c5ca:	d804      	bhi.n	800c5d6 <_strtol_l.constprop.0+0xc6>
 800c5cc:	3c57      	subs	r4, #87	; 0x57
 800c5ce:	e7db      	b.n	800c588 <_strtol_l.constprop.0+0x78>
 800c5d0:	f04f 3cff 	mov.w	ip, #4294967295
 800c5d4:	e7e6      	b.n	800c5a4 <_strtol_l.constprop.0+0x94>
 800c5d6:	f1bc 0f00 	cmp.w	ip, #0
 800c5da:	da05      	bge.n	800c5e8 <_strtol_l.constprop.0+0xd8>
 800c5dc:	2322      	movs	r3, #34	; 0x22
 800c5de:	6003      	str	r3, [r0, #0]
 800c5e0:	4646      	mov	r6, r8
 800c5e2:	b942      	cbnz	r2, 800c5f6 <_strtol_l.constprop.0+0xe6>
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	e79e      	b.n	800c526 <_strtol_l.constprop.0+0x16>
 800c5e8:	b107      	cbz	r7, 800c5ec <_strtol_l.constprop.0+0xdc>
 800c5ea:	4276      	negs	r6, r6
 800c5ec:	2a00      	cmp	r2, #0
 800c5ee:	d0f9      	beq.n	800c5e4 <_strtol_l.constprop.0+0xd4>
 800c5f0:	f1bc 0f00 	cmp.w	ip, #0
 800c5f4:	d000      	beq.n	800c5f8 <_strtol_l.constprop.0+0xe8>
 800c5f6:	1e69      	subs	r1, r5, #1
 800c5f8:	6011      	str	r1, [r2, #0]
 800c5fa:	e7f3      	b.n	800c5e4 <_strtol_l.constprop.0+0xd4>
 800c5fc:	2430      	movs	r4, #48	; 0x30
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1b1      	bne.n	800c566 <_strtol_l.constprop.0+0x56>
 800c602:	2308      	movs	r3, #8
 800c604:	e7af      	b.n	800c566 <_strtol_l.constprop.0+0x56>
 800c606:	2c30      	cmp	r4, #48	; 0x30
 800c608:	d0a5      	beq.n	800c556 <_strtol_l.constprop.0+0x46>
 800c60a:	230a      	movs	r3, #10
 800c60c:	e7ab      	b.n	800c566 <_strtol_l.constprop.0+0x56>
 800c60e:	bf00      	nop
 800c610:	0800ffb5 	.word	0x0800ffb5

0800c614 <_strtol_r>:
 800c614:	f7ff bf7c 	b.w	800c510 <_strtol_l.constprop.0>

0800c618 <__swbuf_r>:
 800c618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c61a:	460e      	mov	r6, r1
 800c61c:	4614      	mov	r4, r2
 800c61e:	4605      	mov	r5, r0
 800c620:	b118      	cbz	r0, 800c62a <__swbuf_r+0x12>
 800c622:	6983      	ldr	r3, [r0, #24]
 800c624:	b90b      	cbnz	r3, 800c62a <__swbuf_r+0x12>
 800c626:	f000 ffeb 	bl	800d600 <__sinit>
 800c62a:	4b21      	ldr	r3, [pc, #132]	; (800c6b0 <__swbuf_r+0x98>)
 800c62c:	429c      	cmp	r4, r3
 800c62e:	d12b      	bne.n	800c688 <__swbuf_r+0x70>
 800c630:	686c      	ldr	r4, [r5, #4]
 800c632:	69a3      	ldr	r3, [r4, #24]
 800c634:	60a3      	str	r3, [r4, #8]
 800c636:	89a3      	ldrh	r3, [r4, #12]
 800c638:	071a      	lsls	r2, r3, #28
 800c63a:	d52f      	bpl.n	800c69c <__swbuf_r+0x84>
 800c63c:	6923      	ldr	r3, [r4, #16]
 800c63e:	b36b      	cbz	r3, 800c69c <__swbuf_r+0x84>
 800c640:	6923      	ldr	r3, [r4, #16]
 800c642:	6820      	ldr	r0, [r4, #0]
 800c644:	1ac0      	subs	r0, r0, r3
 800c646:	6963      	ldr	r3, [r4, #20]
 800c648:	b2f6      	uxtb	r6, r6
 800c64a:	4283      	cmp	r3, r0
 800c64c:	4637      	mov	r7, r6
 800c64e:	dc04      	bgt.n	800c65a <__swbuf_r+0x42>
 800c650:	4621      	mov	r1, r4
 800c652:	4628      	mov	r0, r5
 800c654:	f000 ff40 	bl	800d4d8 <_fflush_r>
 800c658:	bb30      	cbnz	r0, 800c6a8 <__swbuf_r+0x90>
 800c65a:	68a3      	ldr	r3, [r4, #8]
 800c65c:	3b01      	subs	r3, #1
 800c65e:	60a3      	str	r3, [r4, #8]
 800c660:	6823      	ldr	r3, [r4, #0]
 800c662:	1c5a      	adds	r2, r3, #1
 800c664:	6022      	str	r2, [r4, #0]
 800c666:	701e      	strb	r6, [r3, #0]
 800c668:	6963      	ldr	r3, [r4, #20]
 800c66a:	3001      	adds	r0, #1
 800c66c:	4283      	cmp	r3, r0
 800c66e:	d004      	beq.n	800c67a <__swbuf_r+0x62>
 800c670:	89a3      	ldrh	r3, [r4, #12]
 800c672:	07db      	lsls	r3, r3, #31
 800c674:	d506      	bpl.n	800c684 <__swbuf_r+0x6c>
 800c676:	2e0a      	cmp	r6, #10
 800c678:	d104      	bne.n	800c684 <__swbuf_r+0x6c>
 800c67a:	4621      	mov	r1, r4
 800c67c:	4628      	mov	r0, r5
 800c67e:	f000 ff2b 	bl	800d4d8 <_fflush_r>
 800c682:	b988      	cbnz	r0, 800c6a8 <__swbuf_r+0x90>
 800c684:	4638      	mov	r0, r7
 800c686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c688:	4b0a      	ldr	r3, [pc, #40]	; (800c6b4 <__swbuf_r+0x9c>)
 800c68a:	429c      	cmp	r4, r3
 800c68c:	d101      	bne.n	800c692 <__swbuf_r+0x7a>
 800c68e:	68ac      	ldr	r4, [r5, #8]
 800c690:	e7cf      	b.n	800c632 <__swbuf_r+0x1a>
 800c692:	4b09      	ldr	r3, [pc, #36]	; (800c6b8 <__swbuf_r+0xa0>)
 800c694:	429c      	cmp	r4, r3
 800c696:	bf08      	it	eq
 800c698:	68ec      	ldreq	r4, [r5, #12]
 800c69a:	e7ca      	b.n	800c632 <__swbuf_r+0x1a>
 800c69c:	4621      	mov	r1, r4
 800c69e:	4628      	mov	r0, r5
 800c6a0:	f000 f80c 	bl	800c6bc <__swsetup_r>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d0cb      	beq.n	800c640 <__swbuf_r+0x28>
 800c6a8:	f04f 37ff 	mov.w	r7, #4294967295
 800c6ac:	e7ea      	b.n	800c684 <__swbuf_r+0x6c>
 800c6ae:	bf00      	nop
 800c6b0:	08010150 	.word	0x08010150
 800c6b4:	08010170 	.word	0x08010170
 800c6b8:	08010130 	.word	0x08010130

0800c6bc <__swsetup_r>:
 800c6bc:	4b32      	ldr	r3, [pc, #200]	; (800c788 <__swsetup_r+0xcc>)
 800c6be:	b570      	push	{r4, r5, r6, lr}
 800c6c0:	681d      	ldr	r5, [r3, #0]
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	460c      	mov	r4, r1
 800c6c6:	b125      	cbz	r5, 800c6d2 <__swsetup_r+0x16>
 800c6c8:	69ab      	ldr	r3, [r5, #24]
 800c6ca:	b913      	cbnz	r3, 800c6d2 <__swsetup_r+0x16>
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	f000 ff97 	bl	800d600 <__sinit>
 800c6d2:	4b2e      	ldr	r3, [pc, #184]	; (800c78c <__swsetup_r+0xd0>)
 800c6d4:	429c      	cmp	r4, r3
 800c6d6:	d10f      	bne.n	800c6f8 <__swsetup_r+0x3c>
 800c6d8:	686c      	ldr	r4, [r5, #4]
 800c6da:	89a3      	ldrh	r3, [r4, #12]
 800c6dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6e0:	0719      	lsls	r1, r3, #28
 800c6e2:	d42c      	bmi.n	800c73e <__swsetup_r+0x82>
 800c6e4:	06dd      	lsls	r5, r3, #27
 800c6e6:	d411      	bmi.n	800c70c <__swsetup_r+0x50>
 800c6e8:	2309      	movs	r3, #9
 800c6ea:	6033      	str	r3, [r6, #0]
 800c6ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6f0:	81a3      	strh	r3, [r4, #12]
 800c6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f6:	e03e      	b.n	800c776 <__swsetup_r+0xba>
 800c6f8:	4b25      	ldr	r3, [pc, #148]	; (800c790 <__swsetup_r+0xd4>)
 800c6fa:	429c      	cmp	r4, r3
 800c6fc:	d101      	bne.n	800c702 <__swsetup_r+0x46>
 800c6fe:	68ac      	ldr	r4, [r5, #8]
 800c700:	e7eb      	b.n	800c6da <__swsetup_r+0x1e>
 800c702:	4b24      	ldr	r3, [pc, #144]	; (800c794 <__swsetup_r+0xd8>)
 800c704:	429c      	cmp	r4, r3
 800c706:	bf08      	it	eq
 800c708:	68ec      	ldreq	r4, [r5, #12]
 800c70a:	e7e6      	b.n	800c6da <__swsetup_r+0x1e>
 800c70c:	0758      	lsls	r0, r3, #29
 800c70e:	d512      	bpl.n	800c736 <__swsetup_r+0x7a>
 800c710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c712:	b141      	cbz	r1, 800c726 <__swsetup_r+0x6a>
 800c714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c718:	4299      	cmp	r1, r3
 800c71a:	d002      	beq.n	800c722 <__swsetup_r+0x66>
 800c71c:	4630      	mov	r0, r6
 800c71e:	f7fe f8f7 	bl	800a910 <_free_r>
 800c722:	2300      	movs	r3, #0
 800c724:	6363      	str	r3, [r4, #52]	; 0x34
 800c726:	89a3      	ldrh	r3, [r4, #12]
 800c728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c72c:	81a3      	strh	r3, [r4, #12]
 800c72e:	2300      	movs	r3, #0
 800c730:	6063      	str	r3, [r4, #4]
 800c732:	6923      	ldr	r3, [r4, #16]
 800c734:	6023      	str	r3, [r4, #0]
 800c736:	89a3      	ldrh	r3, [r4, #12]
 800c738:	f043 0308 	orr.w	r3, r3, #8
 800c73c:	81a3      	strh	r3, [r4, #12]
 800c73e:	6923      	ldr	r3, [r4, #16]
 800c740:	b94b      	cbnz	r3, 800c756 <__swsetup_r+0x9a>
 800c742:	89a3      	ldrh	r3, [r4, #12]
 800c744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c74c:	d003      	beq.n	800c756 <__swsetup_r+0x9a>
 800c74e:	4621      	mov	r1, r4
 800c750:	4630      	mov	r0, r6
 800c752:	f001 fb9f 	bl	800de94 <__smakebuf_r>
 800c756:	89a0      	ldrh	r0, [r4, #12]
 800c758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c75c:	f010 0301 	ands.w	r3, r0, #1
 800c760:	d00a      	beq.n	800c778 <__swsetup_r+0xbc>
 800c762:	2300      	movs	r3, #0
 800c764:	60a3      	str	r3, [r4, #8]
 800c766:	6963      	ldr	r3, [r4, #20]
 800c768:	425b      	negs	r3, r3
 800c76a:	61a3      	str	r3, [r4, #24]
 800c76c:	6923      	ldr	r3, [r4, #16]
 800c76e:	b943      	cbnz	r3, 800c782 <__swsetup_r+0xc6>
 800c770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c774:	d1ba      	bne.n	800c6ec <__swsetup_r+0x30>
 800c776:	bd70      	pop	{r4, r5, r6, pc}
 800c778:	0781      	lsls	r1, r0, #30
 800c77a:	bf58      	it	pl
 800c77c:	6963      	ldrpl	r3, [r4, #20]
 800c77e:	60a3      	str	r3, [r4, #8]
 800c780:	e7f4      	b.n	800c76c <__swsetup_r+0xb0>
 800c782:	2000      	movs	r0, #0
 800c784:	e7f7      	b.n	800c776 <__swsetup_r+0xba>
 800c786:	bf00      	nop
 800c788:	20000544 	.word	0x20000544
 800c78c:	08010150 	.word	0x08010150
 800c790:	08010170 	.word	0x08010170
 800c794:	08010130 	.word	0x08010130

0800c798 <__assert_func>:
 800c798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c79a:	4614      	mov	r4, r2
 800c79c:	461a      	mov	r2, r3
 800c79e:	4b09      	ldr	r3, [pc, #36]	; (800c7c4 <__assert_func+0x2c>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	68d8      	ldr	r0, [r3, #12]
 800c7a6:	b14c      	cbz	r4, 800c7bc <__assert_func+0x24>
 800c7a8:	4b07      	ldr	r3, [pc, #28]	; (800c7c8 <__assert_func+0x30>)
 800c7aa:	9100      	str	r1, [sp, #0]
 800c7ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7b0:	4906      	ldr	r1, [pc, #24]	; (800c7cc <__assert_func+0x34>)
 800c7b2:	462b      	mov	r3, r5
 800c7b4:	f000 ffa2 	bl	800d6fc <fiprintf>
 800c7b8:	f002 fc00 	bl	800efbc <abort>
 800c7bc:	4b04      	ldr	r3, [pc, #16]	; (800c7d0 <__assert_func+0x38>)
 800c7be:	461c      	mov	r4, r3
 800c7c0:	e7f3      	b.n	800c7aa <__assert_func+0x12>
 800c7c2:	bf00      	nop
 800c7c4:	20000544 	.word	0x20000544
 800c7c8:	0800ff78 	.word	0x0800ff78
 800c7cc:	0800ff85 	.word	0x0800ff85
 800c7d0:	0800ffb3 	.word	0x0800ffb3

0800c7d4 <quorem>:
 800c7d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d8:	6903      	ldr	r3, [r0, #16]
 800c7da:	690c      	ldr	r4, [r1, #16]
 800c7dc:	42a3      	cmp	r3, r4
 800c7de:	4607      	mov	r7, r0
 800c7e0:	f2c0 8081 	blt.w	800c8e6 <quorem+0x112>
 800c7e4:	3c01      	subs	r4, #1
 800c7e6:	f101 0814 	add.w	r8, r1, #20
 800c7ea:	f100 0514 	add.w	r5, r0, #20
 800c7ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c7f2:	9301      	str	r3, [sp, #4]
 800c7f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c7f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	429a      	cmp	r2, r3
 800c800:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c804:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c808:	fbb2 f6f3 	udiv	r6, r2, r3
 800c80c:	d331      	bcc.n	800c872 <quorem+0x9e>
 800c80e:	f04f 0e00 	mov.w	lr, #0
 800c812:	4640      	mov	r0, r8
 800c814:	46ac      	mov	ip, r5
 800c816:	46f2      	mov	sl, lr
 800c818:	f850 2b04 	ldr.w	r2, [r0], #4
 800c81c:	b293      	uxth	r3, r2
 800c81e:	fb06 e303 	mla	r3, r6, r3, lr
 800c822:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c826:	b29b      	uxth	r3, r3
 800c828:	ebaa 0303 	sub.w	r3, sl, r3
 800c82c:	f8dc a000 	ldr.w	sl, [ip]
 800c830:	0c12      	lsrs	r2, r2, #16
 800c832:	fa13 f38a 	uxtah	r3, r3, sl
 800c836:	fb06 e202 	mla	r2, r6, r2, lr
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	9b00      	ldr	r3, [sp, #0]
 800c83e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c842:	b292      	uxth	r2, r2
 800c844:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c84c:	f8bd 3000 	ldrh.w	r3, [sp]
 800c850:	4581      	cmp	r9, r0
 800c852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c856:	f84c 3b04 	str.w	r3, [ip], #4
 800c85a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c85e:	d2db      	bcs.n	800c818 <quorem+0x44>
 800c860:	f855 300b 	ldr.w	r3, [r5, fp]
 800c864:	b92b      	cbnz	r3, 800c872 <quorem+0x9e>
 800c866:	9b01      	ldr	r3, [sp, #4]
 800c868:	3b04      	subs	r3, #4
 800c86a:	429d      	cmp	r5, r3
 800c86c:	461a      	mov	r2, r3
 800c86e:	d32e      	bcc.n	800c8ce <quorem+0xfa>
 800c870:	613c      	str	r4, [r7, #16]
 800c872:	4638      	mov	r0, r7
 800c874:	f001 fe38 	bl	800e4e8 <__mcmp>
 800c878:	2800      	cmp	r0, #0
 800c87a:	db24      	blt.n	800c8c6 <quorem+0xf2>
 800c87c:	3601      	adds	r6, #1
 800c87e:	4628      	mov	r0, r5
 800c880:	f04f 0c00 	mov.w	ip, #0
 800c884:	f858 2b04 	ldr.w	r2, [r8], #4
 800c888:	f8d0 e000 	ldr.w	lr, [r0]
 800c88c:	b293      	uxth	r3, r2
 800c88e:	ebac 0303 	sub.w	r3, ip, r3
 800c892:	0c12      	lsrs	r2, r2, #16
 800c894:	fa13 f38e 	uxtah	r3, r3, lr
 800c898:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c89c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8a6:	45c1      	cmp	r9, r8
 800c8a8:	f840 3b04 	str.w	r3, [r0], #4
 800c8ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c8b0:	d2e8      	bcs.n	800c884 <quorem+0xb0>
 800c8b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8ba:	b922      	cbnz	r2, 800c8c6 <quorem+0xf2>
 800c8bc:	3b04      	subs	r3, #4
 800c8be:	429d      	cmp	r5, r3
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	d30a      	bcc.n	800c8da <quorem+0x106>
 800c8c4:	613c      	str	r4, [r7, #16]
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	b003      	add	sp, #12
 800c8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ce:	6812      	ldr	r2, [r2, #0]
 800c8d0:	3b04      	subs	r3, #4
 800c8d2:	2a00      	cmp	r2, #0
 800c8d4:	d1cc      	bne.n	800c870 <quorem+0x9c>
 800c8d6:	3c01      	subs	r4, #1
 800c8d8:	e7c7      	b.n	800c86a <quorem+0x96>
 800c8da:	6812      	ldr	r2, [r2, #0]
 800c8dc:	3b04      	subs	r3, #4
 800c8de:	2a00      	cmp	r2, #0
 800c8e0:	d1f0      	bne.n	800c8c4 <quorem+0xf0>
 800c8e2:	3c01      	subs	r4, #1
 800c8e4:	e7eb      	b.n	800c8be <quorem+0xea>
 800c8e6:	2000      	movs	r0, #0
 800c8e8:	e7ee      	b.n	800c8c8 <quorem+0xf4>
 800c8ea:	0000      	movs	r0, r0
 800c8ec:	0000      	movs	r0, r0
	...

0800c8f0 <_dtoa_r>:
 800c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	ed2d 8b02 	vpush	{d8}
 800c8f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c8fa:	b091      	sub	sp, #68	; 0x44
 800c8fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c900:	ec59 8b10 	vmov	r8, r9, d0
 800c904:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c906:	9106      	str	r1, [sp, #24]
 800c908:	4606      	mov	r6, r0
 800c90a:	9208      	str	r2, [sp, #32]
 800c90c:	930c      	str	r3, [sp, #48]	; 0x30
 800c90e:	b975      	cbnz	r5, 800c92e <_dtoa_r+0x3e>
 800c910:	2010      	movs	r0, #16
 800c912:	f7fd ffdf 	bl	800a8d4 <malloc>
 800c916:	4602      	mov	r2, r0
 800c918:	6270      	str	r0, [r6, #36]	; 0x24
 800c91a:	b920      	cbnz	r0, 800c926 <_dtoa_r+0x36>
 800c91c:	4baa      	ldr	r3, [pc, #680]	; (800cbc8 <_dtoa_r+0x2d8>)
 800c91e:	21ea      	movs	r1, #234	; 0xea
 800c920:	48aa      	ldr	r0, [pc, #680]	; (800cbcc <_dtoa_r+0x2dc>)
 800c922:	f7ff ff39 	bl	800c798 <__assert_func>
 800c926:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c92a:	6005      	str	r5, [r0, #0]
 800c92c:	60c5      	str	r5, [r0, #12]
 800c92e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c930:	6819      	ldr	r1, [r3, #0]
 800c932:	b151      	cbz	r1, 800c94a <_dtoa_r+0x5a>
 800c934:	685a      	ldr	r2, [r3, #4]
 800c936:	604a      	str	r2, [r1, #4]
 800c938:	2301      	movs	r3, #1
 800c93a:	4093      	lsls	r3, r2
 800c93c:	608b      	str	r3, [r1, #8]
 800c93e:	4630      	mov	r0, r6
 800c940:	f001 fb46 	bl	800dfd0 <_Bfree>
 800c944:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c946:	2200      	movs	r2, #0
 800c948:	601a      	str	r2, [r3, #0]
 800c94a:	f1b9 0300 	subs.w	r3, r9, #0
 800c94e:	bfbb      	ittet	lt
 800c950:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c954:	9303      	strlt	r3, [sp, #12]
 800c956:	2300      	movge	r3, #0
 800c958:	2201      	movlt	r2, #1
 800c95a:	bfac      	ite	ge
 800c95c:	6023      	strge	r3, [r4, #0]
 800c95e:	6022      	strlt	r2, [r4, #0]
 800c960:	4b9b      	ldr	r3, [pc, #620]	; (800cbd0 <_dtoa_r+0x2e0>)
 800c962:	9c03      	ldr	r4, [sp, #12]
 800c964:	43a3      	bics	r3, r4
 800c966:	d11c      	bne.n	800c9a2 <_dtoa_r+0xb2>
 800c968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c96a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c96e:	6013      	str	r3, [r2, #0]
 800c970:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c974:	ea53 0308 	orrs.w	r3, r3, r8
 800c978:	f000 84fd 	beq.w	800d376 <_dtoa_r+0xa86>
 800c97c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c97e:	b963      	cbnz	r3, 800c99a <_dtoa_r+0xaa>
 800c980:	4b94      	ldr	r3, [pc, #592]	; (800cbd4 <_dtoa_r+0x2e4>)
 800c982:	e01f      	b.n	800c9c4 <_dtoa_r+0xd4>
 800c984:	4b94      	ldr	r3, [pc, #592]	; (800cbd8 <_dtoa_r+0x2e8>)
 800c986:	9301      	str	r3, [sp, #4]
 800c988:	3308      	adds	r3, #8
 800c98a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c98c:	6013      	str	r3, [r2, #0]
 800c98e:	9801      	ldr	r0, [sp, #4]
 800c990:	b011      	add	sp, #68	; 0x44
 800c992:	ecbd 8b02 	vpop	{d8}
 800c996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99a:	4b8e      	ldr	r3, [pc, #568]	; (800cbd4 <_dtoa_r+0x2e4>)
 800c99c:	9301      	str	r3, [sp, #4]
 800c99e:	3303      	adds	r3, #3
 800c9a0:	e7f3      	b.n	800c98a <_dtoa_r+0x9a>
 800c9a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c9a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ae:	d10b      	bne.n	800c9c8 <_dtoa_r+0xd8>
 800c9b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	6013      	str	r3, [r2, #0]
 800c9b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 84d9 	beq.w	800d370 <_dtoa_r+0xa80>
 800c9be:	4887      	ldr	r0, [pc, #540]	; (800cbdc <_dtoa_r+0x2ec>)
 800c9c0:	6018      	str	r0, [r3, #0]
 800c9c2:	1e43      	subs	r3, r0, #1
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	e7e2      	b.n	800c98e <_dtoa_r+0x9e>
 800c9c8:	a90f      	add	r1, sp, #60	; 0x3c
 800c9ca:	aa0e      	add	r2, sp, #56	; 0x38
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	eeb0 0b48 	vmov.f64	d0, d8
 800c9d2:	f001 feab 	bl	800e72c <__d2b>
 800c9d6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800c9da:	4605      	mov	r5, r0
 800c9dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c9de:	2900      	cmp	r1, #0
 800c9e0:	d046      	beq.n	800ca70 <_dtoa_r+0x180>
 800c9e2:	ee18 4a90 	vmov	r4, s17
 800c9e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c9ea:	ec53 2b18 	vmov	r2, r3, d8
 800c9ee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800c9f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c9f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c9fa:	2400      	movs	r4, #0
 800c9fc:	ec43 2b16 	vmov	d6, r2, r3
 800ca00:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800ca04:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800cbb0 <_dtoa_r+0x2c0>
 800ca08:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ca0c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800cbb8 <_dtoa_r+0x2c8>
 800ca10:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ca14:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800cbc0 <_dtoa_r+0x2d0>
 800ca18:	ee07 1a90 	vmov	s15, r1
 800ca1c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ca20:	eeb0 7b46 	vmov.f64	d7, d6
 800ca24:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ca28:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ca2c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ca30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca34:	ee16 ba90 	vmov	fp, s13
 800ca38:	940a      	str	r4, [sp, #40]	; 0x28
 800ca3a:	d508      	bpl.n	800ca4e <_dtoa_r+0x15e>
 800ca3c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ca40:	eeb4 6b47 	vcmp.f64	d6, d7
 800ca44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca48:	bf18      	it	ne
 800ca4a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ca4e:	f1bb 0f16 	cmp.w	fp, #22
 800ca52:	d82f      	bhi.n	800cab4 <_dtoa_r+0x1c4>
 800ca54:	4b62      	ldr	r3, [pc, #392]	; (800cbe0 <_dtoa_r+0x2f0>)
 800ca56:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ca5a:	ed93 7b00 	vldr	d7, [r3]
 800ca5e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ca62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca66:	d501      	bpl.n	800ca6c <_dtoa_r+0x17c>
 800ca68:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	e022      	b.n	800cab6 <_dtoa_r+0x1c6>
 800ca70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ca72:	4401      	add	r1, r0
 800ca74:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800ca78:	2b20      	cmp	r3, #32
 800ca7a:	bfc1      	itttt	gt
 800ca7c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ca80:	fa04 f303 	lslgt.w	r3, r4, r3
 800ca84:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800ca88:	fa28 f804 	lsrgt.w	r8, r8, r4
 800ca8c:	bfd6      	itet	le
 800ca8e:	f1c3 0320 	rsble	r3, r3, #32
 800ca92:	ea43 0808 	orrgt.w	r8, r3, r8
 800ca96:	fa08 f803 	lslle.w	r8, r8, r3
 800ca9a:	ee07 8a90 	vmov	s15, r8
 800ca9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800caa2:	3901      	subs	r1, #1
 800caa4:	ee17 4a90 	vmov	r4, s15
 800caa8:	ec53 2b17 	vmov	r2, r3, d7
 800caac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800cab0:	2401      	movs	r4, #1
 800cab2:	e7a3      	b.n	800c9fc <_dtoa_r+0x10c>
 800cab4:	2301      	movs	r3, #1
 800cab6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cab8:	1a43      	subs	r3, r0, r1
 800caba:	1e5a      	subs	r2, r3, #1
 800cabc:	bf45      	ittet	mi
 800cabe:	f1c3 0301 	rsbmi	r3, r3, #1
 800cac2:	9304      	strmi	r3, [sp, #16]
 800cac4:	2300      	movpl	r3, #0
 800cac6:	2300      	movmi	r3, #0
 800cac8:	9205      	str	r2, [sp, #20]
 800caca:	bf54      	ite	pl
 800cacc:	9304      	strpl	r3, [sp, #16]
 800cace:	9305      	strmi	r3, [sp, #20]
 800cad0:	f1bb 0f00 	cmp.w	fp, #0
 800cad4:	db18      	blt.n	800cb08 <_dtoa_r+0x218>
 800cad6:	9b05      	ldr	r3, [sp, #20]
 800cad8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800cadc:	445b      	add	r3, fp
 800cade:	9305      	str	r3, [sp, #20]
 800cae0:	2300      	movs	r3, #0
 800cae2:	9a06      	ldr	r2, [sp, #24]
 800cae4:	2a09      	cmp	r2, #9
 800cae6:	d849      	bhi.n	800cb7c <_dtoa_r+0x28c>
 800cae8:	2a05      	cmp	r2, #5
 800caea:	bfc4      	itt	gt
 800caec:	3a04      	subgt	r2, #4
 800caee:	9206      	strgt	r2, [sp, #24]
 800caf0:	9a06      	ldr	r2, [sp, #24]
 800caf2:	f1a2 0202 	sub.w	r2, r2, #2
 800caf6:	bfcc      	ite	gt
 800caf8:	2400      	movgt	r4, #0
 800cafa:	2401      	movle	r4, #1
 800cafc:	2a03      	cmp	r2, #3
 800cafe:	d848      	bhi.n	800cb92 <_dtoa_r+0x2a2>
 800cb00:	e8df f002 	tbb	[pc, r2]
 800cb04:	3a2c2e0b 	.word	0x3a2c2e0b
 800cb08:	9b04      	ldr	r3, [sp, #16]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	eba3 030b 	sub.w	r3, r3, fp
 800cb10:	9304      	str	r3, [sp, #16]
 800cb12:	9209      	str	r2, [sp, #36]	; 0x24
 800cb14:	f1cb 0300 	rsb	r3, fp, #0
 800cb18:	e7e3      	b.n	800cae2 <_dtoa_r+0x1f2>
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	9207      	str	r2, [sp, #28]
 800cb1e:	9a08      	ldr	r2, [sp, #32]
 800cb20:	2a00      	cmp	r2, #0
 800cb22:	dc39      	bgt.n	800cb98 <_dtoa_r+0x2a8>
 800cb24:	f04f 0a01 	mov.w	sl, #1
 800cb28:	46d1      	mov	r9, sl
 800cb2a:	4652      	mov	r2, sl
 800cb2c:	f8cd a020 	str.w	sl, [sp, #32]
 800cb30:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800cb32:	2100      	movs	r1, #0
 800cb34:	6079      	str	r1, [r7, #4]
 800cb36:	2004      	movs	r0, #4
 800cb38:	f100 0c14 	add.w	ip, r0, #20
 800cb3c:	4594      	cmp	ip, r2
 800cb3e:	6879      	ldr	r1, [r7, #4]
 800cb40:	d92f      	bls.n	800cba2 <_dtoa_r+0x2b2>
 800cb42:	4630      	mov	r0, r6
 800cb44:	930d      	str	r3, [sp, #52]	; 0x34
 800cb46:	f001 fa03 	bl	800df50 <_Balloc>
 800cb4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb4c:	9001      	str	r0, [sp, #4]
 800cb4e:	4602      	mov	r2, r0
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d149      	bne.n	800cbe8 <_dtoa_r+0x2f8>
 800cb54:	4b23      	ldr	r3, [pc, #140]	; (800cbe4 <_dtoa_r+0x2f4>)
 800cb56:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cb5a:	e6e1      	b.n	800c920 <_dtoa_r+0x30>
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	e7dd      	b.n	800cb1c <_dtoa_r+0x22c>
 800cb60:	2200      	movs	r2, #0
 800cb62:	9207      	str	r2, [sp, #28]
 800cb64:	9a08      	ldr	r2, [sp, #32]
 800cb66:	eb0b 0a02 	add.w	sl, fp, r2
 800cb6a:	f10a 0901 	add.w	r9, sl, #1
 800cb6e:	464a      	mov	r2, r9
 800cb70:	2a01      	cmp	r2, #1
 800cb72:	bfb8      	it	lt
 800cb74:	2201      	movlt	r2, #1
 800cb76:	e7db      	b.n	800cb30 <_dtoa_r+0x240>
 800cb78:	2201      	movs	r2, #1
 800cb7a:	e7f2      	b.n	800cb62 <_dtoa_r+0x272>
 800cb7c:	2401      	movs	r4, #1
 800cb7e:	2200      	movs	r2, #0
 800cb80:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800cb84:	f04f 3aff 	mov.w	sl, #4294967295
 800cb88:	2100      	movs	r1, #0
 800cb8a:	46d1      	mov	r9, sl
 800cb8c:	2212      	movs	r2, #18
 800cb8e:	9108      	str	r1, [sp, #32]
 800cb90:	e7ce      	b.n	800cb30 <_dtoa_r+0x240>
 800cb92:	2201      	movs	r2, #1
 800cb94:	9207      	str	r2, [sp, #28]
 800cb96:	e7f5      	b.n	800cb84 <_dtoa_r+0x294>
 800cb98:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cb9c:	46d1      	mov	r9, sl
 800cb9e:	4652      	mov	r2, sl
 800cba0:	e7c6      	b.n	800cb30 <_dtoa_r+0x240>
 800cba2:	3101      	adds	r1, #1
 800cba4:	6079      	str	r1, [r7, #4]
 800cba6:	0040      	lsls	r0, r0, #1
 800cba8:	e7c6      	b.n	800cb38 <_dtoa_r+0x248>
 800cbaa:	bf00      	nop
 800cbac:	f3af 8000 	nop.w
 800cbb0:	636f4361 	.word	0x636f4361
 800cbb4:	3fd287a7 	.word	0x3fd287a7
 800cbb8:	8b60c8b3 	.word	0x8b60c8b3
 800cbbc:	3fc68a28 	.word	0x3fc68a28
 800cbc0:	509f79fb 	.word	0x509f79fb
 800cbc4:	3fd34413 	.word	0x3fd34413
 800cbc8:	0800feb5 	.word	0x0800feb5
 800cbcc:	080100c2 	.word	0x080100c2
 800cbd0:	7ff00000 	.word	0x7ff00000
 800cbd4:	080100be 	.word	0x080100be
 800cbd8:	080100b5 	.word	0x080100b5
 800cbdc:	0800fe8d 	.word	0x0800fe8d
 800cbe0:	08010290 	.word	0x08010290
 800cbe4:	0801011d 	.word	0x0801011d
 800cbe8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800cbea:	9901      	ldr	r1, [sp, #4]
 800cbec:	6011      	str	r1, [r2, #0]
 800cbee:	f1b9 0f0e 	cmp.w	r9, #14
 800cbf2:	d86c      	bhi.n	800ccce <_dtoa_r+0x3de>
 800cbf4:	2c00      	cmp	r4, #0
 800cbf6:	d06a      	beq.n	800ccce <_dtoa_r+0x3de>
 800cbf8:	f1bb 0f00 	cmp.w	fp, #0
 800cbfc:	f340 80a0 	ble.w	800cd40 <_dtoa_r+0x450>
 800cc00:	49c1      	ldr	r1, [pc, #772]	; (800cf08 <_dtoa_r+0x618>)
 800cc02:	f00b 020f 	and.w	r2, fp, #15
 800cc06:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800cc0a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cc0e:	ed92 7b00 	vldr	d7, [r2]
 800cc12:	ea4f 112b 	mov.w	r1, fp, asr #4
 800cc16:	f000 8087 	beq.w	800cd28 <_dtoa_r+0x438>
 800cc1a:	4abc      	ldr	r2, [pc, #752]	; (800cf0c <_dtoa_r+0x61c>)
 800cc1c:	ed92 6b08 	vldr	d6, [r2, #32]
 800cc20:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800cc24:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cc28:	f001 010f 	and.w	r1, r1, #15
 800cc2c:	2203      	movs	r2, #3
 800cc2e:	48b7      	ldr	r0, [pc, #732]	; (800cf0c <_dtoa_r+0x61c>)
 800cc30:	2900      	cmp	r1, #0
 800cc32:	d17b      	bne.n	800cd2c <_dtoa_r+0x43c>
 800cc34:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cc38:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cc3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cc40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc42:	2900      	cmp	r1, #0
 800cc44:	f000 80a2 	beq.w	800cd8c <_dtoa_r+0x49c>
 800cc48:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cc4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc50:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc58:	f140 8098 	bpl.w	800cd8c <_dtoa_r+0x49c>
 800cc5c:	f1b9 0f00 	cmp.w	r9, #0
 800cc60:	f000 8094 	beq.w	800cd8c <_dtoa_r+0x49c>
 800cc64:	f1ba 0f00 	cmp.w	sl, #0
 800cc68:	dd2f      	ble.n	800ccca <_dtoa_r+0x3da>
 800cc6a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800cc6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cc72:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cc76:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cc7a:	3201      	adds	r2, #1
 800cc7c:	4650      	mov	r0, sl
 800cc7e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cc82:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800cc86:	ee07 2a90 	vmov	s15, r2
 800cc8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cc8e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cc92:	ee15 4a90 	vmov	r4, s11
 800cc96:	ec52 1b15 	vmov	r1, r2, d5
 800cc9a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	d177      	bne.n	800cd92 <_dtoa_r+0x4a2>
 800cca2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cca6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ccaa:	ec42 1b17 	vmov	d7, r1, r2
 800ccae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ccb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccb6:	f300 8263 	bgt.w	800d180 <_dtoa_r+0x890>
 800ccba:	eeb1 7b47 	vneg.f64	d7, d7
 800ccbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ccc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc6:	f100 8258 	bmi.w	800d17a <_dtoa_r+0x88a>
 800ccca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ccce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ccd0:	2a00      	cmp	r2, #0
 800ccd2:	f2c0 811d 	blt.w	800cf10 <_dtoa_r+0x620>
 800ccd6:	f1bb 0f0e 	cmp.w	fp, #14
 800ccda:	f300 8119 	bgt.w	800cf10 <_dtoa_r+0x620>
 800ccde:	4b8a      	ldr	r3, [pc, #552]	; (800cf08 <_dtoa_r+0x618>)
 800cce0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cce4:	ed93 6b00 	vldr	d6, [r3]
 800cce8:	9b08      	ldr	r3, [sp, #32]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f280 80b7 	bge.w	800ce5e <_dtoa_r+0x56e>
 800ccf0:	f1b9 0f00 	cmp.w	r9, #0
 800ccf4:	f300 80b3 	bgt.w	800ce5e <_dtoa_r+0x56e>
 800ccf8:	f040 823f 	bne.w	800d17a <_dtoa_r+0x88a>
 800ccfc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cd00:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cd04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd10:	464c      	mov	r4, r9
 800cd12:	464f      	mov	r7, r9
 800cd14:	f280 8215 	bge.w	800d142 <_dtoa_r+0x852>
 800cd18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cd1c:	2331      	movs	r3, #49	; 0x31
 800cd1e:	f808 3b01 	strb.w	r3, [r8], #1
 800cd22:	f10b 0b01 	add.w	fp, fp, #1
 800cd26:	e211      	b.n	800d14c <_dtoa_r+0x85c>
 800cd28:	2202      	movs	r2, #2
 800cd2a:	e780      	b.n	800cc2e <_dtoa_r+0x33e>
 800cd2c:	07cc      	lsls	r4, r1, #31
 800cd2e:	d504      	bpl.n	800cd3a <_dtoa_r+0x44a>
 800cd30:	ed90 6b00 	vldr	d6, [r0]
 800cd34:	3201      	adds	r2, #1
 800cd36:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd3a:	1049      	asrs	r1, r1, #1
 800cd3c:	3008      	adds	r0, #8
 800cd3e:	e777      	b.n	800cc30 <_dtoa_r+0x340>
 800cd40:	d022      	beq.n	800cd88 <_dtoa_r+0x498>
 800cd42:	f1cb 0100 	rsb	r1, fp, #0
 800cd46:	4a70      	ldr	r2, [pc, #448]	; (800cf08 <_dtoa_r+0x618>)
 800cd48:	f001 000f 	and.w	r0, r1, #15
 800cd4c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cd50:	ed92 7b00 	vldr	d7, [r2]
 800cd54:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cd58:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd5c:	486b      	ldr	r0, [pc, #428]	; (800cf0c <_dtoa_r+0x61c>)
 800cd5e:	1109      	asrs	r1, r1, #4
 800cd60:	2400      	movs	r4, #0
 800cd62:	2202      	movs	r2, #2
 800cd64:	b929      	cbnz	r1, 800cd72 <_dtoa_r+0x482>
 800cd66:	2c00      	cmp	r4, #0
 800cd68:	f43f af6a 	beq.w	800cc40 <_dtoa_r+0x350>
 800cd6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd70:	e766      	b.n	800cc40 <_dtoa_r+0x350>
 800cd72:	07cf      	lsls	r7, r1, #31
 800cd74:	d505      	bpl.n	800cd82 <_dtoa_r+0x492>
 800cd76:	ed90 6b00 	vldr	d6, [r0]
 800cd7a:	3201      	adds	r2, #1
 800cd7c:	2401      	movs	r4, #1
 800cd7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd82:	1049      	asrs	r1, r1, #1
 800cd84:	3008      	adds	r0, #8
 800cd86:	e7ed      	b.n	800cd64 <_dtoa_r+0x474>
 800cd88:	2202      	movs	r2, #2
 800cd8a:	e759      	b.n	800cc40 <_dtoa_r+0x350>
 800cd8c:	465f      	mov	r7, fp
 800cd8e:	4648      	mov	r0, r9
 800cd90:	e775      	b.n	800cc7e <_dtoa_r+0x38e>
 800cd92:	ec42 1b17 	vmov	d7, r1, r2
 800cd96:	4a5c      	ldr	r2, [pc, #368]	; (800cf08 <_dtoa_r+0x618>)
 800cd98:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cd9c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cda0:	9a01      	ldr	r2, [sp, #4]
 800cda2:	1814      	adds	r4, r2, r0
 800cda4:	9a07      	ldr	r2, [sp, #28]
 800cda6:	b352      	cbz	r2, 800cdfe <_dtoa_r+0x50e>
 800cda8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800cdac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800cdb0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cdb4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cdb8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cdbc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cdc0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cdc4:	ee14 2a90 	vmov	r2, s9
 800cdc8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cdcc:	3230      	adds	r2, #48	; 0x30
 800cdce:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cdd2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cdd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdda:	f808 2b01 	strb.w	r2, [r8], #1
 800cdde:	d439      	bmi.n	800ce54 <_dtoa_r+0x564>
 800cde0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cde4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdec:	d472      	bmi.n	800ced4 <_dtoa_r+0x5e4>
 800cdee:	45a0      	cmp	r8, r4
 800cdf0:	f43f af6b 	beq.w	800ccca <_dtoa_r+0x3da>
 800cdf4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cdf8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cdfc:	e7e0      	b.n	800cdc0 <_dtoa_r+0x4d0>
 800cdfe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ce02:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ce06:	4621      	mov	r1, r4
 800ce08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ce0c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ce10:	ee14 2a90 	vmov	r2, s9
 800ce14:	3230      	adds	r2, #48	; 0x30
 800ce16:	f808 2b01 	strb.w	r2, [r8], #1
 800ce1a:	45a0      	cmp	r8, r4
 800ce1c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ce20:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ce24:	d118      	bne.n	800ce58 <_dtoa_r+0x568>
 800ce26:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ce2a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ce2e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ce32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce36:	dc4d      	bgt.n	800ced4 <_dtoa_r+0x5e4>
 800ce38:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ce3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce44:	f57f af41 	bpl.w	800ccca <_dtoa_r+0x3da>
 800ce48:	4688      	mov	r8, r1
 800ce4a:	3901      	subs	r1, #1
 800ce4c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ce50:	2b30      	cmp	r3, #48	; 0x30
 800ce52:	d0f9      	beq.n	800ce48 <_dtoa_r+0x558>
 800ce54:	46bb      	mov	fp, r7
 800ce56:	e02a      	b.n	800ceae <_dtoa_r+0x5be>
 800ce58:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ce5c:	e7d6      	b.n	800ce0c <_dtoa_r+0x51c>
 800ce5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce62:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ce66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ce6a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ce6e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ce72:	ee15 3a10 	vmov	r3, s10
 800ce76:	3330      	adds	r3, #48	; 0x30
 800ce78:	f808 3b01 	strb.w	r3, [r8], #1
 800ce7c:	9b01      	ldr	r3, [sp, #4]
 800ce7e:	eba8 0303 	sub.w	r3, r8, r3
 800ce82:	4599      	cmp	r9, r3
 800ce84:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ce88:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ce8c:	d133      	bne.n	800cef6 <_dtoa_r+0x606>
 800ce8e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ce92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ce96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce9a:	dc1a      	bgt.n	800ced2 <_dtoa_r+0x5e2>
 800ce9c:	eeb4 7b46 	vcmp.f64	d7, d6
 800cea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea4:	d103      	bne.n	800ceae <_dtoa_r+0x5be>
 800cea6:	ee15 3a10 	vmov	r3, s10
 800ceaa:	07d9      	lsls	r1, r3, #31
 800ceac:	d411      	bmi.n	800ced2 <_dtoa_r+0x5e2>
 800ceae:	4629      	mov	r1, r5
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	f001 f88d 	bl	800dfd0 <_Bfree>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ceba:	f888 3000 	strb.w	r3, [r8]
 800cebe:	f10b 0301 	add.w	r3, fp, #1
 800cec2:	6013      	str	r3, [r2, #0]
 800cec4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f43f ad61 	beq.w	800c98e <_dtoa_r+0x9e>
 800cecc:	f8c3 8000 	str.w	r8, [r3]
 800ced0:	e55d      	b.n	800c98e <_dtoa_r+0x9e>
 800ced2:	465f      	mov	r7, fp
 800ced4:	4643      	mov	r3, r8
 800ced6:	4698      	mov	r8, r3
 800ced8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cedc:	2a39      	cmp	r2, #57	; 0x39
 800cede:	d106      	bne.n	800ceee <_dtoa_r+0x5fe>
 800cee0:	9a01      	ldr	r2, [sp, #4]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d1f7      	bne.n	800ced6 <_dtoa_r+0x5e6>
 800cee6:	9901      	ldr	r1, [sp, #4]
 800cee8:	2230      	movs	r2, #48	; 0x30
 800ceea:	3701      	adds	r7, #1
 800ceec:	700a      	strb	r2, [r1, #0]
 800ceee:	781a      	ldrb	r2, [r3, #0]
 800cef0:	3201      	adds	r2, #1
 800cef2:	701a      	strb	r2, [r3, #0]
 800cef4:	e7ae      	b.n	800ce54 <_dtoa_r+0x564>
 800cef6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cefa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf02:	d1b2      	bne.n	800ce6a <_dtoa_r+0x57a>
 800cf04:	e7d3      	b.n	800ceae <_dtoa_r+0x5be>
 800cf06:	bf00      	nop
 800cf08:	08010290 	.word	0x08010290
 800cf0c:	08010268 	.word	0x08010268
 800cf10:	9907      	ldr	r1, [sp, #28]
 800cf12:	2900      	cmp	r1, #0
 800cf14:	f000 80d0 	beq.w	800d0b8 <_dtoa_r+0x7c8>
 800cf18:	9906      	ldr	r1, [sp, #24]
 800cf1a:	2901      	cmp	r1, #1
 800cf1c:	f300 80b4 	bgt.w	800d088 <_dtoa_r+0x798>
 800cf20:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cf22:	2900      	cmp	r1, #0
 800cf24:	f000 80ac 	beq.w	800d080 <_dtoa_r+0x790>
 800cf28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cf2c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cf30:	461c      	mov	r4, r3
 800cf32:	930a      	str	r3, [sp, #40]	; 0x28
 800cf34:	9b04      	ldr	r3, [sp, #16]
 800cf36:	4413      	add	r3, r2
 800cf38:	9304      	str	r3, [sp, #16]
 800cf3a:	9b05      	ldr	r3, [sp, #20]
 800cf3c:	2101      	movs	r1, #1
 800cf3e:	4413      	add	r3, r2
 800cf40:	4630      	mov	r0, r6
 800cf42:	9305      	str	r3, [sp, #20]
 800cf44:	f001 f946 	bl	800e1d4 <__i2b>
 800cf48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf4a:	4607      	mov	r7, r0
 800cf4c:	f1b8 0f00 	cmp.w	r8, #0
 800cf50:	dd0d      	ble.n	800cf6e <_dtoa_r+0x67e>
 800cf52:	9a05      	ldr	r2, [sp, #20]
 800cf54:	2a00      	cmp	r2, #0
 800cf56:	dd0a      	ble.n	800cf6e <_dtoa_r+0x67e>
 800cf58:	4542      	cmp	r2, r8
 800cf5a:	9904      	ldr	r1, [sp, #16]
 800cf5c:	bfa8      	it	ge
 800cf5e:	4642      	movge	r2, r8
 800cf60:	1a89      	subs	r1, r1, r2
 800cf62:	9104      	str	r1, [sp, #16]
 800cf64:	9905      	ldr	r1, [sp, #20]
 800cf66:	eba8 0802 	sub.w	r8, r8, r2
 800cf6a:	1a8a      	subs	r2, r1, r2
 800cf6c:	9205      	str	r2, [sp, #20]
 800cf6e:	b303      	cbz	r3, 800cfb2 <_dtoa_r+0x6c2>
 800cf70:	9a07      	ldr	r2, [sp, #28]
 800cf72:	2a00      	cmp	r2, #0
 800cf74:	f000 80a5 	beq.w	800d0c2 <_dtoa_r+0x7d2>
 800cf78:	2c00      	cmp	r4, #0
 800cf7a:	dd13      	ble.n	800cfa4 <_dtoa_r+0x6b4>
 800cf7c:	4639      	mov	r1, r7
 800cf7e:	4622      	mov	r2, r4
 800cf80:	4630      	mov	r0, r6
 800cf82:	930d      	str	r3, [sp, #52]	; 0x34
 800cf84:	f001 f9e6 	bl	800e354 <__pow5mult>
 800cf88:	462a      	mov	r2, r5
 800cf8a:	4601      	mov	r1, r0
 800cf8c:	4607      	mov	r7, r0
 800cf8e:	4630      	mov	r0, r6
 800cf90:	f001 f936 	bl	800e200 <__multiply>
 800cf94:	4629      	mov	r1, r5
 800cf96:	900a      	str	r0, [sp, #40]	; 0x28
 800cf98:	4630      	mov	r0, r6
 800cf9a:	f001 f819 	bl	800dfd0 <_Bfree>
 800cf9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfa2:	4615      	mov	r5, r2
 800cfa4:	1b1a      	subs	r2, r3, r4
 800cfa6:	d004      	beq.n	800cfb2 <_dtoa_r+0x6c2>
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f001 f9d2 	bl	800e354 <__pow5mult>
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	2101      	movs	r1, #1
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	f001 f90d 	bl	800e1d4 <__i2b>
 800cfba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	f340 8081 	ble.w	800d0c6 <_dtoa_r+0x7d6>
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	4601      	mov	r1, r0
 800cfc8:	4630      	mov	r0, r6
 800cfca:	f001 f9c3 	bl	800e354 <__pow5mult>
 800cfce:	9b06      	ldr	r3, [sp, #24]
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	dd7a      	ble.n	800d0cc <_dtoa_r+0x7dc>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	930a      	str	r3, [sp, #40]	; 0x28
 800cfda:	6922      	ldr	r2, [r4, #16]
 800cfdc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cfe0:	6910      	ldr	r0, [r2, #16]
 800cfe2:	f001 f8a7 	bl	800e134 <__hi0bits>
 800cfe6:	f1c0 0020 	rsb	r0, r0, #32
 800cfea:	9b05      	ldr	r3, [sp, #20]
 800cfec:	4418      	add	r0, r3
 800cfee:	f010 001f 	ands.w	r0, r0, #31
 800cff2:	f000 808c 	beq.w	800d10e <_dtoa_r+0x81e>
 800cff6:	f1c0 0220 	rsb	r2, r0, #32
 800cffa:	2a04      	cmp	r2, #4
 800cffc:	f340 8085 	ble.w	800d10a <_dtoa_r+0x81a>
 800d000:	f1c0 001c 	rsb	r0, r0, #28
 800d004:	9b04      	ldr	r3, [sp, #16]
 800d006:	4403      	add	r3, r0
 800d008:	9304      	str	r3, [sp, #16]
 800d00a:	9b05      	ldr	r3, [sp, #20]
 800d00c:	4403      	add	r3, r0
 800d00e:	4480      	add	r8, r0
 800d010:	9305      	str	r3, [sp, #20]
 800d012:	9b04      	ldr	r3, [sp, #16]
 800d014:	2b00      	cmp	r3, #0
 800d016:	dd05      	ble.n	800d024 <_dtoa_r+0x734>
 800d018:	4629      	mov	r1, r5
 800d01a:	461a      	mov	r2, r3
 800d01c:	4630      	mov	r0, r6
 800d01e:	f001 f9f3 	bl	800e408 <__lshift>
 800d022:	4605      	mov	r5, r0
 800d024:	9b05      	ldr	r3, [sp, #20]
 800d026:	2b00      	cmp	r3, #0
 800d028:	dd05      	ble.n	800d036 <_dtoa_r+0x746>
 800d02a:	4621      	mov	r1, r4
 800d02c:	461a      	mov	r2, r3
 800d02e:	4630      	mov	r0, r6
 800d030:	f001 f9ea 	bl	800e408 <__lshift>
 800d034:	4604      	mov	r4, r0
 800d036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d06a      	beq.n	800d112 <_dtoa_r+0x822>
 800d03c:	4621      	mov	r1, r4
 800d03e:	4628      	mov	r0, r5
 800d040:	f001 fa52 	bl	800e4e8 <__mcmp>
 800d044:	2800      	cmp	r0, #0
 800d046:	da64      	bge.n	800d112 <_dtoa_r+0x822>
 800d048:	2300      	movs	r3, #0
 800d04a:	4629      	mov	r1, r5
 800d04c:	220a      	movs	r2, #10
 800d04e:	4630      	mov	r0, r6
 800d050:	f000 ffe0 	bl	800e014 <__multadd>
 800d054:	9b07      	ldr	r3, [sp, #28]
 800d056:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d05a:	4605      	mov	r5, r0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	f000 8191 	beq.w	800d384 <_dtoa_r+0xa94>
 800d062:	4639      	mov	r1, r7
 800d064:	2300      	movs	r3, #0
 800d066:	220a      	movs	r2, #10
 800d068:	4630      	mov	r0, r6
 800d06a:	f000 ffd3 	bl	800e014 <__multadd>
 800d06e:	f1ba 0f00 	cmp.w	sl, #0
 800d072:	4607      	mov	r7, r0
 800d074:	f300 808d 	bgt.w	800d192 <_dtoa_r+0x8a2>
 800d078:	9b06      	ldr	r3, [sp, #24]
 800d07a:	2b02      	cmp	r3, #2
 800d07c:	dc50      	bgt.n	800d120 <_dtoa_r+0x830>
 800d07e:	e088      	b.n	800d192 <_dtoa_r+0x8a2>
 800d080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d082:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d086:	e751      	b.n	800cf2c <_dtoa_r+0x63c>
 800d088:	f109 34ff 	add.w	r4, r9, #4294967295
 800d08c:	42a3      	cmp	r3, r4
 800d08e:	bfbf      	itttt	lt
 800d090:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800d092:	1ae3      	sublt	r3, r4, r3
 800d094:	18d2      	addlt	r2, r2, r3
 800d096:	9209      	strlt	r2, [sp, #36]	; 0x24
 800d098:	bfb6      	itet	lt
 800d09a:	4623      	movlt	r3, r4
 800d09c:	1b1c      	subge	r4, r3, r4
 800d09e:	2400      	movlt	r4, #0
 800d0a0:	f1b9 0f00 	cmp.w	r9, #0
 800d0a4:	bfb5      	itete	lt
 800d0a6:	9a04      	ldrlt	r2, [sp, #16]
 800d0a8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800d0ac:	eba2 0809 	sublt.w	r8, r2, r9
 800d0b0:	464a      	movge	r2, r9
 800d0b2:	bfb8      	it	lt
 800d0b4:	2200      	movlt	r2, #0
 800d0b6:	e73c      	b.n	800cf32 <_dtoa_r+0x642>
 800d0b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d0bc:	9f07      	ldr	r7, [sp, #28]
 800d0be:	461c      	mov	r4, r3
 800d0c0:	e744      	b.n	800cf4c <_dtoa_r+0x65c>
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	e770      	b.n	800cfa8 <_dtoa_r+0x6b8>
 800d0c6:	9b06      	ldr	r3, [sp, #24]
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	dc18      	bgt.n	800d0fe <_dtoa_r+0x80e>
 800d0cc:	9b02      	ldr	r3, [sp, #8]
 800d0ce:	b9b3      	cbnz	r3, 800d0fe <_dtoa_r+0x80e>
 800d0d0:	9b03      	ldr	r3, [sp, #12]
 800d0d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d0d6:	b9a2      	cbnz	r2, 800d102 <_dtoa_r+0x812>
 800d0d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d0dc:	0d12      	lsrs	r2, r2, #20
 800d0de:	0512      	lsls	r2, r2, #20
 800d0e0:	b18a      	cbz	r2, 800d106 <_dtoa_r+0x816>
 800d0e2:	9b04      	ldr	r3, [sp, #16]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	9304      	str	r3, [sp, #16]
 800d0e8:	9b05      	ldr	r3, [sp, #20]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	9305      	str	r3, [sp, #20]
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	930a      	str	r3, [sp, #40]	; 0x28
 800d0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f47f af70 	bne.w	800cfda <_dtoa_r+0x6ea>
 800d0fa:	2001      	movs	r0, #1
 800d0fc:	e775      	b.n	800cfea <_dtoa_r+0x6fa>
 800d0fe:	2300      	movs	r3, #0
 800d100:	e7f6      	b.n	800d0f0 <_dtoa_r+0x800>
 800d102:	9b02      	ldr	r3, [sp, #8]
 800d104:	e7f4      	b.n	800d0f0 <_dtoa_r+0x800>
 800d106:	920a      	str	r2, [sp, #40]	; 0x28
 800d108:	e7f3      	b.n	800d0f2 <_dtoa_r+0x802>
 800d10a:	d082      	beq.n	800d012 <_dtoa_r+0x722>
 800d10c:	4610      	mov	r0, r2
 800d10e:	301c      	adds	r0, #28
 800d110:	e778      	b.n	800d004 <_dtoa_r+0x714>
 800d112:	f1b9 0f00 	cmp.w	r9, #0
 800d116:	dc37      	bgt.n	800d188 <_dtoa_r+0x898>
 800d118:	9b06      	ldr	r3, [sp, #24]
 800d11a:	2b02      	cmp	r3, #2
 800d11c:	dd34      	ble.n	800d188 <_dtoa_r+0x898>
 800d11e:	46ca      	mov	sl, r9
 800d120:	f1ba 0f00 	cmp.w	sl, #0
 800d124:	d10d      	bne.n	800d142 <_dtoa_r+0x852>
 800d126:	4621      	mov	r1, r4
 800d128:	4653      	mov	r3, sl
 800d12a:	2205      	movs	r2, #5
 800d12c:	4630      	mov	r0, r6
 800d12e:	f000 ff71 	bl	800e014 <__multadd>
 800d132:	4601      	mov	r1, r0
 800d134:	4604      	mov	r4, r0
 800d136:	4628      	mov	r0, r5
 800d138:	f001 f9d6 	bl	800e4e8 <__mcmp>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	f73f adeb 	bgt.w	800cd18 <_dtoa_r+0x428>
 800d142:	9b08      	ldr	r3, [sp, #32]
 800d144:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d148:	ea6f 0b03 	mvn.w	fp, r3
 800d14c:	f04f 0900 	mov.w	r9, #0
 800d150:	4621      	mov	r1, r4
 800d152:	4630      	mov	r0, r6
 800d154:	f000 ff3c 	bl	800dfd0 <_Bfree>
 800d158:	2f00      	cmp	r7, #0
 800d15a:	f43f aea8 	beq.w	800ceae <_dtoa_r+0x5be>
 800d15e:	f1b9 0f00 	cmp.w	r9, #0
 800d162:	d005      	beq.n	800d170 <_dtoa_r+0x880>
 800d164:	45b9      	cmp	r9, r7
 800d166:	d003      	beq.n	800d170 <_dtoa_r+0x880>
 800d168:	4649      	mov	r1, r9
 800d16a:	4630      	mov	r0, r6
 800d16c:	f000 ff30 	bl	800dfd0 <_Bfree>
 800d170:	4639      	mov	r1, r7
 800d172:	4630      	mov	r0, r6
 800d174:	f000 ff2c 	bl	800dfd0 <_Bfree>
 800d178:	e699      	b.n	800ceae <_dtoa_r+0x5be>
 800d17a:	2400      	movs	r4, #0
 800d17c:	4627      	mov	r7, r4
 800d17e:	e7e0      	b.n	800d142 <_dtoa_r+0x852>
 800d180:	46bb      	mov	fp, r7
 800d182:	4604      	mov	r4, r0
 800d184:	4607      	mov	r7, r0
 800d186:	e5c7      	b.n	800cd18 <_dtoa_r+0x428>
 800d188:	9b07      	ldr	r3, [sp, #28]
 800d18a:	46ca      	mov	sl, r9
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f000 8100 	beq.w	800d392 <_dtoa_r+0xaa2>
 800d192:	f1b8 0f00 	cmp.w	r8, #0
 800d196:	dd05      	ble.n	800d1a4 <_dtoa_r+0x8b4>
 800d198:	4639      	mov	r1, r7
 800d19a:	4642      	mov	r2, r8
 800d19c:	4630      	mov	r0, r6
 800d19e:	f001 f933 	bl	800e408 <__lshift>
 800d1a2:	4607      	mov	r7, r0
 800d1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d05d      	beq.n	800d266 <_dtoa_r+0x976>
 800d1aa:	6879      	ldr	r1, [r7, #4]
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	f000 fecf 	bl	800df50 <_Balloc>
 800d1b2:	4680      	mov	r8, r0
 800d1b4:	b928      	cbnz	r0, 800d1c2 <_dtoa_r+0x8d2>
 800d1b6:	4b82      	ldr	r3, [pc, #520]	; (800d3c0 <_dtoa_r+0xad0>)
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d1be:	f7ff bbaf 	b.w	800c920 <_dtoa_r+0x30>
 800d1c2:	693a      	ldr	r2, [r7, #16]
 800d1c4:	3202      	adds	r2, #2
 800d1c6:	0092      	lsls	r2, r2, #2
 800d1c8:	f107 010c 	add.w	r1, r7, #12
 800d1cc:	300c      	adds	r0, #12
 800d1ce:	f7fd fb89 	bl	800a8e4 <memcpy>
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	4641      	mov	r1, r8
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	f001 f916 	bl	800e408 <__lshift>
 800d1dc:	9b01      	ldr	r3, [sp, #4]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	9304      	str	r3, [sp, #16]
 800d1e2:	9b01      	ldr	r3, [sp, #4]
 800d1e4:	4453      	add	r3, sl
 800d1e6:	9308      	str	r3, [sp, #32]
 800d1e8:	9b02      	ldr	r3, [sp, #8]
 800d1ea:	f003 0301 	and.w	r3, r3, #1
 800d1ee:	46b9      	mov	r9, r7
 800d1f0:	9307      	str	r3, [sp, #28]
 800d1f2:	4607      	mov	r7, r0
 800d1f4:	9b04      	ldr	r3, [sp, #16]
 800d1f6:	4621      	mov	r1, r4
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	9302      	str	r3, [sp, #8]
 800d1fe:	f7ff fae9 	bl	800c7d4 <quorem>
 800d202:	4603      	mov	r3, r0
 800d204:	3330      	adds	r3, #48	; 0x30
 800d206:	9005      	str	r0, [sp, #20]
 800d208:	4649      	mov	r1, r9
 800d20a:	4628      	mov	r0, r5
 800d20c:	9309      	str	r3, [sp, #36]	; 0x24
 800d20e:	f001 f96b 	bl	800e4e8 <__mcmp>
 800d212:	463a      	mov	r2, r7
 800d214:	4682      	mov	sl, r0
 800d216:	4621      	mov	r1, r4
 800d218:	4630      	mov	r0, r6
 800d21a:	f001 f981 	bl	800e520 <__mdiff>
 800d21e:	68c2      	ldr	r2, [r0, #12]
 800d220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d222:	4680      	mov	r8, r0
 800d224:	bb0a      	cbnz	r2, 800d26a <_dtoa_r+0x97a>
 800d226:	4601      	mov	r1, r0
 800d228:	4628      	mov	r0, r5
 800d22a:	f001 f95d 	bl	800e4e8 <__mcmp>
 800d22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d230:	4602      	mov	r2, r0
 800d232:	4641      	mov	r1, r8
 800d234:	4630      	mov	r0, r6
 800d236:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800d23a:	f000 fec9 	bl	800dfd0 <_Bfree>
 800d23e:	9b06      	ldr	r3, [sp, #24]
 800d240:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d242:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d246:	ea43 0102 	orr.w	r1, r3, r2
 800d24a:	9b07      	ldr	r3, [sp, #28]
 800d24c:	430b      	orrs	r3, r1
 800d24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d250:	d10d      	bne.n	800d26e <_dtoa_r+0x97e>
 800d252:	2b39      	cmp	r3, #57	; 0x39
 800d254:	d029      	beq.n	800d2aa <_dtoa_r+0x9ba>
 800d256:	f1ba 0f00 	cmp.w	sl, #0
 800d25a:	dd01      	ble.n	800d260 <_dtoa_r+0x970>
 800d25c:	9b05      	ldr	r3, [sp, #20]
 800d25e:	3331      	adds	r3, #49	; 0x31
 800d260:	9a02      	ldr	r2, [sp, #8]
 800d262:	7013      	strb	r3, [r2, #0]
 800d264:	e774      	b.n	800d150 <_dtoa_r+0x860>
 800d266:	4638      	mov	r0, r7
 800d268:	e7b8      	b.n	800d1dc <_dtoa_r+0x8ec>
 800d26a:	2201      	movs	r2, #1
 800d26c:	e7e1      	b.n	800d232 <_dtoa_r+0x942>
 800d26e:	f1ba 0f00 	cmp.w	sl, #0
 800d272:	db06      	blt.n	800d282 <_dtoa_r+0x992>
 800d274:	9906      	ldr	r1, [sp, #24]
 800d276:	ea41 0a0a 	orr.w	sl, r1, sl
 800d27a:	9907      	ldr	r1, [sp, #28]
 800d27c:	ea5a 0101 	orrs.w	r1, sl, r1
 800d280:	d120      	bne.n	800d2c4 <_dtoa_r+0x9d4>
 800d282:	2a00      	cmp	r2, #0
 800d284:	ddec      	ble.n	800d260 <_dtoa_r+0x970>
 800d286:	4629      	mov	r1, r5
 800d288:	2201      	movs	r2, #1
 800d28a:	4630      	mov	r0, r6
 800d28c:	9304      	str	r3, [sp, #16]
 800d28e:	f001 f8bb 	bl	800e408 <__lshift>
 800d292:	4621      	mov	r1, r4
 800d294:	4605      	mov	r5, r0
 800d296:	f001 f927 	bl	800e4e8 <__mcmp>
 800d29a:	2800      	cmp	r0, #0
 800d29c:	9b04      	ldr	r3, [sp, #16]
 800d29e:	dc02      	bgt.n	800d2a6 <_dtoa_r+0x9b6>
 800d2a0:	d1de      	bne.n	800d260 <_dtoa_r+0x970>
 800d2a2:	07da      	lsls	r2, r3, #31
 800d2a4:	d5dc      	bpl.n	800d260 <_dtoa_r+0x970>
 800d2a6:	2b39      	cmp	r3, #57	; 0x39
 800d2a8:	d1d8      	bne.n	800d25c <_dtoa_r+0x96c>
 800d2aa:	9a02      	ldr	r2, [sp, #8]
 800d2ac:	2339      	movs	r3, #57	; 0x39
 800d2ae:	7013      	strb	r3, [r2, #0]
 800d2b0:	4643      	mov	r3, r8
 800d2b2:	4698      	mov	r8, r3
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d2ba:	2a39      	cmp	r2, #57	; 0x39
 800d2bc:	d051      	beq.n	800d362 <_dtoa_r+0xa72>
 800d2be:	3201      	adds	r2, #1
 800d2c0:	701a      	strb	r2, [r3, #0]
 800d2c2:	e745      	b.n	800d150 <_dtoa_r+0x860>
 800d2c4:	2a00      	cmp	r2, #0
 800d2c6:	dd03      	ble.n	800d2d0 <_dtoa_r+0x9e0>
 800d2c8:	2b39      	cmp	r3, #57	; 0x39
 800d2ca:	d0ee      	beq.n	800d2aa <_dtoa_r+0x9ba>
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	e7c7      	b.n	800d260 <_dtoa_r+0x970>
 800d2d0:	9a04      	ldr	r2, [sp, #16]
 800d2d2:	9908      	ldr	r1, [sp, #32]
 800d2d4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d2d8:	428a      	cmp	r2, r1
 800d2da:	d02b      	beq.n	800d334 <_dtoa_r+0xa44>
 800d2dc:	4629      	mov	r1, r5
 800d2de:	2300      	movs	r3, #0
 800d2e0:	220a      	movs	r2, #10
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	f000 fe96 	bl	800e014 <__multadd>
 800d2e8:	45b9      	cmp	r9, r7
 800d2ea:	4605      	mov	r5, r0
 800d2ec:	f04f 0300 	mov.w	r3, #0
 800d2f0:	f04f 020a 	mov.w	r2, #10
 800d2f4:	4649      	mov	r1, r9
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	d107      	bne.n	800d30a <_dtoa_r+0xa1a>
 800d2fa:	f000 fe8b 	bl	800e014 <__multadd>
 800d2fe:	4681      	mov	r9, r0
 800d300:	4607      	mov	r7, r0
 800d302:	9b04      	ldr	r3, [sp, #16]
 800d304:	3301      	adds	r3, #1
 800d306:	9304      	str	r3, [sp, #16]
 800d308:	e774      	b.n	800d1f4 <_dtoa_r+0x904>
 800d30a:	f000 fe83 	bl	800e014 <__multadd>
 800d30e:	4639      	mov	r1, r7
 800d310:	4681      	mov	r9, r0
 800d312:	2300      	movs	r3, #0
 800d314:	220a      	movs	r2, #10
 800d316:	4630      	mov	r0, r6
 800d318:	f000 fe7c 	bl	800e014 <__multadd>
 800d31c:	4607      	mov	r7, r0
 800d31e:	e7f0      	b.n	800d302 <_dtoa_r+0xa12>
 800d320:	f1ba 0f00 	cmp.w	sl, #0
 800d324:	9a01      	ldr	r2, [sp, #4]
 800d326:	bfcc      	ite	gt
 800d328:	46d0      	movgt	r8, sl
 800d32a:	f04f 0801 	movle.w	r8, #1
 800d32e:	4490      	add	r8, r2
 800d330:	f04f 0900 	mov.w	r9, #0
 800d334:	4629      	mov	r1, r5
 800d336:	2201      	movs	r2, #1
 800d338:	4630      	mov	r0, r6
 800d33a:	9302      	str	r3, [sp, #8]
 800d33c:	f001 f864 	bl	800e408 <__lshift>
 800d340:	4621      	mov	r1, r4
 800d342:	4605      	mov	r5, r0
 800d344:	f001 f8d0 	bl	800e4e8 <__mcmp>
 800d348:	2800      	cmp	r0, #0
 800d34a:	dcb1      	bgt.n	800d2b0 <_dtoa_r+0x9c0>
 800d34c:	d102      	bne.n	800d354 <_dtoa_r+0xa64>
 800d34e:	9b02      	ldr	r3, [sp, #8]
 800d350:	07db      	lsls	r3, r3, #31
 800d352:	d4ad      	bmi.n	800d2b0 <_dtoa_r+0x9c0>
 800d354:	4643      	mov	r3, r8
 800d356:	4698      	mov	r8, r3
 800d358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d35c:	2a30      	cmp	r2, #48	; 0x30
 800d35e:	d0fa      	beq.n	800d356 <_dtoa_r+0xa66>
 800d360:	e6f6      	b.n	800d150 <_dtoa_r+0x860>
 800d362:	9a01      	ldr	r2, [sp, #4]
 800d364:	429a      	cmp	r2, r3
 800d366:	d1a4      	bne.n	800d2b2 <_dtoa_r+0x9c2>
 800d368:	f10b 0b01 	add.w	fp, fp, #1
 800d36c:	2331      	movs	r3, #49	; 0x31
 800d36e:	e778      	b.n	800d262 <_dtoa_r+0x972>
 800d370:	4b14      	ldr	r3, [pc, #80]	; (800d3c4 <_dtoa_r+0xad4>)
 800d372:	f7ff bb27 	b.w	800c9c4 <_dtoa_r+0xd4>
 800d376:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f47f ab03 	bne.w	800c984 <_dtoa_r+0x94>
 800d37e:	4b12      	ldr	r3, [pc, #72]	; (800d3c8 <_dtoa_r+0xad8>)
 800d380:	f7ff bb20 	b.w	800c9c4 <_dtoa_r+0xd4>
 800d384:	f1ba 0f00 	cmp.w	sl, #0
 800d388:	dc03      	bgt.n	800d392 <_dtoa_r+0xaa2>
 800d38a:	9b06      	ldr	r3, [sp, #24]
 800d38c:	2b02      	cmp	r3, #2
 800d38e:	f73f aec7 	bgt.w	800d120 <_dtoa_r+0x830>
 800d392:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d396:	4621      	mov	r1, r4
 800d398:	4628      	mov	r0, r5
 800d39a:	f7ff fa1b 	bl	800c7d4 <quorem>
 800d39e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d3a2:	f808 3b01 	strb.w	r3, [r8], #1
 800d3a6:	9a01      	ldr	r2, [sp, #4]
 800d3a8:	eba8 0202 	sub.w	r2, r8, r2
 800d3ac:	4592      	cmp	sl, r2
 800d3ae:	ddb7      	ble.n	800d320 <_dtoa_r+0xa30>
 800d3b0:	4629      	mov	r1, r5
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	220a      	movs	r2, #10
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	f000 fe2c 	bl	800e014 <__multadd>
 800d3bc:	4605      	mov	r5, r0
 800d3be:	e7ea      	b.n	800d396 <_dtoa_r+0xaa6>
 800d3c0:	0801011d 	.word	0x0801011d
 800d3c4:	0800fe8c 	.word	0x0800fe8c
 800d3c8:	080100b5 	.word	0x080100b5

0800d3cc <__sflush_r>:
 800d3cc:	898a      	ldrh	r2, [r1, #12]
 800d3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d2:	4605      	mov	r5, r0
 800d3d4:	0710      	lsls	r0, r2, #28
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	d458      	bmi.n	800d48c <__sflush_r+0xc0>
 800d3da:	684b      	ldr	r3, [r1, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	dc05      	bgt.n	800d3ec <__sflush_r+0x20>
 800d3e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	dc02      	bgt.n	800d3ec <__sflush_r+0x20>
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3ee:	2e00      	cmp	r6, #0
 800d3f0:	d0f9      	beq.n	800d3e6 <__sflush_r+0x1a>
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3f8:	682f      	ldr	r7, [r5, #0]
 800d3fa:	602b      	str	r3, [r5, #0]
 800d3fc:	d032      	beq.n	800d464 <__sflush_r+0x98>
 800d3fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d400:	89a3      	ldrh	r3, [r4, #12]
 800d402:	075a      	lsls	r2, r3, #29
 800d404:	d505      	bpl.n	800d412 <__sflush_r+0x46>
 800d406:	6863      	ldr	r3, [r4, #4]
 800d408:	1ac0      	subs	r0, r0, r3
 800d40a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d40c:	b10b      	cbz	r3, 800d412 <__sflush_r+0x46>
 800d40e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d410:	1ac0      	subs	r0, r0, r3
 800d412:	2300      	movs	r3, #0
 800d414:	4602      	mov	r2, r0
 800d416:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d418:	6a21      	ldr	r1, [r4, #32]
 800d41a:	4628      	mov	r0, r5
 800d41c:	47b0      	blx	r6
 800d41e:	1c43      	adds	r3, r0, #1
 800d420:	89a3      	ldrh	r3, [r4, #12]
 800d422:	d106      	bne.n	800d432 <__sflush_r+0x66>
 800d424:	6829      	ldr	r1, [r5, #0]
 800d426:	291d      	cmp	r1, #29
 800d428:	d82c      	bhi.n	800d484 <__sflush_r+0xb8>
 800d42a:	4a2a      	ldr	r2, [pc, #168]	; (800d4d4 <__sflush_r+0x108>)
 800d42c:	40ca      	lsrs	r2, r1
 800d42e:	07d6      	lsls	r6, r2, #31
 800d430:	d528      	bpl.n	800d484 <__sflush_r+0xb8>
 800d432:	2200      	movs	r2, #0
 800d434:	6062      	str	r2, [r4, #4]
 800d436:	04d9      	lsls	r1, r3, #19
 800d438:	6922      	ldr	r2, [r4, #16]
 800d43a:	6022      	str	r2, [r4, #0]
 800d43c:	d504      	bpl.n	800d448 <__sflush_r+0x7c>
 800d43e:	1c42      	adds	r2, r0, #1
 800d440:	d101      	bne.n	800d446 <__sflush_r+0x7a>
 800d442:	682b      	ldr	r3, [r5, #0]
 800d444:	b903      	cbnz	r3, 800d448 <__sflush_r+0x7c>
 800d446:	6560      	str	r0, [r4, #84]	; 0x54
 800d448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d44a:	602f      	str	r7, [r5, #0]
 800d44c:	2900      	cmp	r1, #0
 800d44e:	d0ca      	beq.n	800d3e6 <__sflush_r+0x1a>
 800d450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d454:	4299      	cmp	r1, r3
 800d456:	d002      	beq.n	800d45e <__sflush_r+0x92>
 800d458:	4628      	mov	r0, r5
 800d45a:	f7fd fa59 	bl	800a910 <_free_r>
 800d45e:	2000      	movs	r0, #0
 800d460:	6360      	str	r0, [r4, #52]	; 0x34
 800d462:	e7c1      	b.n	800d3e8 <__sflush_r+0x1c>
 800d464:	6a21      	ldr	r1, [r4, #32]
 800d466:	2301      	movs	r3, #1
 800d468:	4628      	mov	r0, r5
 800d46a:	47b0      	blx	r6
 800d46c:	1c41      	adds	r1, r0, #1
 800d46e:	d1c7      	bne.n	800d400 <__sflush_r+0x34>
 800d470:	682b      	ldr	r3, [r5, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d0c4      	beq.n	800d400 <__sflush_r+0x34>
 800d476:	2b1d      	cmp	r3, #29
 800d478:	d001      	beq.n	800d47e <__sflush_r+0xb2>
 800d47a:	2b16      	cmp	r3, #22
 800d47c:	d101      	bne.n	800d482 <__sflush_r+0xb6>
 800d47e:	602f      	str	r7, [r5, #0]
 800d480:	e7b1      	b.n	800d3e6 <__sflush_r+0x1a>
 800d482:	89a3      	ldrh	r3, [r4, #12]
 800d484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d488:	81a3      	strh	r3, [r4, #12]
 800d48a:	e7ad      	b.n	800d3e8 <__sflush_r+0x1c>
 800d48c:	690f      	ldr	r7, [r1, #16]
 800d48e:	2f00      	cmp	r7, #0
 800d490:	d0a9      	beq.n	800d3e6 <__sflush_r+0x1a>
 800d492:	0793      	lsls	r3, r2, #30
 800d494:	680e      	ldr	r6, [r1, #0]
 800d496:	bf08      	it	eq
 800d498:	694b      	ldreq	r3, [r1, #20]
 800d49a:	600f      	str	r7, [r1, #0]
 800d49c:	bf18      	it	ne
 800d49e:	2300      	movne	r3, #0
 800d4a0:	eba6 0807 	sub.w	r8, r6, r7
 800d4a4:	608b      	str	r3, [r1, #8]
 800d4a6:	f1b8 0f00 	cmp.w	r8, #0
 800d4aa:	dd9c      	ble.n	800d3e6 <__sflush_r+0x1a>
 800d4ac:	6a21      	ldr	r1, [r4, #32]
 800d4ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d4b0:	4643      	mov	r3, r8
 800d4b2:	463a      	mov	r2, r7
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	47b0      	blx	r6
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	dc06      	bgt.n	800d4ca <__sflush_r+0xfe>
 800d4bc:	89a3      	ldrh	r3, [r4, #12]
 800d4be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4c2:	81a3      	strh	r3, [r4, #12]
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c8:	e78e      	b.n	800d3e8 <__sflush_r+0x1c>
 800d4ca:	4407      	add	r7, r0
 800d4cc:	eba8 0800 	sub.w	r8, r8, r0
 800d4d0:	e7e9      	b.n	800d4a6 <__sflush_r+0xda>
 800d4d2:	bf00      	nop
 800d4d4:	20400001 	.word	0x20400001

0800d4d8 <_fflush_r>:
 800d4d8:	b538      	push	{r3, r4, r5, lr}
 800d4da:	690b      	ldr	r3, [r1, #16]
 800d4dc:	4605      	mov	r5, r0
 800d4de:	460c      	mov	r4, r1
 800d4e0:	b913      	cbnz	r3, 800d4e8 <_fflush_r+0x10>
 800d4e2:	2500      	movs	r5, #0
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	bd38      	pop	{r3, r4, r5, pc}
 800d4e8:	b118      	cbz	r0, 800d4f2 <_fflush_r+0x1a>
 800d4ea:	6983      	ldr	r3, [r0, #24]
 800d4ec:	b90b      	cbnz	r3, 800d4f2 <_fflush_r+0x1a>
 800d4ee:	f000 f887 	bl	800d600 <__sinit>
 800d4f2:	4b14      	ldr	r3, [pc, #80]	; (800d544 <_fflush_r+0x6c>)
 800d4f4:	429c      	cmp	r4, r3
 800d4f6:	d11b      	bne.n	800d530 <_fflush_r+0x58>
 800d4f8:	686c      	ldr	r4, [r5, #4]
 800d4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d0ef      	beq.n	800d4e2 <_fflush_r+0xa>
 800d502:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d504:	07d0      	lsls	r0, r2, #31
 800d506:	d404      	bmi.n	800d512 <_fflush_r+0x3a>
 800d508:	0599      	lsls	r1, r3, #22
 800d50a:	d402      	bmi.n	800d512 <_fflush_r+0x3a>
 800d50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d50e:	f000 fc9a 	bl	800de46 <__retarget_lock_acquire_recursive>
 800d512:	4628      	mov	r0, r5
 800d514:	4621      	mov	r1, r4
 800d516:	f7ff ff59 	bl	800d3cc <__sflush_r>
 800d51a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d51c:	07da      	lsls	r2, r3, #31
 800d51e:	4605      	mov	r5, r0
 800d520:	d4e0      	bmi.n	800d4e4 <_fflush_r+0xc>
 800d522:	89a3      	ldrh	r3, [r4, #12]
 800d524:	059b      	lsls	r3, r3, #22
 800d526:	d4dd      	bmi.n	800d4e4 <_fflush_r+0xc>
 800d528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d52a:	f000 fc8d 	bl	800de48 <__retarget_lock_release_recursive>
 800d52e:	e7d9      	b.n	800d4e4 <_fflush_r+0xc>
 800d530:	4b05      	ldr	r3, [pc, #20]	; (800d548 <_fflush_r+0x70>)
 800d532:	429c      	cmp	r4, r3
 800d534:	d101      	bne.n	800d53a <_fflush_r+0x62>
 800d536:	68ac      	ldr	r4, [r5, #8]
 800d538:	e7df      	b.n	800d4fa <_fflush_r+0x22>
 800d53a:	4b04      	ldr	r3, [pc, #16]	; (800d54c <_fflush_r+0x74>)
 800d53c:	429c      	cmp	r4, r3
 800d53e:	bf08      	it	eq
 800d540:	68ec      	ldreq	r4, [r5, #12]
 800d542:	e7da      	b.n	800d4fa <_fflush_r+0x22>
 800d544:	08010150 	.word	0x08010150
 800d548:	08010170 	.word	0x08010170
 800d54c:	08010130 	.word	0x08010130

0800d550 <std>:
 800d550:	2300      	movs	r3, #0
 800d552:	b510      	push	{r4, lr}
 800d554:	4604      	mov	r4, r0
 800d556:	e9c0 3300 	strd	r3, r3, [r0]
 800d55a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d55e:	6083      	str	r3, [r0, #8]
 800d560:	8181      	strh	r1, [r0, #12]
 800d562:	6643      	str	r3, [r0, #100]	; 0x64
 800d564:	81c2      	strh	r2, [r0, #14]
 800d566:	6183      	str	r3, [r0, #24]
 800d568:	4619      	mov	r1, r3
 800d56a:	2208      	movs	r2, #8
 800d56c:	305c      	adds	r0, #92	; 0x5c
 800d56e:	f7fd f9c7 	bl	800a900 <memset>
 800d572:	4b05      	ldr	r3, [pc, #20]	; (800d588 <std+0x38>)
 800d574:	6263      	str	r3, [r4, #36]	; 0x24
 800d576:	4b05      	ldr	r3, [pc, #20]	; (800d58c <std+0x3c>)
 800d578:	62a3      	str	r3, [r4, #40]	; 0x28
 800d57a:	4b05      	ldr	r3, [pc, #20]	; (800d590 <std+0x40>)
 800d57c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d57e:	4b05      	ldr	r3, [pc, #20]	; (800d594 <std+0x44>)
 800d580:	6224      	str	r4, [r4, #32]
 800d582:	6323      	str	r3, [r4, #48]	; 0x30
 800d584:	bd10      	pop	{r4, pc}
 800d586:	bf00      	nop
 800d588:	0800eed1 	.word	0x0800eed1
 800d58c:	0800eef3 	.word	0x0800eef3
 800d590:	0800ef2b 	.word	0x0800ef2b
 800d594:	0800ef4f 	.word	0x0800ef4f

0800d598 <_cleanup_r>:
 800d598:	4901      	ldr	r1, [pc, #4]	; (800d5a0 <_cleanup_r+0x8>)
 800d59a:	f000 b8c1 	b.w	800d720 <_fwalk_reent>
 800d59e:	bf00      	nop
 800d5a0:	0800d4d9 	.word	0x0800d4d9

0800d5a4 <__sfmoreglue>:
 800d5a4:	b570      	push	{r4, r5, r6, lr}
 800d5a6:	2268      	movs	r2, #104	; 0x68
 800d5a8:	1e4d      	subs	r5, r1, #1
 800d5aa:	4355      	muls	r5, r2
 800d5ac:	460e      	mov	r6, r1
 800d5ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d5b2:	f7fd fa19 	bl	800a9e8 <_malloc_r>
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	b140      	cbz	r0, 800d5cc <__sfmoreglue+0x28>
 800d5ba:	2100      	movs	r1, #0
 800d5bc:	e9c0 1600 	strd	r1, r6, [r0]
 800d5c0:	300c      	adds	r0, #12
 800d5c2:	60a0      	str	r0, [r4, #8]
 800d5c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d5c8:	f7fd f99a 	bl	800a900 <memset>
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	bd70      	pop	{r4, r5, r6, pc}

0800d5d0 <__sfp_lock_acquire>:
 800d5d0:	4801      	ldr	r0, [pc, #4]	; (800d5d8 <__sfp_lock_acquire+0x8>)
 800d5d2:	f000 bc38 	b.w	800de46 <__retarget_lock_acquire_recursive>
 800d5d6:	bf00      	nop
 800d5d8:	20000f65 	.word	0x20000f65

0800d5dc <__sfp_lock_release>:
 800d5dc:	4801      	ldr	r0, [pc, #4]	; (800d5e4 <__sfp_lock_release+0x8>)
 800d5de:	f000 bc33 	b.w	800de48 <__retarget_lock_release_recursive>
 800d5e2:	bf00      	nop
 800d5e4:	20000f65 	.word	0x20000f65

0800d5e8 <__sinit_lock_acquire>:
 800d5e8:	4801      	ldr	r0, [pc, #4]	; (800d5f0 <__sinit_lock_acquire+0x8>)
 800d5ea:	f000 bc2c 	b.w	800de46 <__retarget_lock_acquire_recursive>
 800d5ee:	bf00      	nop
 800d5f0:	20000f66 	.word	0x20000f66

0800d5f4 <__sinit_lock_release>:
 800d5f4:	4801      	ldr	r0, [pc, #4]	; (800d5fc <__sinit_lock_release+0x8>)
 800d5f6:	f000 bc27 	b.w	800de48 <__retarget_lock_release_recursive>
 800d5fa:	bf00      	nop
 800d5fc:	20000f66 	.word	0x20000f66

0800d600 <__sinit>:
 800d600:	b510      	push	{r4, lr}
 800d602:	4604      	mov	r4, r0
 800d604:	f7ff fff0 	bl	800d5e8 <__sinit_lock_acquire>
 800d608:	69a3      	ldr	r3, [r4, #24]
 800d60a:	b11b      	cbz	r3, 800d614 <__sinit+0x14>
 800d60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d610:	f7ff bff0 	b.w	800d5f4 <__sinit_lock_release>
 800d614:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d618:	6523      	str	r3, [r4, #80]	; 0x50
 800d61a:	4b13      	ldr	r3, [pc, #76]	; (800d668 <__sinit+0x68>)
 800d61c:	4a13      	ldr	r2, [pc, #76]	; (800d66c <__sinit+0x6c>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	62a2      	str	r2, [r4, #40]	; 0x28
 800d622:	42a3      	cmp	r3, r4
 800d624:	bf04      	itt	eq
 800d626:	2301      	moveq	r3, #1
 800d628:	61a3      	streq	r3, [r4, #24]
 800d62a:	4620      	mov	r0, r4
 800d62c:	f000 f820 	bl	800d670 <__sfp>
 800d630:	6060      	str	r0, [r4, #4]
 800d632:	4620      	mov	r0, r4
 800d634:	f000 f81c 	bl	800d670 <__sfp>
 800d638:	60a0      	str	r0, [r4, #8]
 800d63a:	4620      	mov	r0, r4
 800d63c:	f000 f818 	bl	800d670 <__sfp>
 800d640:	2200      	movs	r2, #0
 800d642:	60e0      	str	r0, [r4, #12]
 800d644:	2104      	movs	r1, #4
 800d646:	6860      	ldr	r0, [r4, #4]
 800d648:	f7ff ff82 	bl	800d550 <std>
 800d64c:	68a0      	ldr	r0, [r4, #8]
 800d64e:	2201      	movs	r2, #1
 800d650:	2109      	movs	r1, #9
 800d652:	f7ff ff7d 	bl	800d550 <std>
 800d656:	68e0      	ldr	r0, [r4, #12]
 800d658:	2202      	movs	r2, #2
 800d65a:	2112      	movs	r1, #18
 800d65c:	f7ff ff78 	bl	800d550 <std>
 800d660:	2301      	movs	r3, #1
 800d662:	61a3      	str	r3, [r4, #24]
 800d664:	e7d2      	b.n	800d60c <__sinit+0xc>
 800d666:	bf00      	nop
 800d668:	0800fe78 	.word	0x0800fe78
 800d66c:	0800d599 	.word	0x0800d599

0800d670 <__sfp>:
 800d670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d672:	4607      	mov	r7, r0
 800d674:	f7ff ffac 	bl	800d5d0 <__sfp_lock_acquire>
 800d678:	4b1e      	ldr	r3, [pc, #120]	; (800d6f4 <__sfp+0x84>)
 800d67a:	681e      	ldr	r6, [r3, #0]
 800d67c:	69b3      	ldr	r3, [r6, #24]
 800d67e:	b913      	cbnz	r3, 800d686 <__sfp+0x16>
 800d680:	4630      	mov	r0, r6
 800d682:	f7ff ffbd 	bl	800d600 <__sinit>
 800d686:	3648      	adds	r6, #72	; 0x48
 800d688:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d68c:	3b01      	subs	r3, #1
 800d68e:	d503      	bpl.n	800d698 <__sfp+0x28>
 800d690:	6833      	ldr	r3, [r6, #0]
 800d692:	b30b      	cbz	r3, 800d6d8 <__sfp+0x68>
 800d694:	6836      	ldr	r6, [r6, #0]
 800d696:	e7f7      	b.n	800d688 <__sfp+0x18>
 800d698:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d69c:	b9d5      	cbnz	r5, 800d6d4 <__sfp+0x64>
 800d69e:	4b16      	ldr	r3, [pc, #88]	; (800d6f8 <__sfp+0x88>)
 800d6a0:	60e3      	str	r3, [r4, #12]
 800d6a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d6a6:	6665      	str	r5, [r4, #100]	; 0x64
 800d6a8:	f000 fbcc 	bl	800de44 <__retarget_lock_init_recursive>
 800d6ac:	f7ff ff96 	bl	800d5dc <__sfp_lock_release>
 800d6b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d6b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d6b8:	6025      	str	r5, [r4, #0]
 800d6ba:	61a5      	str	r5, [r4, #24]
 800d6bc:	2208      	movs	r2, #8
 800d6be:	4629      	mov	r1, r5
 800d6c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d6c4:	f7fd f91c 	bl	800a900 <memset>
 800d6c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d6cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6d4:	3468      	adds	r4, #104	; 0x68
 800d6d6:	e7d9      	b.n	800d68c <__sfp+0x1c>
 800d6d8:	2104      	movs	r1, #4
 800d6da:	4638      	mov	r0, r7
 800d6dc:	f7ff ff62 	bl	800d5a4 <__sfmoreglue>
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	6030      	str	r0, [r6, #0]
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d1d5      	bne.n	800d694 <__sfp+0x24>
 800d6e8:	f7ff ff78 	bl	800d5dc <__sfp_lock_release>
 800d6ec:	230c      	movs	r3, #12
 800d6ee:	603b      	str	r3, [r7, #0]
 800d6f0:	e7ee      	b.n	800d6d0 <__sfp+0x60>
 800d6f2:	bf00      	nop
 800d6f4:	0800fe78 	.word	0x0800fe78
 800d6f8:	ffff0001 	.word	0xffff0001

0800d6fc <fiprintf>:
 800d6fc:	b40e      	push	{r1, r2, r3}
 800d6fe:	b503      	push	{r0, r1, lr}
 800d700:	4601      	mov	r1, r0
 800d702:	ab03      	add	r3, sp, #12
 800d704:	4805      	ldr	r0, [pc, #20]	; (800d71c <fiprintf+0x20>)
 800d706:	f853 2b04 	ldr.w	r2, [r3], #4
 800d70a:	6800      	ldr	r0, [r0, #0]
 800d70c:	9301      	str	r3, [sp, #4]
 800d70e:	f001 faa7 	bl	800ec60 <_vfiprintf_r>
 800d712:	b002      	add	sp, #8
 800d714:	f85d eb04 	ldr.w	lr, [sp], #4
 800d718:	b003      	add	sp, #12
 800d71a:	4770      	bx	lr
 800d71c:	20000544 	.word	0x20000544

0800d720 <_fwalk_reent>:
 800d720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d724:	4606      	mov	r6, r0
 800d726:	4688      	mov	r8, r1
 800d728:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d72c:	2700      	movs	r7, #0
 800d72e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d732:	f1b9 0901 	subs.w	r9, r9, #1
 800d736:	d505      	bpl.n	800d744 <_fwalk_reent+0x24>
 800d738:	6824      	ldr	r4, [r4, #0]
 800d73a:	2c00      	cmp	r4, #0
 800d73c:	d1f7      	bne.n	800d72e <_fwalk_reent+0xe>
 800d73e:	4638      	mov	r0, r7
 800d740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d744:	89ab      	ldrh	r3, [r5, #12]
 800d746:	2b01      	cmp	r3, #1
 800d748:	d907      	bls.n	800d75a <_fwalk_reent+0x3a>
 800d74a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d74e:	3301      	adds	r3, #1
 800d750:	d003      	beq.n	800d75a <_fwalk_reent+0x3a>
 800d752:	4629      	mov	r1, r5
 800d754:	4630      	mov	r0, r6
 800d756:	47c0      	blx	r8
 800d758:	4307      	orrs	r7, r0
 800d75a:	3568      	adds	r5, #104	; 0x68
 800d75c:	e7e9      	b.n	800d732 <_fwalk_reent+0x12>

0800d75e <rshift>:
 800d75e:	6903      	ldr	r3, [r0, #16]
 800d760:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d768:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d76c:	f100 0414 	add.w	r4, r0, #20
 800d770:	dd45      	ble.n	800d7fe <rshift+0xa0>
 800d772:	f011 011f 	ands.w	r1, r1, #31
 800d776:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d77a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d77e:	d10c      	bne.n	800d79a <rshift+0x3c>
 800d780:	f100 0710 	add.w	r7, r0, #16
 800d784:	4629      	mov	r1, r5
 800d786:	42b1      	cmp	r1, r6
 800d788:	d334      	bcc.n	800d7f4 <rshift+0x96>
 800d78a:	1a9b      	subs	r3, r3, r2
 800d78c:	009b      	lsls	r3, r3, #2
 800d78e:	1eea      	subs	r2, r5, #3
 800d790:	4296      	cmp	r6, r2
 800d792:	bf38      	it	cc
 800d794:	2300      	movcc	r3, #0
 800d796:	4423      	add	r3, r4
 800d798:	e015      	b.n	800d7c6 <rshift+0x68>
 800d79a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d79e:	f1c1 0820 	rsb	r8, r1, #32
 800d7a2:	40cf      	lsrs	r7, r1
 800d7a4:	f105 0e04 	add.w	lr, r5, #4
 800d7a8:	46a1      	mov	r9, r4
 800d7aa:	4576      	cmp	r6, lr
 800d7ac:	46f4      	mov	ip, lr
 800d7ae:	d815      	bhi.n	800d7dc <rshift+0x7e>
 800d7b0:	1a9a      	subs	r2, r3, r2
 800d7b2:	0092      	lsls	r2, r2, #2
 800d7b4:	3a04      	subs	r2, #4
 800d7b6:	3501      	adds	r5, #1
 800d7b8:	42ae      	cmp	r6, r5
 800d7ba:	bf38      	it	cc
 800d7bc:	2200      	movcc	r2, #0
 800d7be:	18a3      	adds	r3, r4, r2
 800d7c0:	50a7      	str	r7, [r4, r2]
 800d7c2:	b107      	cbz	r7, 800d7c6 <rshift+0x68>
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	1b1a      	subs	r2, r3, r4
 800d7c8:	42a3      	cmp	r3, r4
 800d7ca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d7ce:	bf08      	it	eq
 800d7d0:	2300      	moveq	r3, #0
 800d7d2:	6102      	str	r2, [r0, #16]
 800d7d4:	bf08      	it	eq
 800d7d6:	6143      	streq	r3, [r0, #20]
 800d7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7dc:	f8dc c000 	ldr.w	ip, [ip]
 800d7e0:	fa0c fc08 	lsl.w	ip, ip, r8
 800d7e4:	ea4c 0707 	orr.w	r7, ip, r7
 800d7e8:	f849 7b04 	str.w	r7, [r9], #4
 800d7ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d7f0:	40cf      	lsrs	r7, r1
 800d7f2:	e7da      	b.n	800d7aa <rshift+0x4c>
 800d7f4:	f851 cb04 	ldr.w	ip, [r1], #4
 800d7f8:	f847 cf04 	str.w	ip, [r7, #4]!
 800d7fc:	e7c3      	b.n	800d786 <rshift+0x28>
 800d7fe:	4623      	mov	r3, r4
 800d800:	e7e1      	b.n	800d7c6 <rshift+0x68>

0800d802 <__hexdig_fun>:
 800d802:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d806:	2b09      	cmp	r3, #9
 800d808:	d802      	bhi.n	800d810 <__hexdig_fun+0xe>
 800d80a:	3820      	subs	r0, #32
 800d80c:	b2c0      	uxtb	r0, r0
 800d80e:	4770      	bx	lr
 800d810:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d814:	2b05      	cmp	r3, #5
 800d816:	d801      	bhi.n	800d81c <__hexdig_fun+0x1a>
 800d818:	3847      	subs	r0, #71	; 0x47
 800d81a:	e7f7      	b.n	800d80c <__hexdig_fun+0xa>
 800d81c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d820:	2b05      	cmp	r3, #5
 800d822:	d801      	bhi.n	800d828 <__hexdig_fun+0x26>
 800d824:	3827      	subs	r0, #39	; 0x27
 800d826:	e7f1      	b.n	800d80c <__hexdig_fun+0xa>
 800d828:	2000      	movs	r0, #0
 800d82a:	4770      	bx	lr

0800d82c <__gethex>:
 800d82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d830:	ed2d 8b02 	vpush	{d8}
 800d834:	b089      	sub	sp, #36	; 0x24
 800d836:	ee08 0a10 	vmov	s16, r0
 800d83a:	9304      	str	r3, [sp, #16]
 800d83c:	4bb4      	ldr	r3, [pc, #720]	; (800db10 <__gethex+0x2e4>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	9301      	str	r3, [sp, #4]
 800d842:	4618      	mov	r0, r3
 800d844:	468b      	mov	fp, r1
 800d846:	4690      	mov	r8, r2
 800d848:	f7f2 fcfa 	bl	8000240 <strlen>
 800d84c:	9b01      	ldr	r3, [sp, #4]
 800d84e:	f8db 2000 	ldr.w	r2, [fp]
 800d852:	4403      	add	r3, r0
 800d854:	4682      	mov	sl, r0
 800d856:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d85a:	9305      	str	r3, [sp, #20]
 800d85c:	1c93      	adds	r3, r2, #2
 800d85e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d862:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d866:	32fe      	adds	r2, #254	; 0xfe
 800d868:	18d1      	adds	r1, r2, r3
 800d86a:	461f      	mov	r7, r3
 800d86c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d870:	9100      	str	r1, [sp, #0]
 800d872:	2830      	cmp	r0, #48	; 0x30
 800d874:	d0f8      	beq.n	800d868 <__gethex+0x3c>
 800d876:	f7ff ffc4 	bl	800d802 <__hexdig_fun>
 800d87a:	4604      	mov	r4, r0
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d13a      	bne.n	800d8f6 <__gethex+0xca>
 800d880:	9901      	ldr	r1, [sp, #4]
 800d882:	4652      	mov	r2, sl
 800d884:	4638      	mov	r0, r7
 800d886:	f001 fb66 	bl	800ef56 <strncmp>
 800d88a:	4605      	mov	r5, r0
 800d88c:	2800      	cmp	r0, #0
 800d88e:	d168      	bne.n	800d962 <__gethex+0x136>
 800d890:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d894:	eb07 060a 	add.w	r6, r7, sl
 800d898:	f7ff ffb3 	bl	800d802 <__hexdig_fun>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	d062      	beq.n	800d966 <__gethex+0x13a>
 800d8a0:	4633      	mov	r3, r6
 800d8a2:	7818      	ldrb	r0, [r3, #0]
 800d8a4:	2830      	cmp	r0, #48	; 0x30
 800d8a6:	461f      	mov	r7, r3
 800d8a8:	f103 0301 	add.w	r3, r3, #1
 800d8ac:	d0f9      	beq.n	800d8a2 <__gethex+0x76>
 800d8ae:	f7ff ffa8 	bl	800d802 <__hexdig_fun>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	fab0 f480 	clz	r4, r0
 800d8b8:	0964      	lsrs	r4, r4, #5
 800d8ba:	4635      	mov	r5, r6
 800d8bc:	9300      	str	r3, [sp, #0]
 800d8be:	463a      	mov	r2, r7
 800d8c0:	4616      	mov	r6, r2
 800d8c2:	3201      	adds	r2, #1
 800d8c4:	7830      	ldrb	r0, [r6, #0]
 800d8c6:	f7ff ff9c 	bl	800d802 <__hexdig_fun>
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d1f8      	bne.n	800d8c0 <__gethex+0x94>
 800d8ce:	9901      	ldr	r1, [sp, #4]
 800d8d0:	4652      	mov	r2, sl
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	f001 fb3f 	bl	800ef56 <strncmp>
 800d8d8:	b980      	cbnz	r0, 800d8fc <__gethex+0xd0>
 800d8da:	b94d      	cbnz	r5, 800d8f0 <__gethex+0xc4>
 800d8dc:	eb06 050a 	add.w	r5, r6, sl
 800d8e0:	462a      	mov	r2, r5
 800d8e2:	4616      	mov	r6, r2
 800d8e4:	3201      	adds	r2, #1
 800d8e6:	7830      	ldrb	r0, [r6, #0]
 800d8e8:	f7ff ff8b 	bl	800d802 <__hexdig_fun>
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	d1f8      	bne.n	800d8e2 <__gethex+0xb6>
 800d8f0:	1bad      	subs	r5, r5, r6
 800d8f2:	00ad      	lsls	r5, r5, #2
 800d8f4:	e004      	b.n	800d900 <__gethex+0xd4>
 800d8f6:	2400      	movs	r4, #0
 800d8f8:	4625      	mov	r5, r4
 800d8fa:	e7e0      	b.n	800d8be <__gethex+0x92>
 800d8fc:	2d00      	cmp	r5, #0
 800d8fe:	d1f7      	bne.n	800d8f0 <__gethex+0xc4>
 800d900:	7833      	ldrb	r3, [r6, #0]
 800d902:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d906:	2b50      	cmp	r3, #80	; 0x50
 800d908:	d13b      	bne.n	800d982 <__gethex+0x156>
 800d90a:	7873      	ldrb	r3, [r6, #1]
 800d90c:	2b2b      	cmp	r3, #43	; 0x2b
 800d90e:	d02c      	beq.n	800d96a <__gethex+0x13e>
 800d910:	2b2d      	cmp	r3, #45	; 0x2d
 800d912:	d02e      	beq.n	800d972 <__gethex+0x146>
 800d914:	1c71      	adds	r1, r6, #1
 800d916:	f04f 0900 	mov.w	r9, #0
 800d91a:	7808      	ldrb	r0, [r1, #0]
 800d91c:	f7ff ff71 	bl	800d802 <__hexdig_fun>
 800d920:	1e43      	subs	r3, r0, #1
 800d922:	b2db      	uxtb	r3, r3
 800d924:	2b18      	cmp	r3, #24
 800d926:	d82c      	bhi.n	800d982 <__gethex+0x156>
 800d928:	f1a0 0210 	sub.w	r2, r0, #16
 800d92c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d930:	f7ff ff67 	bl	800d802 <__hexdig_fun>
 800d934:	1e43      	subs	r3, r0, #1
 800d936:	b2db      	uxtb	r3, r3
 800d938:	2b18      	cmp	r3, #24
 800d93a:	d91d      	bls.n	800d978 <__gethex+0x14c>
 800d93c:	f1b9 0f00 	cmp.w	r9, #0
 800d940:	d000      	beq.n	800d944 <__gethex+0x118>
 800d942:	4252      	negs	r2, r2
 800d944:	4415      	add	r5, r2
 800d946:	f8cb 1000 	str.w	r1, [fp]
 800d94a:	b1e4      	cbz	r4, 800d986 <__gethex+0x15a>
 800d94c:	9b00      	ldr	r3, [sp, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	bf14      	ite	ne
 800d952:	2700      	movne	r7, #0
 800d954:	2706      	moveq	r7, #6
 800d956:	4638      	mov	r0, r7
 800d958:	b009      	add	sp, #36	; 0x24
 800d95a:	ecbd 8b02 	vpop	{d8}
 800d95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d962:	463e      	mov	r6, r7
 800d964:	4625      	mov	r5, r4
 800d966:	2401      	movs	r4, #1
 800d968:	e7ca      	b.n	800d900 <__gethex+0xd4>
 800d96a:	f04f 0900 	mov.w	r9, #0
 800d96e:	1cb1      	adds	r1, r6, #2
 800d970:	e7d3      	b.n	800d91a <__gethex+0xee>
 800d972:	f04f 0901 	mov.w	r9, #1
 800d976:	e7fa      	b.n	800d96e <__gethex+0x142>
 800d978:	230a      	movs	r3, #10
 800d97a:	fb03 0202 	mla	r2, r3, r2, r0
 800d97e:	3a10      	subs	r2, #16
 800d980:	e7d4      	b.n	800d92c <__gethex+0x100>
 800d982:	4631      	mov	r1, r6
 800d984:	e7df      	b.n	800d946 <__gethex+0x11a>
 800d986:	1bf3      	subs	r3, r6, r7
 800d988:	3b01      	subs	r3, #1
 800d98a:	4621      	mov	r1, r4
 800d98c:	2b07      	cmp	r3, #7
 800d98e:	dc0b      	bgt.n	800d9a8 <__gethex+0x17c>
 800d990:	ee18 0a10 	vmov	r0, s16
 800d994:	f000 fadc 	bl	800df50 <_Balloc>
 800d998:	4604      	mov	r4, r0
 800d99a:	b940      	cbnz	r0, 800d9ae <__gethex+0x182>
 800d99c:	4b5d      	ldr	r3, [pc, #372]	; (800db14 <__gethex+0x2e8>)
 800d99e:	4602      	mov	r2, r0
 800d9a0:	21de      	movs	r1, #222	; 0xde
 800d9a2:	485d      	ldr	r0, [pc, #372]	; (800db18 <__gethex+0x2ec>)
 800d9a4:	f7fe fef8 	bl	800c798 <__assert_func>
 800d9a8:	3101      	adds	r1, #1
 800d9aa:	105b      	asrs	r3, r3, #1
 800d9ac:	e7ee      	b.n	800d98c <__gethex+0x160>
 800d9ae:	f100 0914 	add.w	r9, r0, #20
 800d9b2:	f04f 0b00 	mov.w	fp, #0
 800d9b6:	f1ca 0301 	rsb	r3, sl, #1
 800d9ba:	f8cd 9008 	str.w	r9, [sp, #8]
 800d9be:	f8cd b000 	str.w	fp, [sp]
 800d9c2:	9306      	str	r3, [sp, #24]
 800d9c4:	42b7      	cmp	r7, r6
 800d9c6:	d340      	bcc.n	800da4a <__gethex+0x21e>
 800d9c8:	9802      	ldr	r0, [sp, #8]
 800d9ca:	9b00      	ldr	r3, [sp, #0]
 800d9cc:	f840 3b04 	str.w	r3, [r0], #4
 800d9d0:	eba0 0009 	sub.w	r0, r0, r9
 800d9d4:	1080      	asrs	r0, r0, #2
 800d9d6:	0146      	lsls	r6, r0, #5
 800d9d8:	6120      	str	r0, [r4, #16]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f000 fbaa 	bl	800e134 <__hi0bits>
 800d9e0:	1a30      	subs	r0, r6, r0
 800d9e2:	f8d8 6000 	ldr.w	r6, [r8]
 800d9e6:	42b0      	cmp	r0, r6
 800d9e8:	dd63      	ble.n	800dab2 <__gethex+0x286>
 800d9ea:	1b87      	subs	r7, r0, r6
 800d9ec:	4639      	mov	r1, r7
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	f000 ff4b 	bl	800e88a <__any_on>
 800d9f4:	4682      	mov	sl, r0
 800d9f6:	b1a8      	cbz	r0, 800da24 <__gethex+0x1f8>
 800d9f8:	1e7b      	subs	r3, r7, #1
 800d9fa:	1159      	asrs	r1, r3, #5
 800d9fc:	f003 021f 	and.w	r2, r3, #31
 800da00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800da04:	f04f 0a01 	mov.w	sl, #1
 800da08:	fa0a f202 	lsl.w	r2, sl, r2
 800da0c:	420a      	tst	r2, r1
 800da0e:	d009      	beq.n	800da24 <__gethex+0x1f8>
 800da10:	4553      	cmp	r3, sl
 800da12:	dd05      	ble.n	800da20 <__gethex+0x1f4>
 800da14:	1eb9      	subs	r1, r7, #2
 800da16:	4620      	mov	r0, r4
 800da18:	f000 ff37 	bl	800e88a <__any_on>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d145      	bne.n	800daac <__gethex+0x280>
 800da20:	f04f 0a02 	mov.w	sl, #2
 800da24:	4639      	mov	r1, r7
 800da26:	4620      	mov	r0, r4
 800da28:	f7ff fe99 	bl	800d75e <rshift>
 800da2c:	443d      	add	r5, r7
 800da2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da32:	42ab      	cmp	r3, r5
 800da34:	da4c      	bge.n	800dad0 <__gethex+0x2a4>
 800da36:	ee18 0a10 	vmov	r0, s16
 800da3a:	4621      	mov	r1, r4
 800da3c:	f000 fac8 	bl	800dfd0 <_Bfree>
 800da40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da42:	2300      	movs	r3, #0
 800da44:	6013      	str	r3, [r2, #0]
 800da46:	27a3      	movs	r7, #163	; 0xa3
 800da48:	e785      	b.n	800d956 <__gethex+0x12a>
 800da4a:	1e73      	subs	r3, r6, #1
 800da4c:	9a05      	ldr	r2, [sp, #20]
 800da4e:	9303      	str	r3, [sp, #12]
 800da50:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da54:	4293      	cmp	r3, r2
 800da56:	d019      	beq.n	800da8c <__gethex+0x260>
 800da58:	f1bb 0f20 	cmp.w	fp, #32
 800da5c:	d107      	bne.n	800da6e <__gethex+0x242>
 800da5e:	9b02      	ldr	r3, [sp, #8]
 800da60:	9a00      	ldr	r2, [sp, #0]
 800da62:	f843 2b04 	str.w	r2, [r3], #4
 800da66:	9302      	str	r3, [sp, #8]
 800da68:	2300      	movs	r3, #0
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	469b      	mov	fp, r3
 800da6e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800da72:	f7ff fec6 	bl	800d802 <__hexdig_fun>
 800da76:	9b00      	ldr	r3, [sp, #0]
 800da78:	f000 000f 	and.w	r0, r0, #15
 800da7c:	fa00 f00b 	lsl.w	r0, r0, fp
 800da80:	4303      	orrs	r3, r0
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	f10b 0b04 	add.w	fp, fp, #4
 800da88:	9b03      	ldr	r3, [sp, #12]
 800da8a:	e00d      	b.n	800daa8 <__gethex+0x27c>
 800da8c:	9b03      	ldr	r3, [sp, #12]
 800da8e:	9a06      	ldr	r2, [sp, #24]
 800da90:	4413      	add	r3, r2
 800da92:	42bb      	cmp	r3, r7
 800da94:	d3e0      	bcc.n	800da58 <__gethex+0x22c>
 800da96:	4618      	mov	r0, r3
 800da98:	9901      	ldr	r1, [sp, #4]
 800da9a:	9307      	str	r3, [sp, #28]
 800da9c:	4652      	mov	r2, sl
 800da9e:	f001 fa5a 	bl	800ef56 <strncmp>
 800daa2:	9b07      	ldr	r3, [sp, #28]
 800daa4:	2800      	cmp	r0, #0
 800daa6:	d1d7      	bne.n	800da58 <__gethex+0x22c>
 800daa8:	461e      	mov	r6, r3
 800daaa:	e78b      	b.n	800d9c4 <__gethex+0x198>
 800daac:	f04f 0a03 	mov.w	sl, #3
 800dab0:	e7b8      	b.n	800da24 <__gethex+0x1f8>
 800dab2:	da0a      	bge.n	800daca <__gethex+0x29e>
 800dab4:	1a37      	subs	r7, r6, r0
 800dab6:	4621      	mov	r1, r4
 800dab8:	ee18 0a10 	vmov	r0, s16
 800dabc:	463a      	mov	r2, r7
 800dabe:	f000 fca3 	bl	800e408 <__lshift>
 800dac2:	1bed      	subs	r5, r5, r7
 800dac4:	4604      	mov	r4, r0
 800dac6:	f100 0914 	add.w	r9, r0, #20
 800daca:	f04f 0a00 	mov.w	sl, #0
 800dace:	e7ae      	b.n	800da2e <__gethex+0x202>
 800dad0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dad4:	42a8      	cmp	r0, r5
 800dad6:	dd72      	ble.n	800dbbe <__gethex+0x392>
 800dad8:	1b45      	subs	r5, r0, r5
 800dada:	42ae      	cmp	r6, r5
 800dadc:	dc36      	bgt.n	800db4c <__gethex+0x320>
 800dade:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d02a      	beq.n	800db3c <__gethex+0x310>
 800dae6:	2b03      	cmp	r3, #3
 800dae8:	d02c      	beq.n	800db44 <__gethex+0x318>
 800daea:	2b01      	cmp	r3, #1
 800daec:	d11c      	bne.n	800db28 <__gethex+0x2fc>
 800daee:	42ae      	cmp	r6, r5
 800daf0:	d11a      	bne.n	800db28 <__gethex+0x2fc>
 800daf2:	2e01      	cmp	r6, #1
 800daf4:	d112      	bne.n	800db1c <__gethex+0x2f0>
 800daf6:	9a04      	ldr	r2, [sp, #16]
 800daf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dafc:	6013      	str	r3, [r2, #0]
 800dafe:	2301      	movs	r3, #1
 800db00:	6123      	str	r3, [r4, #16]
 800db02:	f8c9 3000 	str.w	r3, [r9]
 800db06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db08:	2762      	movs	r7, #98	; 0x62
 800db0a:	601c      	str	r4, [r3, #0]
 800db0c:	e723      	b.n	800d956 <__gethex+0x12a>
 800db0e:	bf00      	nop
 800db10:	080101f8 	.word	0x080101f8
 800db14:	0801011d 	.word	0x0801011d
 800db18:	08010190 	.word	0x08010190
 800db1c:	1e71      	subs	r1, r6, #1
 800db1e:	4620      	mov	r0, r4
 800db20:	f000 feb3 	bl	800e88a <__any_on>
 800db24:	2800      	cmp	r0, #0
 800db26:	d1e6      	bne.n	800daf6 <__gethex+0x2ca>
 800db28:	ee18 0a10 	vmov	r0, s16
 800db2c:	4621      	mov	r1, r4
 800db2e:	f000 fa4f 	bl	800dfd0 <_Bfree>
 800db32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db34:	2300      	movs	r3, #0
 800db36:	6013      	str	r3, [r2, #0]
 800db38:	2750      	movs	r7, #80	; 0x50
 800db3a:	e70c      	b.n	800d956 <__gethex+0x12a>
 800db3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1f2      	bne.n	800db28 <__gethex+0x2fc>
 800db42:	e7d8      	b.n	800daf6 <__gethex+0x2ca>
 800db44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1d5      	bne.n	800daf6 <__gethex+0x2ca>
 800db4a:	e7ed      	b.n	800db28 <__gethex+0x2fc>
 800db4c:	1e6f      	subs	r7, r5, #1
 800db4e:	f1ba 0f00 	cmp.w	sl, #0
 800db52:	d131      	bne.n	800dbb8 <__gethex+0x38c>
 800db54:	b127      	cbz	r7, 800db60 <__gethex+0x334>
 800db56:	4639      	mov	r1, r7
 800db58:	4620      	mov	r0, r4
 800db5a:	f000 fe96 	bl	800e88a <__any_on>
 800db5e:	4682      	mov	sl, r0
 800db60:	117b      	asrs	r3, r7, #5
 800db62:	2101      	movs	r1, #1
 800db64:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800db68:	f007 071f 	and.w	r7, r7, #31
 800db6c:	fa01 f707 	lsl.w	r7, r1, r7
 800db70:	421f      	tst	r7, r3
 800db72:	4629      	mov	r1, r5
 800db74:	4620      	mov	r0, r4
 800db76:	bf18      	it	ne
 800db78:	f04a 0a02 	orrne.w	sl, sl, #2
 800db7c:	1b76      	subs	r6, r6, r5
 800db7e:	f7ff fdee 	bl	800d75e <rshift>
 800db82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800db86:	2702      	movs	r7, #2
 800db88:	f1ba 0f00 	cmp.w	sl, #0
 800db8c:	d048      	beq.n	800dc20 <__gethex+0x3f4>
 800db8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db92:	2b02      	cmp	r3, #2
 800db94:	d015      	beq.n	800dbc2 <__gethex+0x396>
 800db96:	2b03      	cmp	r3, #3
 800db98:	d017      	beq.n	800dbca <__gethex+0x39e>
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d109      	bne.n	800dbb2 <__gethex+0x386>
 800db9e:	f01a 0f02 	tst.w	sl, #2
 800dba2:	d006      	beq.n	800dbb2 <__gethex+0x386>
 800dba4:	f8d9 0000 	ldr.w	r0, [r9]
 800dba8:	ea4a 0a00 	orr.w	sl, sl, r0
 800dbac:	f01a 0f01 	tst.w	sl, #1
 800dbb0:	d10e      	bne.n	800dbd0 <__gethex+0x3a4>
 800dbb2:	f047 0710 	orr.w	r7, r7, #16
 800dbb6:	e033      	b.n	800dc20 <__gethex+0x3f4>
 800dbb8:	f04f 0a01 	mov.w	sl, #1
 800dbbc:	e7d0      	b.n	800db60 <__gethex+0x334>
 800dbbe:	2701      	movs	r7, #1
 800dbc0:	e7e2      	b.n	800db88 <__gethex+0x35c>
 800dbc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbc4:	f1c3 0301 	rsb	r3, r3, #1
 800dbc8:	9315      	str	r3, [sp, #84]	; 0x54
 800dbca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d0f0      	beq.n	800dbb2 <__gethex+0x386>
 800dbd0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dbd4:	f104 0314 	add.w	r3, r4, #20
 800dbd8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dbdc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dbe0:	f04f 0c00 	mov.w	ip, #0
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbea:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dbee:	d01c      	beq.n	800dc2a <__gethex+0x3fe>
 800dbf0:	3201      	adds	r2, #1
 800dbf2:	6002      	str	r2, [r0, #0]
 800dbf4:	2f02      	cmp	r7, #2
 800dbf6:	f104 0314 	add.w	r3, r4, #20
 800dbfa:	d13f      	bne.n	800dc7c <__gethex+0x450>
 800dbfc:	f8d8 2000 	ldr.w	r2, [r8]
 800dc00:	3a01      	subs	r2, #1
 800dc02:	42b2      	cmp	r2, r6
 800dc04:	d10a      	bne.n	800dc1c <__gethex+0x3f0>
 800dc06:	1171      	asrs	r1, r6, #5
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc0e:	f006 061f 	and.w	r6, r6, #31
 800dc12:	fa02 f606 	lsl.w	r6, r2, r6
 800dc16:	421e      	tst	r6, r3
 800dc18:	bf18      	it	ne
 800dc1a:	4617      	movne	r7, r2
 800dc1c:	f047 0720 	orr.w	r7, r7, #32
 800dc20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc22:	601c      	str	r4, [r3, #0]
 800dc24:	9b04      	ldr	r3, [sp, #16]
 800dc26:	601d      	str	r5, [r3, #0]
 800dc28:	e695      	b.n	800d956 <__gethex+0x12a>
 800dc2a:	4299      	cmp	r1, r3
 800dc2c:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc30:	d8d8      	bhi.n	800dbe4 <__gethex+0x3b8>
 800dc32:	68a3      	ldr	r3, [r4, #8]
 800dc34:	459b      	cmp	fp, r3
 800dc36:	db19      	blt.n	800dc6c <__gethex+0x440>
 800dc38:	6861      	ldr	r1, [r4, #4]
 800dc3a:	ee18 0a10 	vmov	r0, s16
 800dc3e:	3101      	adds	r1, #1
 800dc40:	f000 f986 	bl	800df50 <_Balloc>
 800dc44:	4681      	mov	r9, r0
 800dc46:	b918      	cbnz	r0, 800dc50 <__gethex+0x424>
 800dc48:	4b1a      	ldr	r3, [pc, #104]	; (800dcb4 <__gethex+0x488>)
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	2184      	movs	r1, #132	; 0x84
 800dc4e:	e6a8      	b.n	800d9a2 <__gethex+0x176>
 800dc50:	6922      	ldr	r2, [r4, #16]
 800dc52:	3202      	adds	r2, #2
 800dc54:	f104 010c 	add.w	r1, r4, #12
 800dc58:	0092      	lsls	r2, r2, #2
 800dc5a:	300c      	adds	r0, #12
 800dc5c:	f7fc fe42 	bl	800a8e4 <memcpy>
 800dc60:	4621      	mov	r1, r4
 800dc62:	ee18 0a10 	vmov	r0, s16
 800dc66:	f000 f9b3 	bl	800dfd0 <_Bfree>
 800dc6a:	464c      	mov	r4, r9
 800dc6c:	6923      	ldr	r3, [r4, #16]
 800dc6e:	1c5a      	adds	r2, r3, #1
 800dc70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc74:	6122      	str	r2, [r4, #16]
 800dc76:	2201      	movs	r2, #1
 800dc78:	615a      	str	r2, [r3, #20]
 800dc7a:	e7bb      	b.n	800dbf4 <__gethex+0x3c8>
 800dc7c:	6922      	ldr	r2, [r4, #16]
 800dc7e:	455a      	cmp	r2, fp
 800dc80:	dd0b      	ble.n	800dc9a <__gethex+0x46e>
 800dc82:	2101      	movs	r1, #1
 800dc84:	4620      	mov	r0, r4
 800dc86:	f7ff fd6a 	bl	800d75e <rshift>
 800dc8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc8e:	3501      	adds	r5, #1
 800dc90:	42ab      	cmp	r3, r5
 800dc92:	f6ff aed0 	blt.w	800da36 <__gethex+0x20a>
 800dc96:	2701      	movs	r7, #1
 800dc98:	e7c0      	b.n	800dc1c <__gethex+0x3f0>
 800dc9a:	f016 061f 	ands.w	r6, r6, #31
 800dc9e:	d0fa      	beq.n	800dc96 <__gethex+0x46a>
 800dca0:	4453      	add	r3, sl
 800dca2:	f1c6 0620 	rsb	r6, r6, #32
 800dca6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dcaa:	f000 fa43 	bl	800e134 <__hi0bits>
 800dcae:	42b0      	cmp	r0, r6
 800dcb0:	dbe7      	blt.n	800dc82 <__gethex+0x456>
 800dcb2:	e7f0      	b.n	800dc96 <__gethex+0x46a>
 800dcb4:	0801011d 	.word	0x0801011d

0800dcb8 <L_shift>:
 800dcb8:	f1c2 0208 	rsb	r2, r2, #8
 800dcbc:	0092      	lsls	r2, r2, #2
 800dcbe:	b570      	push	{r4, r5, r6, lr}
 800dcc0:	f1c2 0620 	rsb	r6, r2, #32
 800dcc4:	6843      	ldr	r3, [r0, #4]
 800dcc6:	6804      	ldr	r4, [r0, #0]
 800dcc8:	fa03 f506 	lsl.w	r5, r3, r6
 800dccc:	432c      	orrs	r4, r5
 800dcce:	40d3      	lsrs	r3, r2
 800dcd0:	6004      	str	r4, [r0, #0]
 800dcd2:	f840 3f04 	str.w	r3, [r0, #4]!
 800dcd6:	4288      	cmp	r0, r1
 800dcd8:	d3f4      	bcc.n	800dcc4 <L_shift+0xc>
 800dcda:	bd70      	pop	{r4, r5, r6, pc}

0800dcdc <__match>:
 800dcdc:	b530      	push	{r4, r5, lr}
 800dcde:	6803      	ldr	r3, [r0, #0]
 800dce0:	3301      	adds	r3, #1
 800dce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dce6:	b914      	cbnz	r4, 800dcee <__match+0x12>
 800dce8:	6003      	str	r3, [r0, #0]
 800dcea:	2001      	movs	r0, #1
 800dcec:	bd30      	pop	{r4, r5, pc}
 800dcee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dcf6:	2d19      	cmp	r5, #25
 800dcf8:	bf98      	it	ls
 800dcfa:	3220      	addls	r2, #32
 800dcfc:	42a2      	cmp	r2, r4
 800dcfe:	d0f0      	beq.n	800dce2 <__match+0x6>
 800dd00:	2000      	movs	r0, #0
 800dd02:	e7f3      	b.n	800dcec <__match+0x10>

0800dd04 <__hexnan>:
 800dd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd08:	680b      	ldr	r3, [r1, #0]
 800dd0a:	115e      	asrs	r6, r3, #5
 800dd0c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd10:	f013 031f 	ands.w	r3, r3, #31
 800dd14:	b087      	sub	sp, #28
 800dd16:	bf18      	it	ne
 800dd18:	3604      	addne	r6, #4
 800dd1a:	2500      	movs	r5, #0
 800dd1c:	1f37      	subs	r7, r6, #4
 800dd1e:	4690      	mov	r8, r2
 800dd20:	6802      	ldr	r2, [r0, #0]
 800dd22:	9301      	str	r3, [sp, #4]
 800dd24:	4682      	mov	sl, r0
 800dd26:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd2a:	46b9      	mov	r9, r7
 800dd2c:	463c      	mov	r4, r7
 800dd2e:	9502      	str	r5, [sp, #8]
 800dd30:	46ab      	mov	fp, r5
 800dd32:	7851      	ldrb	r1, [r2, #1]
 800dd34:	1c53      	adds	r3, r2, #1
 800dd36:	9303      	str	r3, [sp, #12]
 800dd38:	b341      	cbz	r1, 800dd8c <__hexnan+0x88>
 800dd3a:	4608      	mov	r0, r1
 800dd3c:	9205      	str	r2, [sp, #20]
 800dd3e:	9104      	str	r1, [sp, #16]
 800dd40:	f7ff fd5f 	bl	800d802 <__hexdig_fun>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	d14f      	bne.n	800dde8 <__hexnan+0xe4>
 800dd48:	9904      	ldr	r1, [sp, #16]
 800dd4a:	9a05      	ldr	r2, [sp, #20]
 800dd4c:	2920      	cmp	r1, #32
 800dd4e:	d818      	bhi.n	800dd82 <__hexnan+0x7e>
 800dd50:	9b02      	ldr	r3, [sp, #8]
 800dd52:	459b      	cmp	fp, r3
 800dd54:	dd13      	ble.n	800dd7e <__hexnan+0x7a>
 800dd56:	454c      	cmp	r4, r9
 800dd58:	d206      	bcs.n	800dd68 <__hexnan+0x64>
 800dd5a:	2d07      	cmp	r5, #7
 800dd5c:	dc04      	bgt.n	800dd68 <__hexnan+0x64>
 800dd5e:	462a      	mov	r2, r5
 800dd60:	4649      	mov	r1, r9
 800dd62:	4620      	mov	r0, r4
 800dd64:	f7ff ffa8 	bl	800dcb8 <L_shift>
 800dd68:	4544      	cmp	r4, r8
 800dd6a:	d950      	bls.n	800de0e <__hexnan+0x10a>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	f1a4 0904 	sub.w	r9, r4, #4
 800dd72:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd76:	f8cd b008 	str.w	fp, [sp, #8]
 800dd7a:	464c      	mov	r4, r9
 800dd7c:	461d      	mov	r5, r3
 800dd7e:	9a03      	ldr	r2, [sp, #12]
 800dd80:	e7d7      	b.n	800dd32 <__hexnan+0x2e>
 800dd82:	2929      	cmp	r1, #41	; 0x29
 800dd84:	d156      	bne.n	800de34 <__hexnan+0x130>
 800dd86:	3202      	adds	r2, #2
 800dd88:	f8ca 2000 	str.w	r2, [sl]
 800dd8c:	f1bb 0f00 	cmp.w	fp, #0
 800dd90:	d050      	beq.n	800de34 <__hexnan+0x130>
 800dd92:	454c      	cmp	r4, r9
 800dd94:	d206      	bcs.n	800dda4 <__hexnan+0xa0>
 800dd96:	2d07      	cmp	r5, #7
 800dd98:	dc04      	bgt.n	800dda4 <__hexnan+0xa0>
 800dd9a:	462a      	mov	r2, r5
 800dd9c:	4649      	mov	r1, r9
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f7ff ff8a 	bl	800dcb8 <L_shift>
 800dda4:	4544      	cmp	r4, r8
 800dda6:	d934      	bls.n	800de12 <__hexnan+0x10e>
 800dda8:	f1a8 0204 	sub.w	r2, r8, #4
 800ddac:	4623      	mov	r3, r4
 800ddae:	f853 1b04 	ldr.w	r1, [r3], #4
 800ddb2:	f842 1f04 	str.w	r1, [r2, #4]!
 800ddb6:	429f      	cmp	r7, r3
 800ddb8:	d2f9      	bcs.n	800ddae <__hexnan+0xaa>
 800ddba:	1b3b      	subs	r3, r7, r4
 800ddbc:	f023 0303 	bic.w	r3, r3, #3
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	3401      	adds	r4, #1
 800ddc4:	3e03      	subs	r6, #3
 800ddc6:	42b4      	cmp	r4, r6
 800ddc8:	bf88      	it	hi
 800ddca:	2304      	movhi	r3, #4
 800ddcc:	4443      	add	r3, r8
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f843 2b04 	str.w	r2, [r3], #4
 800ddd4:	429f      	cmp	r7, r3
 800ddd6:	d2fb      	bcs.n	800ddd0 <__hexnan+0xcc>
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	b91b      	cbnz	r3, 800dde4 <__hexnan+0xe0>
 800dddc:	4547      	cmp	r7, r8
 800ddde:	d127      	bne.n	800de30 <__hexnan+0x12c>
 800dde0:	2301      	movs	r3, #1
 800dde2:	603b      	str	r3, [r7, #0]
 800dde4:	2005      	movs	r0, #5
 800dde6:	e026      	b.n	800de36 <__hexnan+0x132>
 800dde8:	3501      	adds	r5, #1
 800ddea:	2d08      	cmp	r5, #8
 800ddec:	f10b 0b01 	add.w	fp, fp, #1
 800ddf0:	dd06      	ble.n	800de00 <__hexnan+0xfc>
 800ddf2:	4544      	cmp	r4, r8
 800ddf4:	d9c3      	bls.n	800dd7e <__hexnan+0x7a>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddfc:	2501      	movs	r5, #1
 800ddfe:	3c04      	subs	r4, #4
 800de00:	6822      	ldr	r2, [r4, #0]
 800de02:	f000 000f 	and.w	r0, r0, #15
 800de06:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800de0a:	6022      	str	r2, [r4, #0]
 800de0c:	e7b7      	b.n	800dd7e <__hexnan+0x7a>
 800de0e:	2508      	movs	r5, #8
 800de10:	e7b5      	b.n	800dd7e <__hexnan+0x7a>
 800de12:	9b01      	ldr	r3, [sp, #4]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d0df      	beq.n	800ddd8 <__hexnan+0xd4>
 800de18:	f04f 32ff 	mov.w	r2, #4294967295
 800de1c:	f1c3 0320 	rsb	r3, r3, #32
 800de20:	fa22 f303 	lsr.w	r3, r2, r3
 800de24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800de28:	401a      	ands	r2, r3
 800de2a:	f846 2c04 	str.w	r2, [r6, #-4]
 800de2e:	e7d3      	b.n	800ddd8 <__hexnan+0xd4>
 800de30:	3f04      	subs	r7, #4
 800de32:	e7d1      	b.n	800ddd8 <__hexnan+0xd4>
 800de34:	2004      	movs	r0, #4
 800de36:	b007      	add	sp, #28
 800de38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de3c <_localeconv_r>:
 800de3c:	4800      	ldr	r0, [pc, #0]	; (800de40 <_localeconv_r+0x4>)
 800de3e:	4770      	bx	lr
 800de40:	2000069c 	.word	0x2000069c

0800de44 <__retarget_lock_init_recursive>:
 800de44:	4770      	bx	lr

0800de46 <__retarget_lock_acquire_recursive>:
 800de46:	4770      	bx	lr

0800de48 <__retarget_lock_release_recursive>:
 800de48:	4770      	bx	lr

0800de4a <__swhatbuf_r>:
 800de4a:	b570      	push	{r4, r5, r6, lr}
 800de4c:	460e      	mov	r6, r1
 800de4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de52:	2900      	cmp	r1, #0
 800de54:	b096      	sub	sp, #88	; 0x58
 800de56:	4614      	mov	r4, r2
 800de58:	461d      	mov	r5, r3
 800de5a:	da08      	bge.n	800de6e <__swhatbuf_r+0x24>
 800de5c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800de60:	2200      	movs	r2, #0
 800de62:	602a      	str	r2, [r5, #0]
 800de64:	061a      	lsls	r2, r3, #24
 800de66:	d410      	bmi.n	800de8a <__swhatbuf_r+0x40>
 800de68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de6c:	e00e      	b.n	800de8c <__swhatbuf_r+0x42>
 800de6e:	466a      	mov	r2, sp
 800de70:	f001 f8bc 	bl	800efec <_fstat_r>
 800de74:	2800      	cmp	r0, #0
 800de76:	dbf1      	blt.n	800de5c <__swhatbuf_r+0x12>
 800de78:	9a01      	ldr	r2, [sp, #4]
 800de7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800de7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800de82:	425a      	negs	r2, r3
 800de84:	415a      	adcs	r2, r3
 800de86:	602a      	str	r2, [r5, #0]
 800de88:	e7ee      	b.n	800de68 <__swhatbuf_r+0x1e>
 800de8a:	2340      	movs	r3, #64	; 0x40
 800de8c:	2000      	movs	r0, #0
 800de8e:	6023      	str	r3, [r4, #0]
 800de90:	b016      	add	sp, #88	; 0x58
 800de92:	bd70      	pop	{r4, r5, r6, pc}

0800de94 <__smakebuf_r>:
 800de94:	898b      	ldrh	r3, [r1, #12]
 800de96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de98:	079d      	lsls	r5, r3, #30
 800de9a:	4606      	mov	r6, r0
 800de9c:	460c      	mov	r4, r1
 800de9e:	d507      	bpl.n	800deb0 <__smakebuf_r+0x1c>
 800dea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dea4:	6023      	str	r3, [r4, #0]
 800dea6:	6123      	str	r3, [r4, #16]
 800dea8:	2301      	movs	r3, #1
 800deaa:	6163      	str	r3, [r4, #20]
 800deac:	b002      	add	sp, #8
 800deae:	bd70      	pop	{r4, r5, r6, pc}
 800deb0:	ab01      	add	r3, sp, #4
 800deb2:	466a      	mov	r2, sp
 800deb4:	f7ff ffc9 	bl	800de4a <__swhatbuf_r>
 800deb8:	9900      	ldr	r1, [sp, #0]
 800deba:	4605      	mov	r5, r0
 800debc:	4630      	mov	r0, r6
 800debe:	f7fc fd93 	bl	800a9e8 <_malloc_r>
 800dec2:	b948      	cbnz	r0, 800ded8 <__smakebuf_r+0x44>
 800dec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dec8:	059a      	lsls	r2, r3, #22
 800deca:	d4ef      	bmi.n	800deac <__smakebuf_r+0x18>
 800decc:	f023 0303 	bic.w	r3, r3, #3
 800ded0:	f043 0302 	orr.w	r3, r3, #2
 800ded4:	81a3      	strh	r3, [r4, #12]
 800ded6:	e7e3      	b.n	800dea0 <__smakebuf_r+0xc>
 800ded8:	4b0d      	ldr	r3, [pc, #52]	; (800df10 <__smakebuf_r+0x7c>)
 800deda:	62b3      	str	r3, [r6, #40]	; 0x28
 800dedc:	89a3      	ldrh	r3, [r4, #12]
 800dede:	6020      	str	r0, [r4, #0]
 800dee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dee4:	81a3      	strh	r3, [r4, #12]
 800dee6:	9b00      	ldr	r3, [sp, #0]
 800dee8:	6163      	str	r3, [r4, #20]
 800deea:	9b01      	ldr	r3, [sp, #4]
 800deec:	6120      	str	r0, [r4, #16]
 800deee:	b15b      	cbz	r3, 800df08 <__smakebuf_r+0x74>
 800def0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800def4:	4630      	mov	r0, r6
 800def6:	f001 f88b 	bl	800f010 <_isatty_r>
 800defa:	b128      	cbz	r0, 800df08 <__smakebuf_r+0x74>
 800defc:	89a3      	ldrh	r3, [r4, #12]
 800defe:	f023 0303 	bic.w	r3, r3, #3
 800df02:	f043 0301 	orr.w	r3, r3, #1
 800df06:	81a3      	strh	r3, [r4, #12]
 800df08:	89a0      	ldrh	r0, [r4, #12]
 800df0a:	4305      	orrs	r5, r0
 800df0c:	81a5      	strh	r5, [r4, #12]
 800df0e:	e7cd      	b.n	800deac <__smakebuf_r+0x18>
 800df10:	0800d599 	.word	0x0800d599

0800df14 <__ascii_mbtowc>:
 800df14:	b082      	sub	sp, #8
 800df16:	b901      	cbnz	r1, 800df1a <__ascii_mbtowc+0x6>
 800df18:	a901      	add	r1, sp, #4
 800df1a:	b142      	cbz	r2, 800df2e <__ascii_mbtowc+0x1a>
 800df1c:	b14b      	cbz	r3, 800df32 <__ascii_mbtowc+0x1e>
 800df1e:	7813      	ldrb	r3, [r2, #0]
 800df20:	600b      	str	r3, [r1, #0]
 800df22:	7812      	ldrb	r2, [r2, #0]
 800df24:	1e10      	subs	r0, r2, #0
 800df26:	bf18      	it	ne
 800df28:	2001      	movne	r0, #1
 800df2a:	b002      	add	sp, #8
 800df2c:	4770      	bx	lr
 800df2e:	4610      	mov	r0, r2
 800df30:	e7fb      	b.n	800df2a <__ascii_mbtowc+0x16>
 800df32:	f06f 0001 	mvn.w	r0, #1
 800df36:	e7f8      	b.n	800df2a <__ascii_mbtowc+0x16>

0800df38 <__malloc_lock>:
 800df38:	4801      	ldr	r0, [pc, #4]	; (800df40 <__malloc_lock+0x8>)
 800df3a:	f7ff bf84 	b.w	800de46 <__retarget_lock_acquire_recursive>
 800df3e:	bf00      	nop
 800df40:	20000f64 	.word	0x20000f64

0800df44 <__malloc_unlock>:
 800df44:	4801      	ldr	r0, [pc, #4]	; (800df4c <__malloc_unlock+0x8>)
 800df46:	f7ff bf7f 	b.w	800de48 <__retarget_lock_release_recursive>
 800df4a:	bf00      	nop
 800df4c:	20000f64 	.word	0x20000f64

0800df50 <_Balloc>:
 800df50:	b570      	push	{r4, r5, r6, lr}
 800df52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df54:	4604      	mov	r4, r0
 800df56:	460d      	mov	r5, r1
 800df58:	b976      	cbnz	r6, 800df78 <_Balloc+0x28>
 800df5a:	2010      	movs	r0, #16
 800df5c:	f7fc fcba 	bl	800a8d4 <malloc>
 800df60:	4602      	mov	r2, r0
 800df62:	6260      	str	r0, [r4, #36]	; 0x24
 800df64:	b920      	cbnz	r0, 800df70 <_Balloc+0x20>
 800df66:	4b18      	ldr	r3, [pc, #96]	; (800dfc8 <_Balloc+0x78>)
 800df68:	4818      	ldr	r0, [pc, #96]	; (800dfcc <_Balloc+0x7c>)
 800df6a:	2166      	movs	r1, #102	; 0x66
 800df6c:	f7fe fc14 	bl	800c798 <__assert_func>
 800df70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df74:	6006      	str	r6, [r0, #0]
 800df76:	60c6      	str	r6, [r0, #12]
 800df78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800df7a:	68f3      	ldr	r3, [r6, #12]
 800df7c:	b183      	cbz	r3, 800dfa0 <_Balloc+0x50>
 800df7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df86:	b9b8      	cbnz	r0, 800dfb8 <_Balloc+0x68>
 800df88:	2101      	movs	r1, #1
 800df8a:	fa01 f605 	lsl.w	r6, r1, r5
 800df8e:	1d72      	adds	r2, r6, #5
 800df90:	0092      	lsls	r2, r2, #2
 800df92:	4620      	mov	r0, r4
 800df94:	f000 fc9a 	bl	800e8cc <_calloc_r>
 800df98:	b160      	cbz	r0, 800dfb4 <_Balloc+0x64>
 800df9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df9e:	e00e      	b.n	800dfbe <_Balloc+0x6e>
 800dfa0:	2221      	movs	r2, #33	; 0x21
 800dfa2:	2104      	movs	r1, #4
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f000 fc91 	bl	800e8cc <_calloc_r>
 800dfaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfac:	60f0      	str	r0, [r6, #12]
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1e4      	bne.n	800df7e <_Balloc+0x2e>
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	bd70      	pop	{r4, r5, r6, pc}
 800dfb8:	6802      	ldr	r2, [r0, #0]
 800dfba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfc4:	e7f7      	b.n	800dfb6 <_Balloc+0x66>
 800dfc6:	bf00      	nop
 800dfc8:	0800feb5 	.word	0x0800feb5
 800dfcc:	0801020c 	.word	0x0801020c

0800dfd0 <_Bfree>:
 800dfd0:	b570      	push	{r4, r5, r6, lr}
 800dfd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dfd4:	4605      	mov	r5, r0
 800dfd6:	460c      	mov	r4, r1
 800dfd8:	b976      	cbnz	r6, 800dff8 <_Bfree+0x28>
 800dfda:	2010      	movs	r0, #16
 800dfdc:	f7fc fc7a 	bl	800a8d4 <malloc>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	6268      	str	r0, [r5, #36]	; 0x24
 800dfe4:	b920      	cbnz	r0, 800dff0 <_Bfree+0x20>
 800dfe6:	4b09      	ldr	r3, [pc, #36]	; (800e00c <_Bfree+0x3c>)
 800dfe8:	4809      	ldr	r0, [pc, #36]	; (800e010 <_Bfree+0x40>)
 800dfea:	218a      	movs	r1, #138	; 0x8a
 800dfec:	f7fe fbd4 	bl	800c798 <__assert_func>
 800dff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dff4:	6006      	str	r6, [r0, #0]
 800dff6:	60c6      	str	r6, [r0, #12]
 800dff8:	b13c      	cbz	r4, 800e00a <_Bfree+0x3a>
 800dffa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dffc:	6862      	ldr	r2, [r4, #4]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e004:	6021      	str	r1, [r4, #0]
 800e006:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e00a:	bd70      	pop	{r4, r5, r6, pc}
 800e00c:	0800feb5 	.word	0x0800feb5
 800e010:	0801020c 	.word	0x0801020c

0800e014 <__multadd>:
 800e014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e018:	690d      	ldr	r5, [r1, #16]
 800e01a:	4607      	mov	r7, r0
 800e01c:	460c      	mov	r4, r1
 800e01e:	461e      	mov	r6, r3
 800e020:	f101 0c14 	add.w	ip, r1, #20
 800e024:	2000      	movs	r0, #0
 800e026:	f8dc 3000 	ldr.w	r3, [ip]
 800e02a:	b299      	uxth	r1, r3
 800e02c:	fb02 6101 	mla	r1, r2, r1, r6
 800e030:	0c1e      	lsrs	r6, r3, #16
 800e032:	0c0b      	lsrs	r3, r1, #16
 800e034:	fb02 3306 	mla	r3, r2, r6, r3
 800e038:	b289      	uxth	r1, r1
 800e03a:	3001      	adds	r0, #1
 800e03c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e040:	4285      	cmp	r5, r0
 800e042:	f84c 1b04 	str.w	r1, [ip], #4
 800e046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e04a:	dcec      	bgt.n	800e026 <__multadd+0x12>
 800e04c:	b30e      	cbz	r6, 800e092 <__multadd+0x7e>
 800e04e:	68a3      	ldr	r3, [r4, #8]
 800e050:	42ab      	cmp	r3, r5
 800e052:	dc19      	bgt.n	800e088 <__multadd+0x74>
 800e054:	6861      	ldr	r1, [r4, #4]
 800e056:	4638      	mov	r0, r7
 800e058:	3101      	adds	r1, #1
 800e05a:	f7ff ff79 	bl	800df50 <_Balloc>
 800e05e:	4680      	mov	r8, r0
 800e060:	b928      	cbnz	r0, 800e06e <__multadd+0x5a>
 800e062:	4602      	mov	r2, r0
 800e064:	4b0c      	ldr	r3, [pc, #48]	; (800e098 <__multadd+0x84>)
 800e066:	480d      	ldr	r0, [pc, #52]	; (800e09c <__multadd+0x88>)
 800e068:	21b5      	movs	r1, #181	; 0xb5
 800e06a:	f7fe fb95 	bl	800c798 <__assert_func>
 800e06e:	6922      	ldr	r2, [r4, #16]
 800e070:	3202      	adds	r2, #2
 800e072:	f104 010c 	add.w	r1, r4, #12
 800e076:	0092      	lsls	r2, r2, #2
 800e078:	300c      	adds	r0, #12
 800e07a:	f7fc fc33 	bl	800a8e4 <memcpy>
 800e07e:	4621      	mov	r1, r4
 800e080:	4638      	mov	r0, r7
 800e082:	f7ff ffa5 	bl	800dfd0 <_Bfree>
 800e086:	4644      	mov	r4, r8
 800e088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e08c:	3501      	adds	r5, #1
 800e08e:	615e      	str	r6, [r3, #20]
 800e090:	6125      	str	r5, [r4, #16]
 800e092:	4620      	mov	r0, r4
 800e094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e098:	0801011d 	.word	0x0801011d
 800e09c:	0801020c 	.word	0x0801020c

0800e0a0 <__s2b>:
 800e0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0a4:	460c      	mov	r4, r1
 800e0a6:	4615      	mov	r5, r2
 800e0a8:	461f      	mov	r7, r3
 800e0aa:	2209      	movs	r2, #9
 800e0ac:	3308      	adds	r3, #8
 800e0ae:	4606      	mov	r6, r0
 800e0b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	db09      	blt.n	800e0d0 <__s2b+0x30>
 800e0bc:	4630      	mov	r0, r6
 800e0be:	f7ff ff47 	bl	800df50 <_Balloc>
 800e0c2:	b940      	cbnz	r0, 800e0d6 <__s2b+0x36>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	4b19      	ldr	r3, [pc, #100]	; (800e12c <__s2b+0x8c>)
 800e0c8:	4819      	ldr	r0, [pc, #100]	; (800e130 <__s2b+0x90>)
 800e0ca:	21ce      	movs	r1, #206	; 0xce
 800e0cc:	f7fe fb64 	bl	800c798 <__assert_func>
 800e0d0:	0052      	lsls	r2, r2, #1
 800e0d2:	3101      	adds	r1, #1
 800e0d4:	e7f0      	b.n	800e0b8 <__s2b+0x18>
 800e0d6:	9b08      	ldr	r3, [sp, #32]
 800e0d8:	6143      	str	r3, [r0, #20]
 800e0da:	2d09      	cmp	r5, #9
 800e0dc:	f04f 0301 	mov.w	r3, #1
 800e0e0:	6103      	str	r3, [r0, #16]
 800e0e2:	dd16      	ble.n	800e112 <__s2b+0x72>
 800e0e4:	f104 0909 	add.w	r9, r4, #9
 800e0e8:	46c8      	mov	r8, r9
 800e0ea:	442c      	add	r4, r5
 800e0ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e0f0:	4601      	mov	r1, r0
 800e0f2:	3b30      	subs	r3, #48	; 0x30
 800e0f4:	220a      	movs	r2, #10
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	f7ff ff8c 	bl	800e014 <__multadd>
 800e0fc:	45a0      	cmp	r8, r4
 800e0fe:	d1f5      	bne.n	800e0ec <__s2b+0x4c>
 800e100:	f1a5 0408 	sub.w	r4, r5, #8
 800e104:	444c      	add	r4, r9
 800e106:	1b2d      	subs	r5, r5, r4
 800e108:	1963      	adds	r3, r4, r5
 800e10a:	42bb      	cmp	r3, r7
 800e10c:	db04      	blt.n	800e118 <__s2b+0x78>
 800e10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e112:	340a      	adds	r4, #10
 800e114:	2509      	movs	r5, #9
 800e116:	e7f6      	b.n	800e106 <__s2b+0x66>
 800e118:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e11c:	4601      	mov	r1, r0
 800e11e:	3b30      	subs	r3, #48	; 0x30
 800e120:	220a      	movs	r2, #10
 800e122:	4630      	mov	r0, r6
 800e124:	f7ff ff76 	bl	800e014 <__multadd>
 800e128:	e7ee      	b.n	800e108 <__s2b+0x68>
 800e12a:	bf00      	nop
 800e12c:	0801011d 	.word	0x0801011d
 800e130:	0801020c 	.word	0x0801020c

0800e134 <__hi0bits>:
 800e134:	0c03      	lsrs	r3, r0, #16
 800e136:	041b      	lsls	r3, r3, #16
 800e138:	b9d3      	cbnz	r3, 800e170 <__hi0bits+0x3c>
 800e13a:	0400      	lsls	r0, r0, #16
 800e13c:	2310      	movs	r3, #16
 800e13e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e142:	bf04      	itt	eq
 800e144:	0200      	lsleq	r0, r0, #8
 800e146:	3308      	addeq	r3, #8
 800e148:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e14c:	bf04      	itt	eq
 800e14e:	0100      	lsleq	r0, r0, #4
 800e150:	3304      	addeq	r3, #4
 800e152:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e156:	bf04      	itt	eq
 800e158:	0080      	lsleq	r0, r0, #2
 800e15a:	3302      	addeq	r3, #2
 800e15c:	2800      	cmp	r0, #0
 800e15e:	db05      	blt.n	800e16c <__hi0bits+0x38>
 800e160:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e164:	f103 0301 	add.w	r3, r3, #1
 800e168:	bf08      	it	eq
 800e16a:	2320      	moveq	r3, #32
 800e16c:	4618      	mov	r0, r3
 800e16e:	4770      	bx	lr
 800e170:	2300      	movs	r3, #0
 800e172:	e7e4      	b.n	800e13e <__hi0bits+0xa>

0800e174 <__lo0bits>:
 800e174:	6803      	ldr	r3, [r0, #0]
 800e176:	f013 0207 	ands.w	r2, r3, #7
 800e17a:	4601      	mov	r1, r0
 800e17c:	d00b      	beq.n	800e196 <__lo0bits+0x22>
 800e17e:	07da      	lsls	r2, r3, #31
 800e180:	d423      	bmi.n	800e1ca <__lo0bits+0x56>
 800e182:	0798      	lsls	r0, r3, #30
 800e184:	bf49      	itett	mi
 800e186:	085b      	lsrmi	r3, r3, #1
 800e188:	089b      	lsrpl	r3, r3, #2
 800e18a:	2001      	movmi	r0, #1
 800e18c:	600b      	strmi	r3, [r1, #0]
 800e18e:	bf5c      	itt	pl
 800e190:	600b      	strpl	r3, [r1, #0]
 800e192:	2002      	movpl	r0, #2
 800e194:	4770      	bx	lr
 800e196:	b298      	uxth	r0, r3
 800e198:	b9a8      	cbnz	r0, 800e1c6 <__lo0bits+0x52>
 800e19a:	0c1b      	lsrs	r3, r3, #16
 800e19c:	2010      	movs	r0, #16
 800e19e:	b2da      	uxtb	r2, r3
 800e1a0:	b90a      	cbnz	r2, 800e1a6 <__lo0bits+0x32>
 800e1a2:	3008      	adds	r0, #8
 800e1a4:	0a1b      	lsrs	r3, r3, #8
 800e1a6:	071a      	lsls	r2, r3, #28
 800e1a8:	bf04      	itt	eq
 800e1aa:	091b      	lsreq	r3, r3, #4
 800e1ac:	3004      	addeq	r0, #4
 800e1ae:	079a      	lsls	r2, r3, #30
 800e1b0:	bf04      	itt	eq
 800e1b2:	089b      	lsreq	r3, r3, #2
 800e1b4:	3002      	addeq	r0, #2
 800e1b6:	07da      	lsls	r2, r3, #31
 800e1b8:	d403      	bmi.n	800e1c2 <__lo0bits+0x4e>
 800e1ba:	085b      	lsrs	r3, r3, #1
 800e1bc:	f100 0001 	add.w	r0, r0, #1
 800e1c0:	d005      	beq.n	800e1ce <__lo0bits+0x5a>
 800e1c2:	600b      	str	r3, [r1, #0]
 800e1c4:	4770      	bx	lr
 800e1c6:	4610      	mov	r0, r2
 800e1c8:	e7e9      	b.n	800e19e <__lo0bits+0x2a>
 800e1ca:	2000      	movs	r0, #0
 800e1cc:	4770      	bx	lr
 800e1ce:	2020      	movs	r0, #32
 800e1d0:	4770      	bx	lr
	...

0800e1d4 <__i2b>:
 800e1d4:	b510      	push	{r4, lr}
 800e1d6:	460c      	mov	r4, r1
 800e1d8:	2101      	movs	r1, #1
 800e1da:	f7ff feb9 	bl	800df50 <_Balloc>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	b928      	cbnz	r0, 800e1ee <__i2b+0x1a>
 800e1e2:	4b05      	ldr	r3, [pc, #20]	; (800e1f8 <__i2b+0x24>)
 800e1e4:	4805      	ldr	r0, [pc, #20]	; (800e1fc <__i2b+0x28>)
 800e1e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e1ea:	f7fe fad5 	bl	800c798 <__assert_func>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	6144      	str	r4, [r0, #20]
 800e1f2:	6103      	str	r3, [r0, #16]
 800e1f4:	bd10      	pop	{r4, pc}
 800e1f6:	bf00      	nop
 800e1f8:	0801011d 	.word	0x0801011d
 800e1fc:	0801020c 	.word	0x0801020c

0800e200 <__multiply>:
 800e200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e204:	4691      	mov	r9, r2
 800e206:	690a      	ldr	r2, [r1, #16]
 800e208:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	bfb8      	it	lt
 800e210:	460b      	movlt	r3, r1
 800e212:	460c      	mov	r4, r1
 800e214:	bfbc      	itt	lt
 800e216:	464c      	movlt	r4, r9
 800e218:	4699      	movlt	r9, r3
 800e21a:	6927      	ldr	r7, [r4, #16]
 800e21c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e220:	68a3      	ldr	r3, [r4, #8]
 800e222:	6861      	ldr	r1, [r4, #4]
 800e224:	eb07 060a 	add.w	r6, r7, sl
 800e228:	42b3      	cmp	r3, r6
 800e22a:	b085      	sub	sp, #20
 800e22c:	bfb8      	it	lt
 800e22e:	3101      	addlt	r1, #1
 800e230:	f7ff fe8e 	bl	800df50 <_Balloc>
 800e234:	b930      	cbnz	r0, 800e244 <__multiply+0x44>
 800e236:	4602      	mov	r2, r0
 800e238:	4b44      	ldr	r3, [pc, #272]	; (800e34c <__multiply+0x14c>)
 800e23a:	4845      	ldr	r0, [pc, #276]	; (800e350 <__multiply+0x150>)
 800e23c:	f240 115d 	movw	r1, #349	; 0x15d
 800e240:	f7fe faaa 	bl	800c798 <__assert_func>
 800e244:	f100 0514 	add.w	r5, r0, #20
 800e248:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e24c:	462b      	mov	r3, r5
 800e24e:	2200      	movs	r2, #0
 800e250:	4543      	cmp	r3, r8
 800e252:	d321      	bcc.n	800e298 <__multiply+0x98>
 800e254:	f104 0314 	add.w	r3, r4, #20
 800e258:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e25c:	f109 0314 	add.w	r3, r9, #20
 800e260:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e264:	9202      	str	r2, [sp, #8]
 800e266:	1b3a      	subs	r2, r7, r4
 800e268:	3a15      	subs	r2, #21
 800e26a:	f022 0203 	bic.w	r2, r2, #3
 800e26e:	3204      	adds	r2, #4
 800e270:	f104 0115 	add.w	r1, r4, #21
 800e274:	428f      	cmp	r7, r1
 800e276:	bf38      	it	cc
 800e278:	2204      	movcc	r2, #4
 800e27a:	9201      	str	r2, [sp, #4]
 800e27c:	9a02      	ldr	r2, [sp, #8]
 800e27e:	9303      	str	r3, [sp, #12]
 800e280:	429a      	cmp	r2, r3
 800e282:	d80c      	bhi.n	800e29e <__multiply+0x9e>
 800e284:	2e00      	cmp	r6, #0
 800e286:	dd03      	ble.n	800e290 <__multiply+0x90>
 800e288:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d05a      	beq.n	800e346 <__multiply+0x146>
 800e290:	6106      	str	r6, [r0, #16]
 800e292:	b005      	add	sp, #20
 800e294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e298:	f843 2b04 	str.w	r2, [r3], #4
 800e29c:	e7d8      	b.n	800e250 <__multiply+0x50>
 800e29e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e2a2:	f1ba 0f00 	cmp.w	sl, #0
 800e2a6:	d024      	beq.n	800e2f2 <__multiply+0xf2>
 800e2a8:	f104 0e14 	add.w	lr, r4, #20
 800e2ac:	46a9      	mov	r9, r5
 800e2ae:	f04f 0c00 	mov.w	ip, #0
 800e2b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e2b6:	f8d9 1000 	ldr.w	r1, [r9]
 800e2ba:	fa1f fb82 	uxth.w	fp, r2
 800e2be:	b289      	uxth	r1, r1
 800e2c0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e2c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e2c8:	f8d9 2000 	ldr.w	r2, [r9]
 800e2cc:	4461      	add	r1, ip
 800e2ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e2d2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e2d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e2da:	b289      	uxth	r1, r1
 800e2dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e2e0:	4577      	cmp	r7, lr
 800e2e2:	f849 1b04 	str.w	r1, [r9], #4
 800e2e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e2ea:	d8e2      	bhi.n	800e2b2 <__multiply+0xb2>
 800e2ec:	9a01      	ldr	r2, [sp, #4]
 800e2ee:	f845 c002 	str.w	ip, [r5, r2]
 800e2f2:	9a03      	ldr	r2, [sp, #12]
 800e2f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e2f8:	3304      	adds	r3, #4
 800e2fa:	f1b9 0f00 	cmp.w	r9, #0
 800e2fe:	d020      	beq.n	800e342 <__multiply+0x142>
 800e300:	6829      	ldr	r1, [r5, #0]
 800e302:	f104 0c14 	add.w	ip, r4, #20
 800e306:	46ae      	mov	lr, r5
 800e308:	f04f 0a00 	mov.w	sl, #0
 800e30c:	f8bc b000 	ldrh.w	fp, [ip]
 800e310:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e314:	fb09 220b 	mla	r2, r9, fp, r2
 800e318:	4492      	add	sl, r2
 800e31a:	b289      	uxth	r1, r1
 800e31c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e320:	f84e 1b04 	str.w	r1, [lr], #4
 800e324:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e328:	f8be 1000 	ldrh.w	r1, [lr]
 800e32c:	0c12      	lsrs	r2, r2, #16
 800e32e:	fb09 1102 	mla	r1, r9, r2, r1
 800e332:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e336:	4567      	cmp	r7, ip
 800e338:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e33c:	d8e6      	bhi.n	800e30c <__multiply+0x10c>
 800e33e:	9a01      	ldr	r2, [sp, #4]
 800e340:	50a9      	str	r1, [r5, r2]
 800e342:	3504      	adds	r5, #4
 800e344:	e79a      	b.n	800e27c <__multiply+0x7c>
 800e346:	3e01      	subs	r6, #1
 800e348:	e79c      	b.n	800e284 <__multiply+0x84>
 800e34a:	bf00      	nop
 800e34c:	0801011d 	.word	0x0801011d
 800e350:	0801020c 	.word	0x0801020c

0800e354 <__pow5mult>:
 800e354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e358:	4615      	mov	r5, r2
 800e35a:	f012 0203 	ands.w	r2, r2, #3
 800e35e:	4606      	mov	r6, r0
 800e360:	460f      	mov	r7, r1
 800e362:	d007      	beq.n	800e374 <__pow5mult+0x20>
 800e364:	4c25      	ldr	r4, [pc, #148]	; (800e3fc <__pow5mult+0xa8>)
 800e366:	3a01      	subs	r2, #1
 800e368:	2300      	movs	r3, #0
 800e36a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e36e:	f7ff fe51 	bl	800e014 <__multadd>
 800e372:	4607      	mov	r7, r0
 800e374:	10ad      	asrs	r5, r5, #2
 800e376:	d03d      	beq.n	800e3f4 <__pow5mult+0xa0>
 800e378:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e37a:	b97c      	cbnz	r4, 800e39c <__pow5mult+0x48>
 800e37c:	2010      	movs	r0, #16
 800e37e:	f7fc faa9 	bl	800a8d4 <malloc>
 800e382:	4602      	mov	r2, r0
 800e384:	6270      	str	r0, [r6, #36]	; 0x24
 800e386:	b928      	cbnz	r0, 800e394 <__pow5mult+0x40>
 800e388:	4b1d      	ldr	r3, [pc, #116]	; (800e400 <__pow5mult+0xac>)
 800e38a:	481e      	ldr	r0, [pc, #120]	; (800e404 <__pow5mult+0xb0>)
 800e38c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e390:	f7fe fa02 	bl	800c798 <__assert_func>
 800e394:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e398:	6004      	str	r4, [r0, #0]
 800e39a:	60c4      	str	r4, [r0, #12]
 800e39c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e3a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e3a4:	b94c      	cbnz	r4, 800e3ba <__pow5mult+0x66>
 800e3a6:	f240 2171 	movw	r1, #625	; 0x271
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	f7ff ff12 	bl	800e1d4 <__i2b>
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	6003      	str	r3, [r0, #0]
 800e3ba:	f04f 0900 	mov.w	r9, #0
 800e3be:	07eb      	lsls	r3, r5, #31
 800e3c0:	d50a      	bpl.n	800e3d8 <__pow5mult+0x84>
 800e3c2:	4639      	mov	r1, r7
 800e3c4:	4622      	mov	r2, r4
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	f7ff ff1a 	bl	800e200 <__multiply>
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	4680      	mov	r8, r0
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	f7ff fdfd 	bl	800dfd0 <_Bfree>
 800e3d6:	4647      	mov	r7, r8
 800e3d8:	106d      	asrs	r5, r5, #1
 800e3da:	d00b      	beq.n	800e3f4 <__pow5mult+0xa0>
 800e3dc:	6820      	ldr	r0, [r4, #0]
 800e3de:	b938      	cbnz	r0, 800e3f0 <__pow5mult+0x9c>
 800e3e0:	4622      	mov	r2, r4
 800e3e2:	4621      	mov	r1, r4
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	f7ff ff0b 	bl	800e200 <__multiply>
 800e3ea:	6020      	str	r0, [r4, #0]
 800e3ec:	f8c0 9000 	str.w	r9, [r0]
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	e7e4      	b.n	800e3be <__pow5mult+0x6a>
 800e3f4:	4638      	mov	r0, r7
 800e3f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3fa:	bf00      	nop
 800e3fc:	08010358 	.word	0x08010358
 800e400:	0800feb5 	.word	0x0800feb5
 800e404:	0801020c 	.word	0x0801020c

0800e408 <__lshift>:
 800e408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e40c:	460c      	mov	r4, r1
 800e40e:	6849      	ldr	r1, [r1, #4]
 800e410:	6923      	ldr	r3, [r4, #16]
 800e412:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e416:	68a3      	ldr	r3, [r4, #8]
 800e418:	4607      	mov	r7, r0
 800e41a:	4691      	mov	r9, r2
 800e41c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e420:	f108 0601 	add.w	r6, r8, #1
 800e424:	42b3      	cmp	r3, r6
 800e426:	db0b      	blt.n	800e440 <__lshift+0x38>
 800e428:	4638      	mov	r0, r7
 800e42a:	f7ff fd91 	bl	800df50 <_Balloc>
 800e42e:	4605      	mov	r5, r0
 800e430:	b948      	cbnz	r0, 800e446 <__lshift+0x3e>
 800e432:	4602      	mov	r2, r0
 800e434:	4b2a      	ldr	r3, [pc, #168]	; (800e4e0 <__lshift+0xd8>)
 800e436:	482b      	ldr	r0, [pc, #172]	; (800e4e4 <__lshift+0xdc>)
 800e438:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e43c:	f7fe f9ac 	bl	800c798 <__assert_func>
 800e440:	3101      	adds	r1, #1
 800e442:	005b      	lsls	r3, r3, #1
 800e444:	e7ee      	b.n	800e424 <__lshift+0x1c>
 800e446:	2300      	movs	r3, #0
 800e448:	f100 0114 	add.w	r1, r0, #20
 800e44c:	f100 0210 	add.w	r2, r0, #16
 800e450:	4618      	mov	r0, r3
 800e452:	4553      	cmp	r3, sl
 800e454:	db37      	blt.n	800e4c6 <__lshift+0xbe>
 800e456:	6920      	ldr	r0, [r4, #16]
 800e458:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e45c:	f104 0314 	add.w	r3, r4, #20
 800e460:	f019 091f 	ands.w	r9, r9, #31
 800e464:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e468:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e46c:	d02f      	beq.n	800e4ce <__lshift+0xc6>
 800e46e:	f1c9 0e20 	rsb	lr, r9, #32
 800e472:	468a      	mov	sl, r1
 800e474:	f04f 0c00 	mov.w	ip, #0
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	fa02 f209 	lsl.w	r2, r2, r9
 800e47e:	ea42 020c 	orr.w	r2, r2, ip
 800e482:	f84a 2b04 	str.w	r2, [sl], #4
 800e486:	f853 2b04 	ldr.w	r2, [r3], #4
 800e48a:	4298      	cmp	r0, r3
 800e48c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e490:	d8f2      	bhi.n	800e478 <__lshift+0x70>
 800e492:	1b03      	subs	r3, r0, r4
 800e494:	3b15      	subs	r3, #21
 800e496:	f023 0303 	bic.w	r3, r3, #3
 800e49a:	3304      	adds	r3, #4
 800e49c:	f104 0215 	add.w	r2, r4, #21
 800e4a0:	4290      	cmp	r0, r2
 800e4a2:	bf38      	it	cc
 800e4a4:	2304      	movcc	r3, #4
 800e4a6:	f841 c003 	str.w	ip, [r1, r3]
 800e4aa:	f1bc 0f00 	cmp.w	ip, #0
 800e4ae:	d001      	beq.n	800e4b4 <__lshift+0xac>
 800e4b0:	f108 0602 	add.w	r6, r8, #2
 800e4b4:	3e01      	subs	r6, #1
 800e4b6:	4638      	mov	r0, r7
 800e4b8:	612e      	str	r6, [r5, #16]
 800e4ba:	4621      	mov	r1, r4
 800e4bc:	f7ff fd88 	bl	800dfd0 <_Bfree>
 800e4c0:	4628      	mov	r0, r5
 800e4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	e7c1      	b.n	800e452 <__lshift+0x4a>
 800e4ce:	3904      	subs	r1, #4
 800e4d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4d8:	4298      	cmp	r0, r3
 800e4da:	d8f9      	bhi.n	800e4d0 <__lshift+0xc8>
 800e4dc:	e7ea      	b.n	800e4b4 <__lshift+0xac>
 800e4de:	bf00      	nop
 800e4e0:	0801011d 	.word	0x0801011d
 800e4e4:	0801020c 	.word	0x0801020c

0800e4e8 <__mcmp>:
 800e4e8:	b530      	push	{r4, r5, lr}
 800e4ea:	6902      	ldr	r2, [r0, #16]
 800e4ec:	690c      	ldr	r4, [r1, #16]
 800e4ee:	1b12      	subs	r2, r2, r4
 800e4f0:	d10e      	bne.n	800e510 <__mcmp+0x28>
 800e4f2:	f100 0314 	add.w	r3, r0, #20
 800e4f6:	3114      	adds	r1, #20
 800e4f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e4fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e500:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e504:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e508:	42a5      	cmp	r5, r4
 800e50a:	d003      	beq.n	800e514 <__mcmp+0x2c>
 800e50c:	d305      	bcc.n	800e51a <__mcmp+0x32>
 800e50e:	2201      	movs	r2, #1
 800e510:	4610      	mov	r0, r2
 800e512:	bd30      	pop	{r4, r5, pc}
 800e514:	4283      	cmp	r3, r0
 800e516:	d3f3      	bcc.n	800e500 <__mcmp+0x18>
 800e518:	e7fa      	b.n	800e510 <__mcmp+0x28>
 800e51a:	f04f 32ff 	mov.w	r2, #4294967295
 800e51e:	e7f7      	b.n	800e510 <__mcmp+0x28>

0800e520 <__mdiff>:
 800e520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e524:	460c      	mov	r4, r1
 800e526:	4606      	mov	r6, r0
 800e528:	4611      	mov	r1, r2
 800e52a:	4620      	mov	r0, r4
 800e52c:	4690      	mov	r8, r2
 800e52e:	f7ff ffdb 	bl	800e4e8 <__mcmp>
 800e532:	1e05      	subs	r5, r0, #0
 800e534:	d110      	bne.n	800e558 <__mdiff+0x38>
 800e536:	4629      	mov	r1, r5
 800e538:	4630      	mov	r0, r6
 800e53a:	f7ff fd09 	bl	800df50 <_Balloc>
 800e53e:	b930      	cbnz	r0, 800e54e <__mdiff+0x2e>
 800e540:	4b3a      	ldr	r3, [pc, #232]	; (800e62c <__mdiff+0x10c>)
 800e542:	4602      	mov	r2, r0
 800e544:	f240 2132 	movw	r1, #562	; 0x232
 800e548:	4839      	ldr	r0, [pc, #228]	; (800e630 <__mdiff+0x110>)
 800e54a:	f7fe f925 	bl	800c798 <__assert_func>
 800e54e:	2301      	movs	r3, #1
 800e550:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e554:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e558:	bfa4      	itt	ge
 800e55a:	4643      	movge	r3, r8
 800e55c:	46a0      	movge	r8, r4
 800e55e:	4630      	mov	r0, r6
 800e560:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e564:	bfa6      	itte	ge
 800e566:	461c      	movge	r4, r3
 800e568:	2500      	movge	r5, #0
 800e56a:	2501      	movlt	r5, #1
 800e56c:	f7ff fcf0 	bl	800df50 <_Balloc>
 800e570:	b920      	cbnz	r0, 800e57c <__mdiff+0x5c>
 800e572:	4b2e      	ldr	r3, [pc, #184]	; (800e62c <__mdiff+0x10c>)
 800e574:	4602      	mov	r2, r0
 800e576:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e57a:	e7e5      	b.n	800e548 <__mdiff+0x28>
 800e57c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e580:	6926      	ldr	r6, [r4, #16]
 800e582:	60c5      	str	r5, [r0, #12]
 800e584:	f104 0914 	add.w	r9, r4, #20
 800e588:	f108 0514 	add.w	r5, r8, #20
 800e58c:	f100 0e14 	add.w	lr, r0, #20
 800e590:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e594:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e598:	f108 0210 	add.w	r2, r8, #16
 800e59c:	46f2      	mov	sl, lr
 800e59e:	2100      	movs	r1, #0
 800e5a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e5a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e5a8:	fa1f f883 	uxth.w	r8, r3
 800e5ac:	fa11 f18b 	uxtah	r1, r1, fp
 800e5b0:	0c1b      	lsrs	r3, r3, #16
 800e5b2:	eba1 0808 	sub.w	r8, r1, r8
 800e5b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e5ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e5be:	fa1f f888 	uxth.w	r8, r8
 800e5c2:	1419      	asrs	r1, r3, #16
 800e5c4:	454e      	cmp	r6, r9
 800e5c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e5ca:	f84a 3b04 	str.w	r3, [sl], #4
 800e5ce:	d8e7      	bhi.n	800e5a0 <__mdiff+0x80>
 800e5d0:	1b33      	subs	r3, r6, r4
 800e5d2:	3b15      	subs	r3, #21
 800e5d4:	f023 0303 	bic.w	r3, r3, #3
 800e5d8:	3304      	adds	r3, #4
 800e5da:	3415      	adds	r4, #21
 800e5dc:	42a6      	cmp	r6, r4
 800e5de:	bf38      	it	cc
 800e5e0:	2304      	movcc	r3, #4
 800e5e2:	441d      	add	r5, r3
 800e5e4:	4473      	add	r3, lr
 800e5e6:	469e      	mov	lr, r3
 800e5e8:	462e      	mov	r6, r5
 800e5ea:	4566      	cmp	r6, ip
 800e5ec:	d30e      	bcc.n	800e60c <__mdiff+0xec>
 800e5ee:	f10c 0203 	add.w	r2, ip, #3
 800e5f2:	1b52      	subs	r2, r2, r5
 800e5f4:	f022 0203 	bic.w	r2, r2, #3
 800e5f8:	3d03      	subs	r5, #3
 800e5fa:	45ac      	cmp	ip, r5
 800e5fc:	bf38      	it	cc
 800e5fe:	2200      	movcc	r2, #0
 800e600:	441a      	add	r2, r3
 800e602:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e606:	b17b      	cbz	r3, 800e628 <__mdiff+0x108>
 800e608:	6107      	str	r7, [r0, #16]
 800e60a:	e7a3      	b.n	800e554 <__mdiff+0x34>
 800e60c:	f856 8b04 	ldr.w	r8, [r6], #4
 800e610:	fa11 f288 	uxtah	r2, r1, r8
 800e614:	1414      	asrs	r4, r2, #16
 800e616:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e61a:	b292      	uxth	r2, r2
 800e61c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e620:	f84e 2b04 	str.w	r2, [lr], #4
 800e624:	1421      	asrs	r1, r4, #16
 800e626:	e7e0      	b.n	800e5ea <__mdiff+0xca>
 800e628:	3f01      	subs	r7, #1
 800e62a:	e7ea      	b.n	800e602 <__mdiff+0xe2>
 800e62c:	0801011d 	.word	0x0801011d
 800e630:	0801020c 	.word	0x0801020c

0800e634 <__ulp>:
 800e634:	b082      	sub	sp, #8
 800e636:	ed8d 0b00 	vstr	d0, [sp]
 800e63a:	9b01      	ldr	r3, [sp, #4]
 800e63c:	4912      	ldr	r1, [pc, #72]	; (800e688 <__ulp+0x54>)
 800e63e:	4019      	ands	r1, r3
 800e640:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e644:	2900      	cmp	r1, #0
 800e646:	dd05      	ble.n	800e654 <__ulp+0x20>
 800e648:	2200      	movs	r2, #0
 800e64a:	460b      	mov	r3, r1
 800e64c:	ec43 2b10 	vmov	d0, r2, r3
 800e650:	b002      	add	sp, #8
 800e652:	4770      	bx	lr
 800e654:	4249      	negs	r1, r1
 800e656:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e65a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e65e:	f04f 0200 	mov.w	r2, #0
 800e662:	f04f 0300 	mov.w	r3, #0
 800e666:	da04      	bge.n	800e672 <__ulp+0x3e>
 800e668:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e66c:	fa41 f300 	asr.w	r3, r1, r0
 800e670:	e7ec      	b.n	800e64c <__ulp+0x18>
 800e672:	f1a0 0114 	sub.w	r1, r0, #20
 800e676:	291e      	cmp	r1, #30
 800e678:	bfda      	itte	le
 800e67a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e67e:	fa20 f101 	lsrle.w	r1, r0, r1
 800e682:	2101      	movgt	r1, #1
 800e684:	460a      	mov	r2, r1
 800e686:	e7e1      	b.n	800e64c <__ulp+0x18>
 800e688:	7ff00000 	.word	0x7ff00000

0800e68c <__b2d>:
 800e68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e68e:	6905      	ldr	r5, [r0, #16]
 800e690:	f100 0714 	add.w	r7, r0, #20
 800e694:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e698:	1f2e      	subs	r6, r5, #4
 800e69a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e69e:	4620      	mov	r0, r4
 800e6a0:	f7ff fd48 	bl	800e134 <__hi0bits>
 800e6a4:	f1c0 0320 	rsb	r3, r0, #32
 800e6a8:	280a      	cmp	r0, #10
 800e6aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e728 <__b2d+0x9c>
 800e6ae:	600b      	str	r3, [r1, #0]
 800e6b0:	dc14      	bgt.n	800e6dc <__b2d+0x50>
 800e6b2:	f1c0 0e0b 	rsb	lr, r0, #11
 800e6b6:	fa24 f10e 	lsr.w	r1, r4, lr
 800e6ba:	42b7      	cmp	r7, r6
 800e6bc:	ea41 030c 	orr.w	r3, r1, ip
 800e6c0:	bf34      	ite	cc
 800e6c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e6c6:	2100      	movcs	r1, #0
 800e6c8:	3015      	adds	r0, #21
 800e6ca:	fa04 f000 	lsl.w	r0, r4, r0
 800e6ce:	fa21 f10e 	lsr.w	r1, r1, lr
 800e6d2:	ea40 0201 	orr.w	r2, r0, r1
 800e6d6:	ec43 2b10 	vmov	d0, r2, r3
 800e6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6dc:	42b7      	cmp	r7, r6
 800e6de:	bf3a      	itte	cc
 800e6e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e6e4:	f1a5 0608 	subcc.w	r6, r5, #8
 800e6e8:	2100      	movcs	r1, #0
 800e6ea:	380b      	subs	r0, #11
 800e6ec:	d017      	beq.n	800e71e <__b2d+0x92>
 800e6ee:	f1c0 0c20 	rsb	ip, r0, #32
 800e6f2:	fa04 f500 	lsl.w	r5, r4, r0
 800e6f6:	42be      	cmp	r6, r7
 800e6f8:	fa21 f40c 	lsr.w	r4, r1, ip
 800e6fc:	ea45 0504 	orr.w	r5, r5, r4
 800e700:	bf8c      	ite	hi
 800e702:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e706:	2400      	movls	r4, #0
 800e708:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e70c:	fa01 f000 	lsl.w	r0, r1, r0
 800e710:	fa24 f40c 	lsr.w	r4, r4, ip
 800e714:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e718:	ea40 0204 	orr.w	r2, r0, r4
 800e71c:	e7db      	b.n	800e6d6 <__b2d+0x4a>
 800e71e:	ea44 030c 	orr.w	r3, r4, ip
 800e722:	460a      	mov	r2, r1
 800e724:	e7d7      	b.n	800e6d6 <__b2d+0x4a>
 800e726:	bf00      	nop
 800e728:	3ff00000 	.word	0x3ff00000

0800e72c <__d2b>:
 800e72c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e730:	4689      	mov	r9, r1
 800e732:	2101      	movs	r1, #1
 800e734:	ec57 6b10 	vmov	r6, r7, d0
 800e738:	4690      	mov	r8, r2
 800e73a:	f7ff fc09 	bl	800df50 <_Balloc>
 800e73e:	4604      	mov	r4, r0
 800e740:	b930      	cbnz	r0, 800e750 <__d2b+0x24>
 800e742:	4602      	mov	r2, r0
 800e744:	4b25      	ldr	r3, [pc, #148]	; (800e7dc <__d2b+0xb0>)
 800e746:	4826      	ldr	r0, [pc, #152]	; (800e7e0 <__d2b+0xb4>)
 800e748:	f240 310a 	movw	r1, #778	; 0x30a
 800e74c:	f7fe f824 	bl	800c798 <__assert_func>
 800e750:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e754:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e758:	bb35      	cbnz	r5, 800e7a8 <__d2b+0x7c>
 800e75a:	2e00      	cmp	r6, #0
 800e75c:	9301      	str	r3, [sp, #4]
 800e75e:	d028      	beq.n	800e7b2 <__d2b+0x86>
 800e760:	4668      	mov	r0, sp
 800e762:	9600      	str	r6, [sp, #0]
 800e764:	f7ff fd06 	bl	800e174 <__lo0bits>
 800e768:	9900      	ldr	r1, [sp, #0]
 800e76a:	b300      	cbz	r0, 800e7ae <__d2b+0x82>
 800e76c:	9a01      	ldr	r2, [sp, #4]
 800e76e:	f1c0 0320 	rsb	r3, r0, #32
 800e772:	fa02 f303 	lsl.w	r3, r2, r3
 800e776:	430b      	orrs	r3, r1
 800e778:	40c2      	lsrs	r2, r0
 800e77a:	6163      	str	r3, [r4, #20]
 800e77c:	9201      	str	r2, [sp, #4]
 800e77e:	9b01      	ldr	r3, [sp, #4]
 800e780:	61a3      	str	r3, [r4, #24]
 800e782:	2b00      	cmp	r3, #0
 800e784:	bf14      	ite	ne
 800e786:	2202      	movne	r2, #2
 800e788:	2201      	moveq	r2, #1
 800e78a:	6122      	str	r2, [r4, #16]
 800e78c:	b1d5      	cbz	r5, 800e7c4 <__d2b+0x98>
 800e78e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e792:	4405      	add	r5, r0
 800e794:	f8c9 5000 	str.w	r5, [r9]
 800e798:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e79c:	f8c8 0000 	str.w	r0, [r8]
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	b003      	add	sp, #12
 800e7a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e7ac:	e7d5      	b.n	800e75a <__d2b+0x2e>
 800e7ae:	6161      	str	r1, [r4, #20]
 800e7b0:	e7e5      	b.n	800e77e <__d2b+0x52>
 800e7b2:	a801      	add	r0, sp, #4
 800e7b4:	f7ff fcde 	bl	800e174 <__lo0bits>
 800e7b8:	9b01      	ldr	r3, [sp, #4]
 800e7ba:	6163      	str	r3, [r4, #20]
 800e7bc:	2201      	movs	r2, #1
 800e7be:	6122      	str	r2, [r4, #16]
 800e7c0:	3020      	adds	r0, #32
 800e7c2:	e7e3      	b.n	800e78c <__d2b+0x60>
 800e7c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e7cc:	f8c9 0000 	str.w	r0, [r9]
 800e7d0:	6918      	ldr	r0, [r3, #16]
 800e7d2:	f7ff fcaf 	bl	800e134 <__hi0bits>
 800e7d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7da:	e7df      	b.n	800e79c <__d2b+0x70>
 800e7dc:	0801011d 	.word	0x0801011d
 800e7e0:	0801020c 	.word	0x0801020c

0800e7e4 <__ratio>:
 800e7e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e8:	4688      	mov	r8, r1
 800e7ea:	4669      	mov	r1, sp
 800e7ec:	4681      	mov	r9, r0
 800e7ee:	f7ff ff4d 	bl	800e68c <__b2d>
 800e7f2:	a901      	add	r1, sp, #4
 800e7f4:	4640      	mov	r0, r8
 800e7f6:	ec55 4b10 	vmov	r4, r5, d0
 800e7fa:	ee10 aa10 	vmov	sl, s0
 800e7fe:	f7ff ff45 	bl	800e68c <__b2d>
 800e802:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e806:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e80a:	1a59      	subs	r1, r3, r1
 800e80c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e810:	1ad3      	subs	r3, r2, r3
 800e812:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e816:	ec57 6b10 	vmov	r6, r7, d0
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	bfd6      	itet	le
 800e81e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e822:	462a      	movgt	r2, r5
 800e824:	463a      	movle	r2, r7
 800e826:	46ab      	mov	fp, r5
 800e828:	bfd6      	itet	le
 800e82a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e82e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e832:	ee00 3a90 	vmovle	s1, r3
 800e836:	ec4b ab17 	vmov	d7, sl, fp
 800e83a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e83e:	b003      	add	sp, #12
 800e840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e844 <__copybits>:
 800e844:	3901      	subs	r1, #1
 800e846:	b570      	push	{r4, r5, r6, lr}
 800e848:	1149      	asrs	r1, r1, #5
 800e84a:	6914      	ldr	r4, [r2, #16]
 800e84c:	3101      	adds	r1, #1
 800e84e:	f102 0314 	add.w	r3, r2, #20
 800e852:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e856:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e85a:	1f05      	subs	r5, r0, #4
 800e85c:	42a3      	cmp	r3, r4
 800e85e:	d30c      	bcc.n	800e87a <__copybits+0x36>
 800e860:	1aa3      	subs	r3, r4, r2
 800e862:	3b11      	subs	r3, #17
 800e864:	f023 0303 	bic.w	r3, r3, #3
 800e868:	3211      	adds	r2, #17
 800e86a:	42a2      	cmp	r2, r4
 800e86c:	bf88      	it	hi
 800e86e:	2300      	movhi	r3, #0
 800e870:	4418      	add	r0, r3
 800e872:	2300      	movs	r3, #0
 800e874:	4288      	cmp	r0, r1
 800e876:	d305      	bcc.n	800e884 <__copybits+0x40>
 800e878:	bd70      	pop	{r4, r5, r6, pc}
 800e87a:	f853 6b04 	ldr.w	r6, [r3], #4
 800e87e:	f845 6f04 	str.w	r6, [r5, #4]!
 800e882:	e7eb      	b.n	800e85c <__copybits+0x18>
 800e884:	f840 3b04 	str.w	r3, [r0], #4
 800e888:	e7f4      	b.n	800e874 <__copybits+0x30>

0800e88a <__any_on>:
 800e88a:	f100 0214 	add.w	r2, r0, #20
 800e88e:	6900      	ldr	r0, [r0, #16]
 800e890:	114b      	asrs	r3, r1, #5
 800e892:	4298      	cmp	r0, r3
 800e894:	b510      	push	{r4, lr}
 800e896:	db11      	blt.n	800e8bc <__any_on+0x32>
 800e898:	dd0a      	ble.n	800e8b0 <__any_on+0x26>
 800e89a:	f011 011f 	ands.w	r1, r1, #31
 800e89e:	d007      	beq.n	800e8b0 <__any_on+0x26>
 800e8a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e8a4:	fa24 f001 	lsr.w	r0, r4, r1
 800e8a8:	fa00 f101 	lsl.w	r1, r0, r1
 800e8ac:	428c      	cmp	r4, r1
 800e8ae:	d10b      	bne.n	800e8c8 <__any_on+0x3e>
 800e8b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d803      	bhi.n	800e8c0 <__any_on+0x36>
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	bd10      	pop	{r4, pc}
 800e8bc:	4603      	mov	r3, r0
 800e8be:	e7f7      	b.n	800e8b0 <__any_on+0x26>
 800e8c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e8c4:	2900      	cmp	r1, #0
 800e8c6:	d0f5      	beq.n	800e8b4 <__any_on+0x2a>
 800e8c8:	2001      	movs	r0, #1
 800e8ca:	e7f6      	b.n	800e8ba <__any_on+0x30>

0800e8cc <_calloc_r>:
 800e8cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8ce:	fba1 2402 	umull	r2, r4, r1, r2
 800e8d2:	b94c      	cbnz	r4, 800e8e8 <_calloc_r+0x1c>
 800e8d4:	4611      	mov	r1, r2
 800e8d6:	9201      	str	r2, [sp, #4]
 800e8d8:	f7fc f886 	bl	800a9e8 <_malloc_r>
 800e8dc:	9a01      	ldr	r2, [sp, #4]
 800e8de:	4605      	mov	r5, r0
 800e8e0:	b930      	cbnz	r0, 800e8f0 <_calloc_r+0x24>
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	b003      	add	sp, #12
 800e8e6:	bd30      	pop	{r4, r5, pc}
 800e8e8:	220c      	movs	r2, #12
 800e8ea:	6002      	str	r2, [r0, #0]
 800e8ec:	2500      	movs	r5, #0
 800e8ee:	e7f8      	b.n	800e8e2 <_calloc_r+0x16>
 800e8f0:	4621      	mov	r1, r4
 800e8f2:	f7fc f805 	bl	800a900 <memset>
 800e8f6:	e7f4      	b.n	800e8e2 <_calloc_r+0x16>

0800e8f8 <_realloc_r>:
 800e8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8fc:	4680      	mov	r8, r0
 800e8fe:	4614      	mov	r4, r2
 800e900:	460e      	mov	r6, r1
 800e902:	b921      	cbnz	r1, 800e90e <_realloc_r+0x16>
 800e904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e908:	4611      	mov	r1, r2
 800e90a:	f7fc b86d 	b.w	800a9e8 <_malloc_r>
 800e90e:	b92a      	cbnz	r2, 800e91c <_realloc_r+0x24>
 800e910:	f7fb fffe 	bl	800a910 <_free_r>
 800e914:	4625      	mov	r5, r4
 800e916:	4628      	mov	r0, r5
 800e918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e91c:	f000 fbb4 	bl	800f088 <_malloc_usable_size_r>
 800e920:	4284      	cmp	r4, r0
 800e922:	4607      	mov	r7, r0
 800e924:	d802      	bhi.n	800e92c <_realloc_r+0x34>
 800e926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e92a:	d812      	bhi.n	800e952 <_realloc_r+0x5a>
 800e92c:	4621      	mov	r1, r4
 800e92e:	4640      	mov	r0, r8
 800e930:	f7fc f85a 	bl	800a9e8 <_malloc_r>
 800e934:	4605      	mov	r5, r0
 800e936:	2800      	cmp	r0, #0
 800e938:	d0ed      	beq.n	800e916 <_realloc_r+0x1e>
 800e93a:	42bc      	cmp	r4, r7
 800e93c:	4622      	mov	r2, r4
 800e93e:	4631      	mov	r1, r6
 800e940:	bf28      	it	cs
 800e942:	463a      	movcs	r2, r7
 800e944:	f7fb ffce 	bl	800a8e4 <memcpy>
 800e948:	4631      	mov	r1, r6
 800e94a:	4640      	mov	r0, r8
 800e94c:	f7fb ffe0 	bl	800a910 <_free_r>
 800e950:	e7e1      	b.n	800e916 <_realloc_r+0x1e>
 800e952:	4635      	mov	r5, r6
 800e954:	e7df      	b.n	800e916 <_realloc_r+0x1e>

0800e956 <__ssputs_r>:
 800e956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e95a:	688e      	ldr	r6, [r1, #8]
 800e95c:	429e      	cmp	r6, r3
 800e95e:	4682      	mov	sl, r0
 800e960:	460c      	mov	r4, r1
 800e962:	4690      	mov	r8, r2
 800e964:	461f      	mov	r7, r3
 800e966:	d838      	bhi.n	800e9da <__ssputs_r+0x84>
 800e968:	898a      	ldrh	r2, [r1, #12]
 800e96a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e96e:	d032      	beq.n	800e9d6 <__ssputs_r+0x80>
 800e970:	6825      	ldr	r5, [r4, #0]
 800e972:	6909      	ldr	r1, [r1, #16]
 800e974:	eba5 0901 	sub.w	r9, r5, r1
 800e978:	6965      	ldr	r5, [r4, #20]
 800e97a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e97e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e982:	3301      	adds	r3, #1
 800e984:	444b      	add	r3, r9
 800e986:	106d      	asrs	r5, r5, #1
 800e988:	429d      	cmp	r5, r3
 800e98a:	bf38      	it	cc
 800e98c:	461d      	movcc	r5, r3
 800e98e:	0553      	lsls	r3, r2, #21
 800e990:	d531      	bpl.n	800e9f6 <__ssputs_r+0xa0>
 800e992:	4629      	mov	r1, r5
 800e994:	f7fc f828 	bl	800a9e8 <_malloc_r>
 800e998:	4606      	mov	r6, r0
 800e99a:	b950      	cbnz	r0, 800e9b2 <__ssputs_r+0x5c>
 800e99c:	230c      	movs	r3, #12
 800e99e:	f8ca 3000 	str.w	r3, [sl]
 800e9a2:	89a3      	ldrh	r3, [r4, #12]
 800e9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9a8:	81a3      	strh	r3, [r4, #12]
 800e9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9b2:	6921      	ldr	r1, [r4, #16]
 800e9b4:	464a      	mov	r2, r9
 800e9b6:	f7fb ff95 	bl	800a8e4 <memcpy>
 800e9ba:	89a3      	ldrh	r3, [r4, #12]
 800e9bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e9c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9c4:	81a3      	strh	r3, [r4, #12]
 800e9c6:	6126      	str	r6, [r4, #16]
 800e9c8:	6165      	str	r5, [r4, #20]
 800e9ca:	444e      	add	r6, r9
 800e9cc:	eba5 0509 	sub.w	r5, r5, r9
 800e9d0:	6026      	str	r6, [r4, #0]
 800e9d2:	60a5      	str	r5, [r4, #8]
 800e9d4:	463e      	mov	r6, r7
 800e9d6:	42be      	cmp	r6, r7
 800e9d8:	d900      	bls.n	800e9dc <__ssputs_r+0x86>
 800e9da:	463e      	mov	r6, r7
 800e9dc:	6820      	ldr	r0, [r4, #0]
 800e9de:	4632      	mov	r2, r6
 800e9e0:	4641      	mov	r1, r8
 800e9e2:	f000 fb37 	bl	800f054 <memmove>
 800e9e6:	68a3      	ldr	r3, [r4, #8]
 800e9e8:	1b9b      	subs	r3, r3, r6
 800e9ea:	60a3      	str	r3, [r4, #8]
 800e9ec:	6823      	ldr	r3, [r4, #0]
 800e9ee:	4433      	add	r3, r6
 800e9f0:	6023      	str	r3, [r4, #0]
 800e9f2:	2000      	movs	r0, #0
 800e9f4:	e7db      	b.n	800e9ae <__ssputs_r+0x58>
 800e9f6:	462a      	mov	r2, r5
 800e9f8:	f7ff ff7e 	bl	800e8f8 <_realloc_r>
 800e9fc:	4606      	mov	r6, r0
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	d1e1      	bne.n	800e9c6 <__ssputs_r+0x70>
 800ea02:	6921      	ldr	r1, [r4, #16]
 800ea04:	4650      	mov	r0, sl
 800ea06:	f7fb ff83 	bl	800a910 <_free_r>
 800ea0a:	e7c7      	b.n	800e99c <__ssputs_r+0x46>

0800ea0c <_svfiprintf_r>:
 800ea0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea10:	4698      	mov	r8, r3
 800ea12:	898b      	ldrh	r3, [r1, #12]
 800ea14:	061b      	lsls	r3, r3, #24
 800ea16:	b09d      	sub	sp, #116	; 0x74
 800ea18:	4607      	mov	r7, r0
 800ea1a:	460d      	mov	r5, r1
 800ea1c:	4614      	mov	r4, r2
 800ea1e:	d50e      	bpl.n	800ea3e <_svfiprintf_r+0x32>
 800ea20:	690b      	ldr	r3, [r1, #16]
 800ea22:	b963      	cbnz	r3, 800ea3e <_svfiprintf_r+0x32>
 800ea24:	2140      	movs	r1, #64	; 0x40
 800ea26:	f7fb ffdf 	bl	800a9e8 <_malloc_r>
 800ea2a:	6028      	str	r0, [r5, #0]
 800ea2c:	6128      	str	r0, [r5, #16]
 800ea2e:	b920      	cbnz	r0, 800ea3a <_svfiprintf_r+0x2e>
 800ea30:	230c      	movs	r3, #12
 800ea32:	603b      	str	r3, [r7, #0]
 800ea34:	f04f 30ff 	mov.w	r0, #4294967295
 800ea38:	e0d1      	b.n	800ebde <_svfiprintf_r+0x1d2>
 800ea3a:	2340      	movs	r3, #64	; 0x40
 800ea3c:	616b      	str	r3, [r5, #20]
 800ea3e:	2300      	movs	r3, #0
 800ea40:	9309      	str	r3, [sp, #36]	; 0x24
 800ea42:	2320      	movs	r3, #32
 800ea44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea48:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea4c:	2330      	movs	r3, #48	; 0x30
 800ea4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ebf8 <_svfiprintf_r+0x1ec>
 800ea52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea56:	f04f 0901 	mov.w	r9, #1
 800ea5a:	4623      	mov	r3, r4
 800ea5c:	469a      	mov	sl, r3
 800ea5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea62:	b10a      	cbz	r2, 800ea68 <_svfiprintf_r+0x5c>
 800ea64:	2a25      	cmp	r2, #37	; 0x25
 800ea66:	d1f9      	bne.n	800ea5c <_svfiprintf_r+0x50>
 800ea68:	ebba 0b04 	subs.w	fp, sl, r4
 800ea6c:	d00b      	beq.n	800ea86 <_svfiprintf_r+0x7a>
 800ea6e:	465b      	mov	r3, fp
 800ea70:	4622      	mov	r2, r4
 800ea72:	4629      	mov	r1, r5
 800ea74:	4638      	mov	r0, r7
 800ea76:	f7ff ff6e 	bl	800e956 <__ssputs_r>
 800ea7a:	3001      	adds	r0, #1
 800ea7c:	f000 80aa 	beq.w	800ebd4 <_svfiprintf_r+0x1c8>
 800ea80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea82:	445a      	add	r2, fp
 800ea84:	9209      	str	r2, [sp, #36]	; 0x24
 800ea86:	f89a 3000 	ldrb.w	r3, [sl]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 80a2 	beq.w	800ebd4 <_svfiprintf_r+0x1c8>
 800ea90:	2300      	movs	r3, #0
 800ea92:	f04f 32ff 	mov.w	r2, #4294967295
 800ea96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea9a:	f10a 0a01 	add.w	sl, sl, #1
 800ea9e:	9304      	str	r3, [sp, #16]
 800eaa0:	9307      	str	r3, [sp, #28]
 800eaa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaa6:	931a      	str	r3, [sp, #104]	; 0x68
 800eaa8:	4654      	mov	r4, sl
 800eaaa:	2205      	movs	r2, #5
 800eaac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eab0:	4851      	ldr	r0, [pc, #324]	; (800ebf8 <_svfiprintf_r+0x1ec>)
 800eab2:	f7f1 fbcd 	bl	8000250 <memchr>
 800eab6:	9a04      	ldr	r2, [sp, #16]
 800eab8:	b9d8      	cbnz	r0, 800eaf2 <_svfiprintf_r+0xe6>
 800eaba:	06d0      	lsls	r0, r2, #27
 800eabc:	bf44      	itt	mi
 800eabe:	2320      	movmi	r3, #32
 800eac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eac4:	0711      	lsls	r1, r2, #28
 800eac6:	bf44      	itt	mi
 800eac8:	232b      	movmi	r3, #43	; 0x2b
 800eaca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eace:	f89a 3000 	ldrb.w	r3, [sl]
 800ead2:	2b2a      	cmp	r3, #42	; 0x2a
 800ead4:	d015      	beq.n	800eb02 <_svfiprintf_r+0xf6>
 800ead6:	9a07      	ldr	r2, [sp, #28]
 800ead8:	4654      	mov	r4, sl
 800eada:	2000      	movs	r0, #0
 800eadc:	f04f 0c0a 	mov.w	ip, #10
 800eae0:	4621      	mov	r1, r4
 800eae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eae6:	3b30      	subs	r3, #48	; 0x30
 800eae8:	2b09      	cmp	r3, #9
 800eaea:	d94e      	bls.n	800eb8a <_svfiprintf_r+0x17e>
 800eaec:	b1b0      	cbz	r0, 800eb1c <_svfiprintf_r+0x110>
 800eaee:	9207      	str	r2, [sp, #28]
 800eaf0:	e014      	b.n	800eb1c <_svfiprintf_r+0x110>
 800eaf2:	eba0 0308 	sub.w	r3, r0, r8
 800eaf6:	fa09 f303 	lsl.w	r3, r9, r3
 800eafa:	4313      	orrs	r3, r2
 800eafc:	9304      	str	r3, [sp, #16]
 800eafe:	46a2      	mov	sl, r4
 800eb00:	e7d2      	b.n	800eaa8 <_svfiprintf_r+0x9c>
 800eb02:	9b03      	ldr	r3, [sp, #12]
 800eb04:	1d19      	adds	r1, r3, #4
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	9103      	str	r1, [sp, #12]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	bfbb      	ittet	lt
 800eb0e:	425b      	neglt	r3, r3
 800eb10:	f042 0202 	orrlt.w	r2, r2, #2
 800eb14:	9307      	strge	r3, [sp, #28]
 800eb16:	9307      	strlt	r3, [sp, #28]
 800eb18:	bfb8      	it	lt
 800eb1a:	9204      	strlt	r2, [sp, #16]
 800eb1c:	7823      	ldrb	r3, [r4, #0]
 800eb1e:	2b2e      	cmp	r3, #46	; 0x2e
 800eb20:	d10c      	bne.n	800eb3c <_svfiprintf_r+0x130>
 800eb22:	7863      	ldrb	r3, [r4, #1]
 800eb24:	2b2a      	cmp	r3, #42	; 0x2a
 800eb26:	d135      	bne.n	800eb94 <_svfiprintf_r+0x188>
 800eb28:	9b03      	ldr	r3, [sp, #12]
 800eb2a:	1d1a      	adds	r2, r3, #4
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	9203      	str	r2, [sp, #12]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	bfb8      	it	lt
 800eb34:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb38:	3402      	adds	r4, #2
 800eb3a:	9305      	str	r3, [sp, #20]
 800eb3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec08 <_svfiprintf_r+0x1fc>
 800eb40:	7821      	ldrb	r1, [r4, #0]
 800eb42:	2203      	movs	r2, #3
 800eb44:	4650      	mov	r0, sl
 800eb46:	f7f1 fb83 	bl	8000250 <memchr>
 800eb4a:	b140      	cbz	r0, 800eb5e <_svfiprintf_r+0x152>
 800eb4c:	2340      	movs	r3, #64	; 0x40
 800eb4e:	eba0 000a 	sub.w	r0, r0, sl
 800eb52:	fa03 f000 	lsl.w	r0, r3, r0
 800eb56:	9b04      	ldr	r3, [sp, #16]
 800eb58:	4303      	orrs	r3, r0
 800eb5a:	3401      	adds	r4, #1
 800eb5c:	9304      	str	r3, [sp, #16]
 800eb5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb62:	4826      	ldr	r0, [pc, #152]	; (800ebfc <_svfiprintf_r+0x1f0>)
 800eb64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb68:	2206      	movs	r2, #6
 800eb6a:	f7f1 fb71 	bl	8000250 <memchr>
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	d038      	beq.n	800ebe4 <_svfiprintf_r+0x1d8>
 800eb72:	4b23      	ldr	r3, [pc, #140]	; (800ec00 <_svfiprintf_r+0x1f4>)
 800eb74:	bb1b      	cbnz	r3, 800ebbe <_svfiprintf_r+0x1b2>
 800eb76:	9b03      	ldr	r3, [sp, #12]
 800eb78:	3307      	adds	r3, #7
 800eb7a:	f023 0307 	bic.w	r3, r3, #7
 800eb7e:	3308      	adds	r3, #8
 800eb80:	9303      	str	r3, [sp, #12]
 800eb82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb84:	4433      	add	r3, r6
 800eb86:	9309      	str	r3, [sp, #36]	; 0x24
 800eb88:	e767      	b.n	800ea5a <_svfiprintf_r+0x4e>
 800eb8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb8e:	460c      	mov	r4, r1
 800eb90:	2001      	movs	r0, #1
 800eb92:	e7a5      	b.n	800eae0 <_svfiprintf_r+0xd4>
 800eb94:	2300      	movs	r3, #0
 800eb96:	3401      	adds	r4, #1
 800eb98:	9305      	str	r3, [sp, #20]
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	f04f 0c0a 	mov.w	ip, #10
 800eba0:	4620      	mov	r0, r4
 800eba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eba6:	3a30      	subs	r2, #48	; 0x30
 800eba8:	2a09      	cmp	r2, #9
 800ebaa:	d903      	bls.n	800ebb4 <_svfiprintf_r+0x1a8>
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d0c5      	beq.n	800eb3c <_svfiprintf_r+0x130>
 800ebb0:	9105      	str	r1, [sp, #20]
 800ebb2:	e7c3      	b.n	800eb3c <_svfiprintf_r+0x130>
 800ebb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebb8:	4604      	mov	r4, r0
 800ebba:	2301      	movs	r3, #1
 800ebbc:	e7f0      	b.n	800eba0 <_svfiprintf_r+0x194>
 800ebbe:	ab03      	add	r3, sp, #12
 800ebc0:	9300      	str	r3, [sp, #0]
 800ebc2:	462a      	mov	r2, r5
 800ebc4:	4b0f      	ldr	r3, [pc, #60]	; (800ec04 <_svfiprintf_r+0x1f8>)
 800ebc6:	a904      	add	r1, sp, #16
 800ebc8:	4638      	mov	r0, r7
 800ebca:	f7fc f811 	bl	800abf0 <_printf_float>
 800ebce:	1c42      	adds	r2, r0, #1
 800ebd0:	4606      	mov	r6, r0
 800ebd2:	d1d6      	bne.n	800eb82 <_svfiprintf_r+0x176>
 800ebd4:	89ab      	ldrh	r3, [r5, #12]
 800ebd6:	065b      	lsls	r3, r3, #25
 800ebd8:	f53f af2c 	bmi.w	800ea34 <_svfiprintf_r+0x28>
 800ebdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebde:	b01d      	add	sp, #116	; 0x74
 800ebe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe4:	ab03      	add	r3, sp, #12
 800ebe6:	9300      	str	r3, [sp, #0]
 800ebe8:	462a      	mov	r2, r5
 800ebea:	4b06      	ldr	r3, [pc, #24]	; (800ec04 <_svfiprintf_r+0x1f8>)
 800ebec:	a904      	add	r1, sp, #16
 800ebee:	4638      	mov	r0, r7
 800ebf0:	f7fc fa8a 	bl	800b108 <_printf_i>
 800ebf4:	e7eb      	b.n	800ebce <_svfiprintf_r+0x1c2>
 800ebf6:	bf00      	nop
 800ebf8:	08010364 	.word	0x08010364
 800ebfc:	0801036e 	.word	0x0801036e
 800ec00:	0800abf1 	.word	0x0800abf1
 800ec04:	0800e957 	.word	0x0800e957
 800ec08:	0801036a 	.word	0x0801036a

0800ec0c <__sfputc_r>:
 800ec0c:	6893      	ldr	r3, [r2, #8]
 800ec0e:	3b01      	subs	r3, #1
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	b410      	push	{r4}
 800ec14:	6093      	str	r3, [r2, #8]
 800ec16:	da08      	bge.n	800ec2a <__sfputc_r+0x1e>
 800ec18:	6994      	ldr	r4, [r2, #24]
 800ec1a:	42a3      	cmp	r3, r4
 800ec1c:	db01      	blt.n	800ec22 <__sfputc_r+0x16>
 800ec1e:	290a      	cmp	r1, #10
 800ec20:	d103      	bne.n	800ec2a <__sfputc_r+0x1e>
 800ec22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec26:	f7fd bcf7 	b.w	800c618 <__swbuf_r>
 800ec2a:	6813      	ldr	r3, [r2, #0]
 800ec2c:	1c58      	adds	r0, r3, #1
 800ec2e:	6010      	str	r0, [r2, #0]
 800ec30:	7019      	strb	r1, [r3, #0]
 800ec32:	4608      	mov	r0, r1
 800ec34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec38:	4770      	bx	lr

0800ec3a <__sfputs_r>:
 800ec3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec3c:	4606      	mov	r6, r0
 800ec3e:	460f      	mov	r7, r1
 800ec40:	4614      	mov	r4, r2
 800ec42:	18d5      	adds	r5, r2, r3
 800ec44:	42ac      	cmp	r4, r5
 800ec46:	d101      	bne.n	800ec4c <__sfputs_r+0x12>
 800ec48:	2000      	movs	r0, #0
 800ec4a:	e007      	b.n	800ec5c <__sfputs_r+0x22>
 800ec4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec50:	463a      	mov	r2, r7
 800ec52:	4630      	mov	r0, r6
 800ec54:	f7ff ffda 	bl	800ec0c <__sfputc_r>
 800ec58:	1c43      	adds	r3, r0, #1
 800ec5a:	d1f3      	bne.n	800ec44 <__sfputs_r+0xa>
 800ec5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec60 <_vfiprintf_r>:
 800ec60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec64:	460d      	mov	r5, r1
 800ec66:	b09d      	sub	sp, #116	; 0x74
 800ec68:	4614      	mov	r4, r2
 800ec6a:	4698      	mov	r8, r3
 800ec6c:	4606      	mov	r6, r0
 800ec6e:	b118      	cbz	r0, 800ec78 <_vfiprintf_r+0x18>
 800ec70:	6983      	ldr	r3, [r0, #24]
 800ec72:	b90b      	cbnz	r3, 800ec78 <_vfiprintf_r+0x18>
 800ec74:	f7fe fcc4 	bl	800d600 <__sinit>
 800ec78:	4b89      	ldr	r3, [pc, #548]	; (800eea0 <_vfiprintf_r+0x240>)
 800ec7a:	429d      	cmp	r5, r3
 800ec7c:	d11b      	bne.n	800ecb6 <_vfiprintf_r+0x56>
 800ec7e:	6875      	ldr	r5, [r6, #4]
 800ec80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec82:	07d9      	lsls	r1, r3, #31
 800ec84:	d405      	bmi.n	800ec92 <_vfiprintf_r+0x32>
 800ec86:	89ab      	ldrh	r3, [r5, #12]
 800ec88:	059a      	lsls	r2, r3, #22
 800ec8a:	d402      	bmi.n	800ec92 <_vfiprintf_r+0x32>
 800ec8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec8e:	f7ff f8da 	bl	800de46 <__retarget_lock_acquire_recursive>
 800ec92:	89ab      	ldrh	r3, [r5, #12]
 800ec94:	071b      	lsls	r3, r3, #28
 800ec96:	d501      	bpl.n	800ec9c <_vfiprintf_r+0x3c>
 800ec98:	692b      	ldr	r3, [r5, #16]
 800ec9a:	b9eb      	cbnz	r3, 800ecd8 <_vfiprintf_r+0x78>
 800ec9c:	4629      	mov	r1, r5
 800ec9e:	4630      	mov	r0, r6
 800eca0:	f7fd fd0c 	bl	800c6bc <__swsetup_r>
 800eca4:	b1c0      	cbz	r0, 800ecd8 <_vfiprintf_r+0x78>
 800eca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eca8:	07dc      	lsls	r4, r3, #31
 800ecaa:	d50e      	bpl.n	800ecca <_vfiprintf_r+0x6a>
 800ecac:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb0:	b01d      	add	sp, #116	; 0x74
 800ecb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb6:	4b7b      	ldr	r3, [pc, #492]	; (800eea4 <_vfiprintf_r+0x244>)
 800ecb8:	429d      	cmp	r5, r3
 800ecba:	d101      	bne.n	800ecc0 <_vfiprintf_r+0x60>
 800ecbc:	68b5      	ldr	r5, [r6, #8]
 800ecbe:	e7df      	b.n	800ec80 <_vfiprintf_r+0x20>
 800ecc0:	4b79      	ldr	r3, [pc, #484]	; (800eea8 <_vfiprintf_r+0x248>)
 800ecc2:	429d      	cmp	r5, r3
 800ecc4:	bf08      	it	eq
 800ecc6:	68f5      	ldreq	r5, [r6, #12]
 800ecc8:	e7da      	b.n	800ec80 <_vfiprintf_r+0x20>
 800ecca:	89ab      	ldrh	r3, [r5, #12]
 800eccc:	0598      	lsls	r0, r3, #22
 800ecce:	d4ed      	bmi.n	800ecac <_vfiprintf_r+0x4c>
 800ecd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecd2:	f7ff f8b9 	bl	800de48 <__retarget_lock_release_recursive>
 800ecd6:	e7e9      	b.n	800ecac <_vfiprintf_r+0x4c>
 800ecd8:	2300      	movs	r3, #0
 800ecda:	9309      	str	r3, [sp, #36]	; 0x24
 800ecdc:	2320      	movs	r3, #32
 800ecde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ece2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ece6:	2330      	movs	r3, #48	; 0x30
 800ece8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eeac <_vfiprintf_r+0x24c>
 800ecec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ecf0:	f04f 0901 	mov.w	r9, #1
 800ecf4:	4623      	mov	r3, r4
 800ecf6:	469a      	mov	sl, r3
 800ecf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecfc:	b10a      	cbz	r2, 800ed02 <_vfiprintf_r+0xa2>
 800ecfe:	2a25      	cmp	r2, #37	; 0x25
 800ed00:	d1f9      	bne.n	800ecf6 <_vfiprintf_r+0x96>
 800ed02:	ebba 0b04 	subs.w	fp, sl, r4
 800ed06:	d00b      	beq.n	800ed20 <_vfiprintf_r+0xc0>
 800ed08:	465b      	mov	r3, fp
 800ed0a:	4622      	mov	r2, r4
 800ed0c:	4629      	mov	r1, r5
 800ed0e:	4630      	mov	r0, r6
 800ed10:	f7ff ff93 	bl	800ec3a <__sfputs_r>
 800ed14:	3001      	adds	r0, #1
 800ed16:	f000 80aa 	beq.w	800ee6e <_vfiprintf_r+0x20e>
 800ed1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed1c:	445a      	add	r2, fp
 800ed1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ed20:	f89a 3000 	ldrb.w	r3, [sl]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	f000 80a2 	beq.w	800ee6e <_vfiprintf_r+0x20e>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed34:	f10a 0a01 	add.w	sl, sl, #1
 800ed38:	9304      	str	r3, [sp, #16]
 800ed3a:	9307      	str	r3, [sp, #28]
 800ed3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed40:	931a      	str	r3, [sp, #104]	; 0x68
 800ed42:	4654      	mov	r4, sl
 800ed44:	2205      	movs	r2, #5
 800ed46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed4a:	4858      	ldr	r0, [pc, #352]	; (800eeac <_vfiprintf_r+0x24c>)
 800ed4c:	f7f1 fa80 	bl	8000250 <memchr>
 800ed50:	9a04      	ldr	r2, [sp, #16]
 800ed52:	b9d8      	cbnz	r0, 800ed8c <_vfiprintf_r+0x12c>
 800ed54:	06d1      	lsls	r1, r2, #27
 800ed56:	bf44      	itt	mi
 800ed58:	2320      	movmi	r3, #32
 800ed5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed5e:	0713      	lsls	r3, r2, #28
 800ed60:	bf44      	itt	mi
 800ed62:	232b      	movmi	r3, #43	; 0x2b
 800ed64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed68:	f89a 3000 	ldrb.w	r3, [sl]
 800ed6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ed6e:	d015      	beq.n	800ed9c <_vfiprintf_r+0x13c>
 800ed70:	9a07      	ldr	r2, [sp, #28]
 800ed72:	4654      	mov	r4, sl
 800ed74:	2000      	movs	r0, #0
 800ed76:	f04f 0c0a 	mov.w	ip, #10
 800ed7a:	4621      	mov	r1, r4
 800ed7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed80:	3b30      	subs	r3, #48	; 0x30
 800ed82:	2b09      	cmp	r3, #9
 800ed84:	d94e      	bls.n	800ee24 <_vfiprintf_r+0x1c4>
 800ed86:	b1b0      	cbz	r0, 800edb6 <_vfiprintf_r+0x156>
 800ed88:	9207      	str	r2, [sp, #28]
 800ed8a:	e014      	b.n	800edb6 <_vfiprintf_r+0x156>
 800ed8c:	eba0 0308 	sub.w	r3, r0, r8
 800ed90:	fa09 f303 	lsl.w	r3, r9, r3
 800ed94:	4313      	orrs	r3, r2
 800ed96:	9304      	str	r3, [sp, #16]
 800ed98:	46a2      	mov	sl, r4
 800ed9a:	e7d2      	b.n	800ed42 <_vfiprintf_r+0xe2>
 800ed9c:	9b03      	ldr	r3, [sp, #12]
 800ed9e:	1d19      	adds	r1, r3, #4
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	9103      	str	r1, [sp, #12]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	bfbb      	ittet	lt
 800eda8:	425b      	neglt	r3, r3
 800edaa:	f042 0202 	orrlt.w	r2, r2, #2
 800edae:	9307      	strge	r3, [sp, #28]
 800edb0:	9307      	strlt	r3, [sp, #28]
 800edb2:	bfb8      	it	lt
 800edb4:	9204      	strlt	r2, [sp, #16]
 800edb6:	7823      	ldrb	r3, [r4, #0]
 800edb8:	2b2e      	cmp	r3, #46	; 0x2e
 800edba:	d10c      	bne.n	800edd6 <_vfiprintf_r+0x176>
 800edbc:	7863      	ldrb	r3, [r4, #1]
 800edbe:	2b2a      	cmp	r3, #42	; 0x2a
 800edc0:	d135      	bne.n	800ee2e <_vfiprintf_r+0x1ce>
 800edc2:	9b03      	ldr	r3, [sp, #12]
 800edc4:	1d1a      	adds	r2, r3, #4
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	9203      	str	r2, [sp, #12]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	bfb8      	it	lt
 800edce:	f04f 33ff 	movlt.w	r3, #4294967295
 800edd2:	3402      	adds	r4, #2
 800edd4:	9305      	str	r3, [sp, #20]
 800edd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eebc <_vfiprintf_r+0x25c>
 800edda:	7821      	ldrb	r1, [r4, #0]
 800eddc:	2203      	movs	r2, #3
 800edde:	4650      	mov	r0, sl
 800ede0:	f7f1 fa36 	bl	8000250 <memchr>
 800ede4:	b140      	cbz	r0, 800edf8 <_vfiprintf_r+0x198>
 800ede6:	2340      	movs	r3, #64	; 0x40
 800ede8:	eba0 000a 	sub.w	r0, r0, sl
 800edec:	fa03 f000 	lsl.w	r0, r3, r0
 800edf0:	9b04      	ldr	r3, [sp, #16]
 800edf2:	4303      	orrs	r3, r0
 800edf4:	3401      	adds	r4, #1
 800edf6:	9304      	str	r3, [sp, #16]
 800edf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edfc:	482c      	ldr	r0, [pc, #176]	; (800eeb0 <_vfiprintf_r+0x250>)
 800edfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee02:	2206      	movs	r2, #6
 800ee04:	f7f1 fa24 	bl	8000250 <memchr>
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	d03f      	beq.n	800ee8c <_vfiprintf_r+0x22c>
 800ee0c:	4b29      	ldr	r3, [pc, #164]	; (800eeb4 <_vfiprintf_r+0x254>)
 800ee0e:	bb1b      	cbnz	r3, 800ee58 <_vfiprintf_r+0x1f8>
 800ee10:	9b03      	ldr	r3, [sp, #12]
 800ee12:	3307      	adds	r3, #7
 800ee14:	f023 0307 	bic.w	r3, r3, #7
 800ee18:	3308      	adds	r3, #8
 800ee1a:	9303      	str	r3, [sp, #12]
 800ee1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee1e:	443b      	add	r3, r7
 800ee20:	9309      	str	r3, [sp, #36]	; 0x24
 800ee22:	e767      	b.n	800ecf4 <_vfiprintf_r+0x94>
 800ee24:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee28:	460c      	mov	r4, r1
 800ee2a:	2001      	movs	r0, #1
 800ee2c:	e7a5      	b.n	800ed7a <_vfiprintf_r+0x11a>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	3401      	adds	r4, #1
 800ee32:	9305      	str	r3, [sp, #20]
 800ee34:	4619      	mov	r1, r3
 800ee36:	f04f 0c0a 	mov.w	ip, #10
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee40:	3a30      	subs	r2, #48	; 0x30
 800ee42:	2a09      	cmp	r2, #9
 800ee44:	d903      	bls.n	800ee4e <_vfiprintf_r+0x1ee>
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d0c5      	beq.n	800edd6 <_vfiprintf_r+0x176>
 800ee4a:	9105      	str	r1, [sp, #20]
 800ee4c:	e7c3      	b.n	800edd6 <_vfiprintf_r+0x176>
 800ee4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee52:	4604      	mov	r4, r0
 800ee54:	2301      	movs	r3, #1
 800ee56:	e7f0      	b.n	800ee3a <_vfiprintf_r+0x1da>
 800ee58:	ab03      	add	r3, sp, #12
 800ee5a:	9300      	str	r3, [sp, #0]
 800ee5c:	462a      	mov	r2, r5
 800ee5e:	4b16      	ldr	r3, [pc, #88]	; (800eeb8 <_vfiprintf_r+0x258>)
 800ee60:	a904      	add	r1, sp, #16
 800ee62:	4630      	mov	r0, r6
 800ee64:	f7fb fec4 	bl	800abf0 <_printf_float>
 800ee68:	4607      	mov	r7, r0
 800ee6a:	1c78      	adds	r0, r7, #1
 800ee6c:	d1d6      	bne.n	800ee1c <_vfiprintf_r+0x1bc>
 800ee6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee70:	07d9      	lsls	r1, r3, #31
 800ee72:	d405      	bmi.n	800ee80 <_vfiprintf_r+0x220>
 800ee74:	89ab      	ldrh	r3, [r5, #12]
 800ee76:	059a      	lsls	r2, r3, #22
 800ee78:	d402      	bmi.n	800ee80 <_vfiprintf_r+0x220>
 800ee7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee7c:	f7fe ffe4 	bl	800de48 <__retarget_lock_release_recursive>
 800ee80:	89ab      	ldrh	r3, [r5, #12]
 800ee82:	065b      	lsls	r3, r3, #25
 800ee84:	f53f af12 	bmi.w	800ecac <_vfiprintf_r+0x4c>
 800ee88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee8a:	e711      	b.n	800ecb0 <_vfiprintf_r+0x50>
 800ee8c:	ab03      	add	r3, sp, #12
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	462a      	mov	r2, r5
 800ee92:	4b09      	ldr	r3, [pc, #36]	; (800eeb8 <_vfiprintf_r+0x258>)
 800ee94:	a904      	add	r1, sp, #16
 800ee96:	4630      	mov	r0, r6
 800ee98:	f7fc f936 	bl	800b108 <_printf_i>
 800ee9c:	e7e4      	b.n	800ee68 <_vfiprintf_r+0x208>
 800ee9e:	bf00      	nop
 800eea0:	08010150 	.word	0x08010150
 800eea4:	08010170 	.word	0x08010170
 800eea8:	08010130 	.word	0x08010130
 800eeac:	08010364 	.word	0x08010364
 800eeb0:	0801036e 	.word	0x0801036e
 800eeb4:	0800abf1 	.word	0x0800abf1
 800eeb8:	0800ec3b 	.word	0x0800ec3b
 800eebc:	0801036a 	.word	0x0801036a

0800eec0 <nan>:
 800eec0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eec8 <nan+0x8>
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	00000000 	.word	0x00000000
 800eecc:	7ff80000 	.word	0x7ff80000

0800eed0 <__sread>:
 800eed0:	b510      	push	{r4, lr}
 800eed2:	460c      	mov	r4, r1
 800eed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eed8:	f000 f8de 	bl	800f098 <_read_r>
 800eedc:	2800      	cmp	r0, #0
 800eede:	bfab      	itete	ge
 800eee0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eee2:	89a3      	ldrhlt	r3, [r4, #12]
 800eee4:	181b      	addge	r3, r3, r0
 800eee6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eeea:	bfac      	ite	ge
 800eeec:	6563      	strge	r3, [r4, #84]	; 0x54
 800eeee:	81a3      	strhlt	r3, [r4, #12]
 800eef0:	bd10      	pop	{r4, pc}

0800eef2 <__swrite>:
 800eef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef6:	461f      	mov	r7, r3
 800eef8:	898b      	ldrh	r3, [r1, #12]
 800eefa:	05db      	lsls	r3, r3, #23
 800eefc:	4605      	mov	r5, r0
 800eefe:	460c      	mov	r4, r1
 800ef00:	4616      	mov	r6, r2
 800ef02:	d505      	bpl.n	800ef10 <__swrite+0x1e>
 800ef04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef08:	2302      	movs	r3, #2
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	f000 f890 	bl	800f030 <_lseek_r>
 800ef10:	89a3      	ldrh	r3, [r4, #12]
 800ef12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef1a:	81a3      	strh	r3, [r4, #12]
 800ef1c:	4632      	mov	r2, r6
 800ef1e:	463b      	mov	r3, r7
 800ef20:	4628      	mov	r0, r5
 800ef22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef26:	f000 b837 	b.w	800ef98 <_write_r>

0800ef2a <__sseek>:
 800ef2a:	b510      	push	{r4, lr}
 800ef2c:	460c      	mov	r4, r1
 800ef2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef32:	f000 f87d 	bl	800f030 <_lseek_r>
 800ef36:	1c43      	adds	r3, r0, #1
 800ef38:	89a3      	ldrh	r3, [r4, #12]
 800ef3a:	bf15      	itete	ne
 800ef3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ef3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef46:	81a3      	strheq	r3, [r4, #12]
 800ef48:	bf18      	it	ne
 800ef4a:	81a3      	strhne	r3, [r4, #12]
 800ef4c:	bd10      	pop	{r4, pc}

0800ef4e <__sclose>:
 800ef4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef52:	f000 b83b 	b.w	800efcc <_close_r>

0800ef56 <strncmp>:
 800ef56:	b510      	push	{r4, lr}
 800ef58:	b17a      	cbz	r2, 800ef7a <strncmp+0x24>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	3901      	subs	r1, #1
 800ef5e:	1884      	adds	r4, r0, r2
 800ef60:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ef64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ef68:	4290      	cmp	r0, r2
 800ef6a:	d101      	bne.n	800ef70 <strncmp+0x1a>
 800ef6c:	42a3      	cmp	r3, r4
 800ef6e:	d101      	bne.n	800ef74 <strncmp+0x1e>
 800ef70:	1a80      	subs	r0, r0, r2
 800ef72:	bd10      	pop	{r4, pc}
 800ef74:	2800      	cmp	r0, #0
 800ef76:	d1f3      	bne.n	800ef60 <strncmp+0xa>
 800ef78:	e7fa      	b.n	800ef70 <strncmp+0x1a>
 800ef7a:	4610      	mov	r0, r2
 800ef7c:	e7f9      	b.n	800ef72 <strncmp+0x1c>

0800ef7e <__ascii_wctomb>:
 800ef7e:	b149      	cbz	r1, 800ef94 <__ascii_wctomb+0x16>
 800ef80:	2aff      	cmp	r2, #255	; 0xff
 800ef82:	bf85      	ittet	hi
 800ef84:	238a      	movhi	r3, #138	; 0x8a
 800ef86:	6003      	strhi	r3, [r0, #0]
 800ef88:	700a      	strbls	r2, [r1, #0]
 800ef8a:	f04f 30ff 	movhi.w	r0, #4294967295
 800ef8e:	bf98      	it	ls
 800ef90:	2001      	movls	r0, #1
 800ef92:	4770      	bx	lr
 800ef94:	4608      	mov	r0, r1
 800ef96:	4770      	bx	lr

0800ef98 <_write_r>:
 800ef98:	b538      	push	{r3, r4, r5, lr}
 800ef9a:	4d07      	ldr	r5, [pc, #28]	; (800efb8 <_write_r+0x20>)
 800ef9c:	4604      	mov	r4, r0
 800ef9e:	4608      	mov	r0, r1
 800efa0:	4611      	mov	r1, r2
 800efa2:	2200      	movs	r2, #0
 800efa4:	602a      	str	r2, [r5, #0]
 800efa6:	461a      	mov	r2, r3
 800efa8:	f000 f9a0 	bl	800f2ec <_write>
 800efac:	1c43      	adds	r3, r0, #1
 800efae:	d102      	bne.n	800efb6 <_write_r+0x1e>
 800efb0:	682b      	ldr	r3, [r5, #0]
 800efb2:	b103      	cbz	r3, 800efb6 <_write_r+0x1e>
 800efb4:	6023      	str	r3, [r4, #0]
 800efb6:	bd38      	pop	{r3, r4, r5, pc}
 800efb8:	20000f68 	.word	0x20000f68

0800efbc <abort>:
 800efbc:	b508      	push	{r3, lr}
 800efbe:	2006      	movs	r0, #6
 800efc0:	f000 f8a4 	bl	800f10c <raise>
 800efc4:	2001      	movs	r0, #1
 800efc6:	f000 f999 	bl	800f2fc <_exit>
	...

0800efcc <_close_r>:
 800efcc:	b538      	push	{r3, r4, r5, lr}
 800efce:	4d06      	ldr	r5, [pc, #24]	; (800efe8 <_close_r+0x1c>)
 800efd0:	2300      	movs	r3, #0
 800efd2:	4604      	mov	r4, r0
 800efd4:	4608      	mov	r0, r1
 800efd6:	602b      	str	r3, [r5, #0]
 800efd8:	f000 f950 	bl	800f27c <_close>
 800efdc:	1c43      	adds	r3, r0, #1
 800efde:	d102      	bne.n	800efe6 <_close_r+0x1a>
 800efe0:	682b      	ldr	r3, [r5, #0]
 800efe2:	b103      	cbz	r3, 800efe6 <_close_r+0x1a>
 800efe4:	6023      	str	r3, [r4, #0]
 800efe6:	bd38      	pop	{r3, r4, r5, pc}
 800efe8:	20000f68 	.word	0x20000f68

0800efec <_fstat_r>:
 800efec:	b538      	push	{r3, r4, r5, lr}
 800efee:	4d07      	ldr	r5, [pc, #28]	; (800f00c <_fstat_r+0x20>)
 800eff0:	2300      	movs	r3, #0
 800eff2:	4604      	mov	r4, r0
 800eff4:	4608      	mov	r0, r1
 800eff6:	4611      	mov	r1, r2
 800eff8:	602b      	str	r3, [r5, #0]
 800effa:	f000 f947 	bl	800f28c <_fstat>
 800effe:	1c43      	adds	r3, r0, #1
 800f000:	d102      	bne.n	800f008 <_fstat_r+0x1c>
 800f002:	682b      	ldr	r3, [r5, #0]
 800f004:	b103      	cbz	r3, 800f008 <_fstat_r+0x1c>
 800f006:	6023      	str	r3, [r4, #0]
 800f008:	bd38      	pop	{r3, r4, r5, pc}
 800f00a:	bf00      	nop
 800f00c:	20000f68 	.word	0x20000f68

0800f010 <_isatty_r>:
 800f010:	b538      	push	{r3, r4, r5, lr}
 800f012:	4d06      	ldr	r5, [pc, #24]	; (800f02c <_isatty_r+0x1c>)
 800f014:	2300      	movs	r3, #0
 800f016:	4604      	mov	r4, r0
 800f018:	4608      	mov	r0, r1
 800f01a:	602b      	str	r3, [r5, #0]
 800f01c:	f000 f946 	bl	800f2ac <_isatty>
 800f020:	1c43      	adds	r3, r0, #1
 800f022:	d102      	bne.n	800f02a <_isatty_r+0x1a>
 800f024:	682b      	ldr	r3, [r5, #0]
 800f026:	b103      	cbz	r3, 800f02a <_isatty_r+0x1a>
 800f028:	6023      	str	r3, [r4, #0]
 800f02a:	bd38      	pop	{r3, r4, r5, pc}
 800f02c:	20000f68 	.word	0x20000f68

0800f030 <_lseek_r>:
 800f030:	b538      	push	{r3, r4, r5, lr}
 800f032:	4d07      	ldr	r5, [pc, #28]	; (800f050 <_lseek_r+0x20>)
 800f034:	4604      	mov	r4, r0
 800f036:	4608      	mov	r0, r1
 800f038:	4611      	mov	r1, r2
 800f03a:	2200      	movs	r2, #0
 800f03c:	602a      	str	r2, [r5, #0]
 800f03e:	461a      	mov	r2, r3
 800f040:	f000 f944 	bl	800f2cc <_lseek>
 800f044:	1c43      	adds	r3, r0, #1
 800f046:	d102      	bne.n	800f04e <_lseek_r+0x1e>
 800f048:	682b      	ldr	r3, [r5, #0]
 800f04a:	b103      	cbz	r3, 800f04e <_lseek_r+0x1e>
 800f04c:	6023      	str	r3, [r4, #0]
 800f04e:	bd38      	pop	{r3, r4, r5, pc}
 800f050:	20000f68 	.word	0x20000f68

0800f054 <memmove>:
 800f054:	4288      	cmp	r0, r1
 800f056:	b510      	push	{r4, lr}
 800f058:	eb01 0402 	add.w	r4, r1, r2
 800f05c:	d902      	bls.n	800f064 <memmove+0x10>
 800f05e:	4284      	cmp	r4, r0
 800f060:	4623      	mov	r3, r4
 800f062:	d807      	bhi.n	800f074 <memmove+0x20>
 800f064:	1e43      	subs	r3, r0, #1
 800f066:	42a1      	cmp	r1, r4
 800f068:	d008      	beq.n	800f07c <memmove+0x28>
 800f06a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f06e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f072:	e7f8      	b.n	800f066 <memmove+0x12>
 800f074:	4402      	add	r2, r0
 800f076:	4601      	mov	r1, r0
 800f078:	428a      	cmp	r2, r1
 800f07a:	d100      	bne.n	800f07e <memmove+0x2a>
 800f07c:	bd10      	pop	{r4, pc}
 800f07e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f086:	e7f7      	b.n	800f078 <memmove+0x24>

0800f088 <_malloc_usable_size_r>:
 800f088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f08c:	1f18      	subs	r0, r3, #4
 800f08e:	2b00      	cmp	r3, #0
 800f090:	bfbc      	itt	lt
 800f092:	580b      	ldrlt	r3, [r1, r0]
 800f094:	18c0      	addlt	r0, r0, r3
 800f096:	4770      	bx	lr

0800f098 <_read_r>:
 800f098:	b538      	push	{r3, r4, r5, lr}
 800f09a:	4d07      	ldr	r5, [pc, #28]	; (800f0b8 <_read_r+0x20>)
 800f09c:	4604      	mov	r4, r0
 800f09e:	4608      	mov	r0, r1
 800f0a0:	4611      	mov	r1, r2
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	602a      	str	r2, [r5, #0]
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	f000 f918 	bl	800f2dc <_read>
 800f0ac:	1c43      	adds	r3, r0, #1
 800f0ae:	d102      	bne.n	800f0b6 <_read_r+0x1e>
 800f0b0:	682b      	ldr	r3, [r5, #0]
 800f0b2:	b103      	cbz	r3, 800f0b6 <_read_r+0x1e>
 800f0b4:	6023      	str	r3, [r4, #0]
 800f0b6:	bd38      	pop	{r3, r4, r5, pc}
 800f0b8:	20000f68 	.word	0x20000f68

0800f0bc <_raise_r>:
 800f0bc:	291f      	cmp	r1, #31
 800f0be:	b538      	push	{r3, r4, r5, lr}
 800f0c0:	4604      	mov	r4, r0
 800f0c2:	460d      	mov	r5, r1
 800f0c4:	d904      	bls.n	800f0d0 <_raise_r+0x14>
 800f0c6:	2316      	movs	r3, #22
 800f0c8:	6003      	str	r3, [r0, #0]
 800f0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ce:	bd38      	pop	{r3, r4, r5, pc}
 800f0d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f0d2:	b112      	cbz	r2, 800f0da <_raise_r+0x1e>
 800f0d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f0d8:	b94b      	cbnz	r3, 800f0ee <_raise_r+0x32>
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f000 f830 	bl	800f140 <_getpid_r>
 800f0e0:	462a      	mov	r2, r5
 800f0e2:	4601      	mov	r1, r0
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0ea:	f000 b817 	b.w	800f11c <_kill_r>
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d00a      	beq.n	800f108 <_raise_r+0x4c>
 800f0f2:	1c59      	adds	r1, r3, #1
 800f0f4:	d103      	bne.n	800f0fe <_raise_r+0x42>
 800f0f6:	2316      	movs	r3, #22
 800f0f8:	6003      	str	r3, [r0, #0]
 800f0fa:	2001      	movs	r0, #1
 800f0fc:	e7e7      	b.n	800f0ce <_raise_r+0x12>
 800f0fe:	2400      	movs	r4, #0
 800f100:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f104:	4628      	mov	r0, r5
 800f106:	4798      	blx	r3
 800f108:	2000      	movs	r0, #0
 800f10a:	e7e0      	b.n	800f0ce <_raise_r+0x12>

0800f10c <raise>:
 800f10c:	4b02      	ldr	r3, [pc, #8]	; (800f118 <raise+0xc>)
 800f10e:	4601      	mov	r1, r0
 800f110:	6818      	ldr	r0, [r3, #0]
 800f112:	f7ff bfd3 	b.w	800f0bc <_raise_r>
 800f116:	bf00      	nop
 800f118:	20000544 	.word	0x20000544

0800f11c <_kill_r>:
 800f11c:	b538      	push	{r3, r4, r5, lr}
 800f11e:	4d07      	ldr	r5, [pc, #28]	; (800f13c <_kill_r+0x20>)
 800f120:	2300      	movs	r3, #0
 800f122:	4604      	mov	r4, r0
 800f124:	4608      	mov	r0, r1
 800f126:	4611      	mov	r1, r2
 800f128:	602b      	str	r3, [r5, #0]
 800f12a:	f000 f8c7 	bl	800f2bc <_kill>
 800f12e:	1c43      	adds	r3, r0, #1
 800f130:	d102      	bne.n	800f138 <_kill_r+0x1c>
 800f132:	682b      	ldr	r3, [r5, #0]
 800f134:	b103      	cbz	r3, 800f138 <_kill_r+0x1c>
 800f136:	6023      	str	r3, [r4, #0]
 800f138:	bd38      	pop	{r3, r4, r5, pc}
 800f13a:	bf00      	nop
 800f13c:	20000f68 	.word	0x20000f68

0800f140 <_getpid_r>:
 800f140:	f000 b8ac 	b.w	800f29c <_getpid>

0800f144 <with_errnof>:
 800f144:	b513      	push	{r0, r1, r4, lr}
 800f146:	4604      	mov	r4, r0
 800f148:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f14c:	f7fb fb98 	bl	800a880 <__errno>
 800f150:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f154:	6004      	str	r4, [r0, #0]
 800f156:	b002      	add	sp, #8
 800f158:	bd10      	pop	{r4, pc}

0800f15a <xflowf>:
 800f15a:	b130      	cbz	r0, 800f16a <xflowf+0x10>
 800f15c:	eef1 7a40 	vneg.f32	s15, s0
 800f160:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f164:	2022      	movs	r0, #34	; 0x22
 800f166:	f7ff bfed 	b.w	800f144 <with_errnof>
 800f16a:	eef0 7a40 	vmov.f32	s15, s0
 800f16e:	e7f7      	b.n	800f160 <xflowf+0x6>

0800f170 <__math_uflowf>:
 800f170:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f178 <__math_uflowf+0x8>
 800f174:	f7ff bff1 	b.w	800f15a <xflowf>
 800f178:	10000000 	.word	0x10000000

0800f17c <__math_may_uflowf>:
 800f17c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f184 <__math_may_uflowf+0x8>
 800f180:	f7ff bfeb 	b.w	800f15a <xflowf>
 800f184:	1a200000 	.word	0x1a200000

0800f188 <__math_oflowf>:
 800f188:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f190 <__math_oflowf+0x8>
 800f18c:	f7ff bfe5 	b.w	800f15a <xflowf>
 800f190:	70000000 	.word	0x70000000

0800f194 <expf>:
 800f194:	ee10 2a10 	vmov	r2, s0
 800f198:	f240 412a 	movw	r1, #1066	; 0x42a
 800f19c:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800f1a0:	428b      	cmp	r3, r1
 800f1a2:	b430      	push	{r4, r5}
 800f1a4:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800f1a8:	d92a      	bls.n	800f200 <expf+0x6c>
 800f1aa:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800f1ae:	d058      	beq.n	800f262 <expf+0xce>
 800f1b0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800f1b4:	d303      	bcc.n	800f1be <expf+0x2a>
 800f1b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f1ba:	bc30      	pop	{r4, r5}
 800f1bc:	4770      	bx	lr
 800f1be:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800f268 <expf+0xd4>
 800f1c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ca:	dd03      	ble.n	800f1d4 <expf+0x40>
 800f1cc:	bc30      	pop	{r4, r5}
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	f7ff bfda 	b.w	800f188 <__math_oflowf>
 800f1d4:	eddf 7a25 	vldr	s15, [pc, #148]	; 800f26c <expf+0xd8>
 800f1d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e0:	d503      	bpl.n	800f1ea <expf+0x56>
 800f1e2:	bc30      	pop	{r4, r5}
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	f7ff bfc3 	b.w	800f170 <__math_uflowf>
 800f1ea:	eddf 7a21 	vldr	s15, [pc, #132]	; 800f270 <expf+0xdc>
 800f1ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f6:	d503      	bpl.n	800f200 <expf+0x6c>
 800f1f8:	bc30      	pop	{r4, r5}
 800f1fa:	2000      	movs	r0, #0
 800f1fc:	f7ff bfbe 	b.w	800f17c <__math_may_uflowf>
 800f200:	4b1c      	ldr	r3, [pc, #112]	; (800f274 <expf+0xe0>)
 800f202:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f206:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800f20a:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800f20e:	eeb0 7b44 	vmov.f64	d7, d4
 800f212:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f216:	ee17 0a10 	vmov	r0, s14
 800f21a:	ee37 7b44 	vsub.f64	d7, d7, d4
 800f21e:	f000 021f 	and.w	r2, r0, #31
 800f222:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800f226:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800f22a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800f22e:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800f232:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800f236:	eea5 6b07 	vfma.f64	d6, d5, d7
 800f23a:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800f23e:	684d      	ldr	r5, [r1, #4]
 800f240:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800f244:	2100      	movs	r1, #0
 800f246:	190a      	adds	r2, r1, r4
 800f248:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800f24c:	eea5 0b07 	vfma.f64	d0, d5, d7
 800f250:	ec43 2b17 	vmov	d7, r2, r3
 800f254:	eea6 0b04 	vfma.f64	d0, d6, d4
 800f258:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f25c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f260:	e7ab      	b.n	800f1ba <expf+0x26>
 800f262:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800f278 <expf+0xe4>
 800f266:	e7a8      	b.n	800f1ba <expf+0x26>
 800f268:	42b17217 	.word	0x42b17217
 800f26c:	c2cff1b4 	.word	0xc2cff1b4
 800f270:	c2ce8ecf 	.word	0xc2ce8ecf
 800f274:	08010378 	.word	0x08010378
 800f278:	00000000 	.word	0x00000000

0800f27c <_close>:
 800f27c:	4b02      	ldr	r3, [pc, #8]	; (800f288 <_close+0xc>)
 800f27e:	2258      	movs	r2, #88	; 0x58
 800f280:	601a      	str	r2, [r3, #0]
 800f282:	f04f 30ff 	mov.w	r0, #4294967295
 800f286:	4770      	bx	lr
 800f288:	20000f68 	.word	0x20000f68

0800f28c <_fstat>:
 800f28c:	4b02      	ldr	r3, [pc, #8]	; (800f298 <_fstat+0xc>)
 800f28e:	2258      	movs	r2, #88	; 0x58
 800f290:	601a      	str	r2, [r3, #0]
 800f292:	f04f 30ff 	mov.w	r0, #4294967295
 800f296:	4770      	bx	lr
 800f298:	20000f68 	.word	0x20000f68

0800f29c <_getpid>:
 800f29c:	4b02      	ldr	r3, [pc, #8]	; (800f2a8 <_getpid+0xc>)
 800f29e:	2258      	movs	r2, #88	; 0x58
 800f2a0:	601a      	str	r2, [r3, #0]
 800f2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2a6:	4770      	bx	lr
 800f2a8:	20000f68 	.word	0x20000f68

0800f2ac <_isatty>:
 800f2ac:	4b02      	ldr	r3, [pc, #8]	; (800f2b8 <_isatty+0xc>)
 800f2ae:	2258      	movs	r2, #88	; 0x58
 800f2b0:	601a      	str	r2, [r3, #0]
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	20000f68 	.word	0x20000f68

0800f2bc <_kill>:
 800f2bc:	4b02      	ldr	r3, [pc, #8]	; (800f2c8 <_kill+0xc>)
 800f2be:	2258      	movs	r2, #88	; 0x58
 800f2c0:	601a      	str	r2, [r3, #0]
 800f2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c6:	4770      	bx	lr
 800f2c8:	20000f68 	.word	0x20000f68

0800f2cc <_lseek>:
 800f2cc:	4b02      	ldr	r3, [pc, #8]	; (800f2d8 <_lseek+0xc>)
 800f2ce:	2258      	movs	r2, #88	; 0x58
 800f2d0:	601a      	str	r2, [r3, #0]
 800f2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2d6:	4770      	bx	lr
 800f2d8:	20000f68 	.word	0x20000f68

0800f2dc <_read>:
 800f2dc:	4b02      	ldr	r3, [pc, #8]	; (800f2e8 <_read+0xc>)
 800f2de:	2258      	movs	r2, #88	; 0x58
 800f2e0:	601a      	str	r2, [r3, #0]
 800f2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e6:	4770      	bx	lr
 800f2e8:	20000f68 	.word	0x20000f68

0800f2ec <_write>:
 800f2ec:	4b02      	ldr	r3, [pc, #8]	; (800f2f8 <_write+0xc>)
 800f2ee:	2258      	movs	r2, #88	; 0x58
 800f2f0:	601a      	str	r2, [r3, #0]
 800f2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2f6:	4770      	bx	lr
 800f2f8:	20000f68 	.word	0x20000f68

0800f2fc <_exit>:
 800f2fc:	e7fe      	b.n	800f2fc <_exit>
	...

0800f300 <_init>:
 800f300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f302:	bf00      	nop
 800f304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f306:	bc08      	pop	{r3}
 800f308:	469e      	mov	lr, r3
 800f30a:	4770      	bx	lr

0800f30c <_fini>:
 800f30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f30e:	bf00      	nop
 800f310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f312:	bc08      	pop	{r3}
 800f314:	469e      	mov	lr, r3
 800f316:	4770      	bx	lr
